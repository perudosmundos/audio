#!/usr/bin/env node
import fs from 'fs';
import path from 'path';

const localesDir = 'src/lib/locales';
const langs = ['ru', 'en', 'es', 'de', 'fr', 'pl'];
const locales = {};

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
langs.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    locales[lang] = JSON.parse(content);
    console.log(`‚úÖ ${lang}.json –∑–∞–≥—Ä—É–∂–µ–Ω (${Object.keys(locales[lang]).length} –∫–ª—é—á–µ–π)`);
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${lang}.json: ${err.message}`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
console.log('\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –ø–æ —è–∑—ã–∫–∞–º:');
const ruKeysCount = Object.keys(locales.ru).length;
langs.forEach(lang => {
  const count = Object.keys(locales[lang]).length;
  const status = count === ruKeysCount ? '‚úÖ' : '‚ö†Ô∏è';
  console.log(`${status} ${lang}: ${count} –∫–ª—é—á–µ–π`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–ª—é—á–µ–π
console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:');
const ruKeys = Object.keys(locales.ru).sort();
let allSync = true;

langs.forEach(lang => {
  if (lang === 'ru') return;

  const langKeys = Object.keys(locales[lang]).sort();
  const missing = ruKeys.filter(key => !langKeys.includes(key));
  const extra = langKeys.filter(key => !ruKeys.includes(key));

  if (missing.length === 0 && extra.length === 0) {
    console.log(`‚úÖ ${lang}: –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω`);
  } else {
    console.log(`‚ö†Ô∏è ${lang}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missing.length}, –ª–∏—à–Ω–∏—Ö ${extra.length}`);
    allSync = false;
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
console.log('\nüåç –ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤:');
const sampleKeys = ['appName', 'loading', 'save', 'cancel', 'errorGeneric'];

sampleKeys.forEach(key => {
  console.log(`\n"${key}":`);
  langs.forEach(lang => {
    const value = locales[lang][key] || '‚ùå –ù–ï –ù–ê–ô–î–ï–ù';
    console.log(`  ${lang}: "${value}"`);
  });
});

// –ü–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏—è
console.log('\nüî¢ –ü–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏—è:');
const pluralKeys = ['questionCount', 'episodes'];

pluralKeys.forEach(key => {
  console.log(`\n"${key}":`);
  langs.forEach(lang => {
    const forms = [`${key}_one`, `${key}_few`, `${key}_many`];
    const available = forms.filter(form => locales[lang][form]);
    if (available.length > 0) {
      console.log(`  ${lang}: ${available.length} —Ñ–æ—Ä–º`);
    } else {
      console.log(`  ${lang}: ‚ùå –Ω–µ—Ç —Ñ–æ—Ä–º –ø–ª—é—Ä–∞–ª–∏–∑–∞—Ü–∏–∏`);
    }
  });
});

console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`–í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${ruKeysCount}`);
console.log(`–í—Å–µ —è–∑—ã–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${allSync ? '‚úÖ –î–ê' : '‚ö†Ô∏è –ù–ï–¢'}`);
