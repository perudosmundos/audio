import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { getLocaleString } from '@/lib/locales';
import EpisodesList from '@/components/episodes/EpisodesList';
import EpisodesPageHeader from '@/components/episodes/EpisodesPageHeader';
import FilterAndSearchControls from '@/components/episodes/FilterAndSearchControls';
import EmptyState from '@/components/episodes/EmptyState';
import cacheIntegration from '@/lib/cacheIntegration';

const InstantEpisodesPage = ({ currentLanguage, onLanguageChange }) => {
  const [episodes, setEpisodes] = useState([]);
  const [allQuestions, setAllQuestions] = useState([]);
  const [loading, setLoading] = useState(false); // –¢–æ–ª—å–∫–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const [error, setError] = useState(null);
  const [episodeQuestionsCount, setEpisodeQuestionsCount] = useState({});

  const [availableYears, setAvailableYears] = useState([]);
  const [availableMonths, setAvailableMonths] = useState([]);
  const [selectedYear, setSelectedYear] = useState(null);
  const [selectedMonth, setSelectedMonth] = useState(null);

  const monthLabels = [
    "january", "february", "march", "april", "may", "june", 
    "july", "august", "september", "october", "november", "december"
  ];

  const hasInitialized = useRef(false);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
  const processEpisodesData = useCallback(async (episodesData, fromCache = false, questionsData = null) => {
    const langFilteredEpisodes = episodesData.filter(ep => 
      ep.lang === currentLanguage || ep.lang === 'all'
    );
    
    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ–Ω–µ
    if (!questionsData && fromCache) {
      // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
      const counts = {};
      const years = new Set();
      langFilteredEpisodes.forEach(ep => {
        if (ep.date) {
          years.add(new Date(ep.date).getFullYear().toString());
        }
        counts[ep.slug] = counts[ep.slug] || {};
        ['ru', 'es', 'en', 'de', 'fr', 'pl'].forEach(lang => {
          counts[ep.slug][lang] = 0; // –í—Ä–µ–º–µ–Ω–Ω–æ 0, –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ
        });
      });
      
      setAvailableYears(Array.from(years).sort((a,b) => Number(b) - Number(a)));
      setEpisodeQuestionsCount(counts);
      setEpisodes(langFilteredEpisodes);
      setAllQuestions([]);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ–Ω–µ
      loadQuestionsInBackground(langFilteredEpisodes);
      
      console.log('‚úÖ Data processed instantly (episodes only):', {
        episodes: langFilteredEpisodes.length,
        fromCache
      });
      return;
    }

    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥–∞–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const counts = {};
    const years = new Set();
    langFilteredEpisodes.forEach(ep => {
      if (ep.date) {
        years.add(new Date(ep.date).getFullYear().toString());
      }
      counts[ep.slug] = counts[ep.slug] || {};
      ['ru', 'es', 'en', 'de', 'fr', 'pl'].forEach(lang => {
         const episodeQuestions = (questionsData || []).filter(q => 
           q.episode_slug === ep.slug && 
           q.lang === lang && 
           (q.is_intro || q.is_full_transcript || q.id === 'intro-virtual' || (q.title && q.title.trim() !== ''))
         );
         // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
         episodeQuestions.sort((a, b) => (a.time || 0) - (b.time || 0));
         counts[ep.slug][lang] = episodeQuestions.length;
      });
    });
    
    setAvailableYears(Array.from(years).sort((a,b) => Number(b) - Number(a)));
    setEpisodeQuestionsCount(counts);
    setEpisodes(langFilteredEpisodes);
    setAllQuestions(questionsData || []);

    console.log('‚úÖ Data processed instantly (full):', {
      episodes: langFilteredEpisodes.length,
      questions: (questionsData || []).length,
      fromCache
    });
  }, [currentLanguage]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadFreshData = useCallback(async () => {
    setLoading(true);
    
    try {
      const { data: episodesData, error: episodesError } = await supabase
        .from('episodes')
        .select('slug, title, lang, audio_url, duration, date, created_at, file_has_lang_suffix, r2_object_key, r2_bucket_name')
        .order('date', { ascending: false });

      if (episodesError) throw episodesError;
      
      const { data: questionsData, error: questionsError } = await supabase
        .from('questions')
        .select('episode_slug, id, title, lang, time')
        .order('time', { ascending: true }); 
      
      if (questionsError) throw questionsError;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await cacheIntegration.saveEpisodesPageData(episodesData, questionsData);

      await processEpisodesData(episodesData, false, questionsData);
      
    } catch (err) {
      console.error('‚ùå Error loading fresh data:', err);
      setError(getLocaleString('errorFetchingEpisodes', currentLanguage, { errorMessage: err.message }));
    } finally {
      setLoading(false);
    }
  }, [currentLanguage]);

  // –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadFreshDataInBackground = useCallback(async () => {
    try {
      const { data: episodesData, error: episodesError } = await supabase
        .from('episodes')
        .select('slug, title, lang, audio_url, duration, date, created_at, file_has_lang_suffix, r2_object_key, r2_bucket_name')
        .order('date', { ascending: false });

      if (!episodesError && episodesData) {
        const { data: questionsData } = await supabase
          .from('questions')
          .select('episode_slug, id, title, lang, time')
          .order('time', { ascending: true });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ —Ñ–æ–Ω–µ
        await cacheIntegration.saveEpisodesPageData(episodesData, questionsData);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if (episodesData.length !== episodes.length) {
          await processEpisodesData(episodesData, false, questionsData);
        }
        
        console.log('üîÑ Background data refresh completed');
      }
    } catch (err) {
      console.debug('Background refresh failed:', err);
    }
  }, [currentLanguage]);

  // –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  const loadQuestionsInBackground = async (episodesList) => {
    try {
      const allQuestions = [];
      
      for (const episode of episodesList) {
        for (const lang of ['ru', 'es', 'en', 'de', 'fr', 'pl']) {
          const cachedQuestions = await cacheIntegration.loadPlayerPageData(episode.slug, currentLanguage);
          if (cachedQuestions.questions) {
            allQuestions.push(...cachedQuestions.questions);
          }
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
      updateQuestionsCount(episodesList, allQuestions);
      setAllQuestions(allQuestions);
      
      console.log('‚úÖ Background questions loaded:', allQuestions.length);
    } catch (err) {
      console.debug('Background questions loading failed:', err);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
  const updateQuestionsCount = (episodesList, questionsList) => {
    const counts = {};
    episodesList.forEach(ep => {
      counts[ep.slug] = counts[ep.slug] || {};
      ['ru', 'es', 'en', 'de', 'fr', 'pl'].forEach(lang => {
         const episodeQuestions = (questionsList || []).filter(q => 
           q.episode_slug === ep.slug && 
           q.lang === lang && 
           (q.is_intro || q.is_full_transcript || q.id === 'intro-virtual' || (q.title && q.title.trim() !== ''))
         );
         // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
         episodeQuestions.sort((a, b) => (a.time || 0) - (b.time || 0));
         counts[ep.slug][lang] = episodeQuestions.length;
      });
    });
    setEpisodeQuestionsCount(counts);
  };

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –ø–æ—Ç–æ–º –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const loadDataInstantly = useCallback(async () => {
    console.log('üöÄ Instant loading started - showing UI immediately');
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
      const cachedData = await cacheIntegration.loadEpisodesPageData(currentLanguage);
      
      if (cachedData && cachedData.episodes.length > 0) {
        console.log('üì¶ Using cached data instantly:', cachedData.episodes.length);
        await processEpisodesData(cachedData.episodes, true);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ–Ω–µ
        loadFreshDataInBackground();
        return;
      }

      // –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Ñ–æ–Ω–µ
      console.log('üîÑ No cache found, loading fresh data in background');
      loadFreshData();
      
    } catch (err) {
      console.error('‚ùå Error in instant loading:', err);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    }
  }, [currentLanguage, loadFreshData, loadFreshDataInBackground, processEpisodesData]);

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    if (!hasInitialized.current) {
      loadDataInstantly();
      hasInitialized.current = true;
    }

    const channel = supabase
      .channel('episodes-changes')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'episodes' }, () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
        loadFreshDataInBackground();
      })
      .on('postgres_changes', { event: '*', schema: 'public', table: 'questions' }, () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
        loadFreshDataInBackground();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [loadDataInstantly, loadFreshDataInBackground]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  useEffect(() => {
    if (selectedYear) {
      const months = new Set();
      episodes.forEach(ep => {
        if (ep.date && new Date(ep.date).getFullYear().toString() === selectedYear) {
          months.add(new Date(ep.date).getMonth());
        }
      });
      const sortedMonths = Array.from(months).sort((a,b) => a - b);
      setAvailableMonths(sortedMonths.map(m => ({ value: (m + 1).toString(), labelKey: monthLabels[m] })));
    } else {
      setAvailableMonths([]);
      setSelectedMonth(null);
    }
  }, [selectedYear, episodes, monthLabels]);
  
  const handleResetFilters = () => {
    setSelectedYear(null);
    setSelectedMonth(null);
  };

  const filteredEpisodes = useMemo(() => {
    let tempEpisodes = episodes;

    if (selectedYear) {
      tempEpisodes = tempEpisodes.filter(ep => ep.date && new Date(ep.date).getFullYear().toString() === selectedYear);
      if (selectedMonth) {
        tempEpisodes = tempEpisodes.filter(ep => ep.date && (new Date(ep.date).getMonth() + 1).toString() === selectedMonth);
      }
    }
    
    return tempEpisodes;
  }, [episodes, selectedYear, selectedMonth]);

  return (
    <div className="container mx-auto p-2 sm:p-4 max-w-2xl">
      <EpisodesPageHeader 
        currentLanguage={currentLanguage}
        onLanguageChange={onLanguageChange}
      />
      
      <FilterAndSearchControls
        years={availableYears}
        months={availableMonths}
        selectedYear={selectedYear}
        setSelectedYear={setSelectedYear}
        selectedMonth={selectedMonth}
        setSelectedMonth={setSelectedMonth}
        currentLanguage={currentLanguage}
        onResetFilters={handleResetFilters}
      />

      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
      {(loading || filteredEpisodes.length === 0) ? (
        <EmptyState currentLanguage={currentLanguage} isLoading={loading} />
      ) : (
        <EpisodesList 
          episodes={filteredEpisodes} 
          currentLanguage={currentLanguage} 
          episodeQuestionsCount={episodeQuestionsCount}
          allQuestions={allQuestions}
        />
      )}
    </div>
  );
};

export default InstantEpisodesPage;
