import { supabase } from '@/lib/supabaseClient';

class ConflictChecker {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
   * @param {Object} fileItem - –≠–ª–µ–º–µ–Ω—Ç —Ñ–∞–π–ª–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   * @returns {Promise<Object>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
   */
  async checkFileConflicts(fileItem) {
    const { episodeSlug, lang, r2ObjectKey } = fileItem;
    
    const conflicts = {
      hasFileConflict: false,
      hasDBConflict: false,
      fileConflict: null,
      dbConflict: null,
      overwriteOptions: {
        overwriteServerFile: false,
        overwriteEpisodeInfo: false,
        overwriteTranscript: false,
        overwriteQuestions: false
      }
    };

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
      if (r2ObjectKey) {
        const fileInfo = await this.checkFileExistsInStorage(r2ObjectKey);
        if (fileInfo.exists) {
          conflicts.hasFileConflict = true;
          conflicts.fileConflict = {
            type: 'file',
            message: `–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ ${fileInfo.source === 'database' ? '–ë–î' : 'Hostinger'}`,
            r2ObjectKey: r2ObjectKey,
            url: fileInfo.url,
            source: fileInfo.source,
            size: fileInfo.size
          };
        }
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      const dbConflicts = await this.checkDBConflicts(episodeSlug, lang);
      if (dbConflicts.hasConflicts) {
        conflicts.hasDBConflict = true;
        conflicts.dbConflict = dbConflicts;
      }

      return conflicts;
    } catch (error) {
      console.error('Error checking conflicts:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   * @param {string} r2ObjectKey - –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ R2
   * @returns {Promise<Object>} { exists: boolean, url: string, size: number }
   */
  async checkFileExistsInStorage(r2ObjectKey) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ø–∏–∑–æ–¥ –≤ –ë–î
      const { data: episodeData, error: episodeError } = await supabase
        .from('episodes')
        .select('r2_object_key, audio_url')
        .eq('r2_object_key', r2ObjectKey)
        .maybeSingle();

      if (episodeError) {
        console.warn('Error checking file existence in DB:', episodeError);
      }

      if (episodeData) {
        return {
          exists: true,
          url: episodeData.audio_url,
          source: 'database',
          size: null // –†–∞–∑–º–µ—Ä –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ë–î
        };
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ R2/Hostinger
      try {
        const r2Service = await import('@/lib/r2Service');
        const fileInfo = await r2Service.default.checkFileExists(r2ObjectKey);
        
        if (fileInfo.exists) {
          return {
            exists: true,
            url: fileInfo.url,
            source: 'hostinger',
            size: fileInfo.size
          };
        }
      } catch (r2Error) {
        console.warn('Error checking file in Hostinger:', r2Error);
      }

      return {
        exists: false,
        url: null,
        source: 'none',
        size: null
      };
    } catch (error) {
      console.error('Error checking file in storage:', error);
      return {
        exists: false,
        url: null,
        source: 'error',
        size: null
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
   * @param {string} episodeSlug - Slug —ç–ø–∏–∑–æ–¥–∞
   * @param {string} lang - –Ø–∑—ã–∫
   * @returns {Promise<Object>}
   */
  async checkDBConflicts(episodeSlug, lang) {
    const conflicts = {
      hasConflicts: false,
      episode: null,
      transcript: null,
      questions: null
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ø–∏–∑–æ–¥
      const { data: episode, error: episodeError } = await supabase
        .from('episodes')
        .select('*')
        .eq('slug', episodeSlug)
        .eq('lang', lang)
        .maybeSingle();

      if (episodeError) {
        console.warn('Error checking episode conflict:', episodeError);
        return conflicts;
      }

      if (episode) {
        conflicts.hasConflicts = true;
        conflicts.episode = {
          exists: true,
          title: episode.title,
          date: episode.date,
          audio_url: episode.audio_url
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        const { data: transcript, error: transcriptError } = await supabase
          .from('transcripts')
          .select('status, updated_at')
          .eq('episode_slug', episodeSlug)
          .eq('lang', lang)
          .maybeSingle();

        if (!transcriptError && transcript) {
          conflicts.transcript = {
            exists: true,
            status: transcript.status,
            updated_at: transcript.updated_at
          };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        const { data: questions, error: questionsError } = await supabase
          .from('questions')
          .select('id')
          .eq('episode_slug', episodeSlug)
          .eq('lang', lang);

        if (!questionsError && questions && questions.length > 0) {
          conflicts.questions = {
            exists: true,
            count: questions.length
          };
        }
      }

      return conflicts;
    } catch (error) {
      console.error('Error checking DB conflicts:', error);
      return conflicts;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} conflicts - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
   * @returns {string}
   */
  generateConflictMessage(conflicts) {
    const messages = [];

    if (conflicts.hasFileConflict) {
      messages.push('üìÅ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    }

    if (conflicts.hasDBConflict) {
      const db = conflicts.dbConflict;
      if (db.episode?.exists) {
        messages.push('üóÉÔ∏è –≠–ø–∏–∑–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î');
      }
      if (db.transcript?.exists) {
        messages.push('üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
      if (db.questions?.exists) {
        messages.push(`‚ùì –í–æ–ø—Ä–æ—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (${db.questions.count})`);
      }
    }

    return messages.length > 0 ? messages.join('\n') : null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–º–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
   * @param {Object} conflicts - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
   * @returns {Object}
   */
  getRecommendedOverwriteSettings(conflicts) {
    const settings = {
      overwriteServerFile: false,
      overwriteEpisodeInfo: false,
      overwriteTranscript: false,
      overwriteQuestions: false
    };

    if (conflicts.hasFileConflict) {
      settings.overwriteServerFile = true;
    }

    if (conflicts.hasDBConflict) {
      const db = conflicts.dbConflict;
      if (db.episode?.exists) {
        settings.overwriteEpisodeInfo = true;
      }
      if (db.transcript?.exists) {
        settings.overwriteTranscript = true;
      }
      if (db.questions?.exists) {
        settings.overwriteQuestions = true;
      }
    }

    return settings;
  }
}

export default new ConflictChecker();
