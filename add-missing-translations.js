#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const localesDir = path.join(__dirname, 'src/lib/locales');

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
const additionalEnglishTranslations = {
  // –ü–∞–∫–µ—Ç–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
  batchAddQuestions: "Import from Text",
  batchAddQuestionsShort: "Import",
  batchAddQuestionsDialogTitle: "Import Questions from Text",
  batchAddQuestionsDialogDescription: "Paste a list of questions in the text field below. Each question should start with a time mark (e.g., HH:MM:SS or MM:SS), followed by the question text. If the question is in two languages, separate them with ' / ' character.",
  pasteQuestionsList: "Paste questions list:",
  processAndAdd: "Process and Add",
  bilingualExamplePart1: "Example in two languages:",
  singleLanguageExample: "Example in one language:",
  batchAddPlaceholder: "00:30 What is meditation?\n01:15 How to start meditating?\n02:00 Benefits of daily practice",
  errorBatchAddingQuestions: "Error adding questions: {errorMessage}",

  // –î—Ä—É–≥–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  nowPlaying: "Now Playing",
  paused: "Paused",
  selectAnEpisode: "Select an Episode",
  backToEpisodes: "Back to Episodes",
  backToEpisodesShort: "Back",
  pageNotFoundTitle: "Page Not Found",
  pageNotFoundDescription: "The page you're looking for doesn't exist.",

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  uploadAudioFiles: "Upload Audio Files",
  uploadAudio: "Upload Audio",
  uploadAudioDescription: "Upload your meditation audio files to get started with transcription and question management.",
  dropFilesHere: "Drop files here",
  dragOrClickUpload: "Drag and drop or click to upload",
  supportedFormats: "Supported formats: MP3, WAV, M4A, FLAC",
  uploading: "Uploading...",
  uploadError: "Upload Error",
  errorUploadingFile: "Error uploading file: {errorMessage}",
  allFilesUploadedSuccessfully: "All files uploaded successfully",

  // –î—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  openInNewWindow: "Open in New Window",
  manage: "Manage",
  autoGenerateQuestions: "Auto-generate Questions",
  loadQuestionsFromDB: "Load Questions from DB",
  fileNotFound: "File Not Found",
  fileNotFoundInFolder: "File not found in folder",
  fileFoundAndAdded: "File found and added",
  fileWillBeUploaded: "File will be uploaded",
  fileUploadError: "File upload error",
  noFilesForEpisode: "No files for episode",
  spanishTranscriptInProgress: "Spanish transcript in progress",
  transcribeSpanishFirst: "Transcribe Spanish first",
  needSpanishFirst: "Need Spanish transcript first",
  translateTimingsToEnglish: "Translate Timings to English",
  createEnglishVersion: "Create English Version",
  fromSpanishTranscript: "From Spanish transcript",
  translateTranscriptFromRussian: "Translate Transcript from Russian",
  srtDownloaded: "SRT downloaded",
  textTranslated: "Text translated",

  // –û—à–∏–±–∫–∏ Hostinger
  errorUploadingToHostinger: "Error uploading to Hostinger",
  errorDeletingHostingerFile: "Error deleting Hostinger file",
  hostingerConnectionFailed: "Hostinger connection failed",
  hostingerUploadTimeout: "Hostinger upload timeout",

  // –ú–∏–≥—Ä–∞—Ü–∏—è
  migrationStarted: "Migration started",
  migrationComplete: "Migration complete",
  migrationError: "Migration error",
  filesSelectedForMigration: "Files selected for migration",
  storageProvider: "Storage Provider",

  // –ù–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
  languageRussian: "Russian",
};

console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª
const enPath = path.join(localesDir, 'en.json');
const enContent = JSON.parse(fs.readFileSync(enPath, 'utf8'));

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
let addedCount = 0;
Object.keys(additionalEnglishTranslations).forEach(key => {
  if (!enContent[key] || /[\u0400-\u04FF]/.test(enContent[key])) {
    enContent[key] = additionalEnglishTranslations[key];
    addedCount++;
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è: ${key}`);
  }
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª
fs.writeFileSync(enPath, JSON.stringify(enContent, null, 2) + '\n');
console.log(`\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);

console.log('\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤...\n');

// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–∏
const languagesToFix = ['es', 'de', 'fr', 'pl'];
let totalFixed = 0;

languagesToFix.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  let fixedCount = 0;

  // –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  Object.keys(additionalEnglishTranslations).forEach(key => {
    if (content[key] && /[\u0400-\u04FF]/.test(content[key])) {
      content[key] = enContent[key];
      fixedCount++;
    }
  });

  fs.writeFileSync(filePath, JSON.stringify(content, null, 2) + '\n');
  console.log(`‚úÖ ${lang.toUpperCase()}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixedCount} —Å—Ç—Ä–æ–∫`);
  totalFixed += fixedCount;
});

console.log(`\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${totalFixed} —Å—Ç—Ä–æ–∫ –≤ ${languagesToFix.length} —è–∑—ã–∫–∞—Ö.`);

console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
let remainingIssues = 0;
languagesToFix.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  const issues = Object.values(content).filter(value =>
    typeof value === 'string' && /[\u0400-\u04FF]/.test(value) && value !== '–†—É—Å—Å–∫–∏–π'
  ).length;

  remainingIssues += issues;

  if (issues === 0) {
    console.log(`‚úÖ ${lang.toUpperCase()}: –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤`);
  } else {
    console.log(`‚ö†Ô∏è ${lang.toUpperCase()}: –Ω–∞–π–¥–µ–Ω–æ ${issues} —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤`);
  }
});

if (remainingIssues === 0) {
  console.log('\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô –ò–°–ü–†–ê–í–õ–ï–ù–´!');
} else {
  console.log(`\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${remainingIssues} –ø—Ä–æ–±–ª–µ–º —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π`);
}
