[{"filePath":"/workspace/api/ia-upload.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/api/s3-presign.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/App.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Router' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'Routes' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'Route' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":48},{"ruleId":"no-unused-vars","severity":1,"message":"'Navigate' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":64},{"ruleId":"no-unused-vars","severity":1,"message":"'Toaster' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'LanguageSwitcher' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'LanguageSelectionModal' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'TelegramProvider' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'EpisodesPage' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerPage' is defined but never used. Allowed unused vars must match /^React$/u.","line":10,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'ManagePage' is defined but never used. Allowed unused vars must match /^React$/u.","line":11,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'NotFoundPage' is defined but never used. Allowed unused vars must match /^React$/u.","line":12,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'DeepSearchPage' is defined but never used. Allowed unused vars must match /^React$/u.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'FooterContent' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":18,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate, Link, useNavigate } from 'react-router-dom';\nimport { Toaster } from '@/components/ui/toaster';\nimport LanguageSwitcher from '@/components/LanguageSwitcher';\nimport LanguageSelectionModal from '@/components/LanguageSelectionModal';\nimport { TelegramProvider } from '@/contexts/TelegramContext';\nimport { getLocaleString } from '@/lib/locales';\nimport EpisodesPage from '@/pages/EpisodesPage';\nimport PlayerPage from '@/pages/PlayerPage';\nimport ManagePage from '@/pages/ManagePage'; \nimport NotFoundPage from '@/pages/NotFoundPage';\nimport DeepSearchPage from '@/pages/DeepSearchPage';\nimport { supabase } from '@/lib/supabaseClient';\nimport { TooltipProvider } from '@/components/ui/tooltip';\n\n\nconst FooterContent = ({ currentLanguage, onLanguageSelect }) => {\n  const navigate = useNavigate();\n\n  const handleLanguageSwitchInPlayer = async (newLang) => {\n    const pathParts = window.location.pathname.split('/');\n    if (pathParts.length === 3 && pathParts[1] === 'episode') {\n      const currentSlug = pathParts[2];\n      \n      const { data: currentEpisode, error: currentEpError } = await supabase\n        .from('episodes')\n        .select('date, lang, slug')\n        .eq('slug', currentSlug)\n        .single();\n\n      if (currentEpError || !currentEpisode) {\n        console.error(\"Error fetching current episode details for lang switch:\", currentEpError);\n        onLanguageSelect(newLang); \n        return;\n      }\n      \n      const datePartFromSlug = currentEpisode.slug.substring(0, currentEpisode.slug.lastIndexOf('_'));\n      const targetSlugPart = `${datePartFromSlug}_${newLang}`;\n      \n      const { data: targetEpisode, error: targetEpError } = await supabase\n        .from('episodes')\n        .select('slug')\n        .eq('date', currentEpisode.date) \n        .eq('lang', newLang) \n        .eq('slug', targetSlugPart)\n        .single();\n\n      if (!targetEpError && targetEpisode) {\n        onLanguageSelect(newLang);\n        navigate(`/episode/${targetEpisode.slug}${window.location.hash}`);\n      } else {\n         const { data: anyEpisodeSameDate, error: anyEpError } = await supabase\n            .from('episodes')\n            .select('slug')\n            .eq('date', currentEpisode.date)\n            .eq('lang', newLang)\n            .limit(1)\n            .single();\n        \n        if(!anyEpError && anyEpisodeSameDate){\n            onLanguageSelect(newLang);\n            navigate(`/episode/${anyEpisodeSameDate.slug}${window.location.hash}`);\n        } else {\n            console.warn(\"No equivalent episode found for the new language with the same date. Defaulting to language switch only.\");\n            onLanguageSelect(newLang);\n        }\n      }\n    } else {\n      onLanguageSelect(newLang);\n    }\n  };\n  \n  return (\n    <footer className=\"py-3 sm:py-4 text-center text-xs sm:text-sm text-white/60 flex flex-col items-center gap-2\">\n      <div className=\"flex gap-2 items-center\">\n        {currentLanguage && <LanguageSwitcher currentLanguage={currentLanguage} onLanguageChange={handleLanguageSwitchInPlayer} />}\n      </div>\n    </footer>\n  );\n}\n\n\nfunction App() {\n  const [currentLanguage, setCurrentLanguage] = useState(localStorage.getItem('podcastLang') || null);\n  const [showLangModal, setShowLangModal] = useState(!currentLanguage);\n  const [authLoading, setAuthLoading] = useState(true);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const checkUser = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      const currentUser = session?.user ?? null;\n      setUser(currentUser);\n      setAuthLoading(false);\n    };\n\n    checkUser();\n\n    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {\n      const currentUser = session?.user ?? null;\n      setUser(currentUser);\n    });\n\n    if (currentLanguage) {\n      localStorage.setItem('podcastLang', currentLanguage);\n      setShowLangModal(false);\n    } else {\n      setShowLangModal(true);\n    }\n    \n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, [currentLanguage]);\n\n  const handleLanguageSelect = useCallback((lang) => {\n    setCurrentLanguage(lang);\n    localStorage.setItem('podcastLang', lang);\n    setShowLangModal(false);\n  }, []);\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white flex items-center justify-center\">\n        <p>{getLocaleString('loading', currentLanguage || 'ru')}</p>\n      </div>\n    );\n  }\n\n  if (showLangModal) {\n    return (\n      <TelegramProvider>\n         <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white flex flex-col\">\n            <LanguageSelectionModal onLanguageSelect={handleLanguageSelect} currentLanguage={currentLanguage || 'ru'} />\n            <Toaster />\n          </div>\n      </TelegramProvider>\n    );\n  }\n\n  return (\n    <TelegramProvider>\n      <TooltipProvider>\n        <Router>\n          <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white flex flex-col\">\n            <main className=\"flex-grow w-full\">\n              <Routes>\n                <Route path=\"/\" element={<Navigate to=\"/episodes\" replace />} />\n                <Route path=\"/episodes\" element={<EpisodesPage currentLanguage={currentLanguage} />} />\n                <Route path=\"/episode/:episodeSlug\" element={<PlayerPage currentLanguage={currentLanguage} user={user} />} />\n                <Route path=\"/manage\" element={<ManagePage currentLanguage={currentLanguage} />} />\n                <Route path=\"/deep-search\" element={<DeepSearchPage currentLanguage={currentLanguage} />} />\n                <Route path=\"*\" element={<NotFoundPage currentLanguage={currentLanguage} />} />\n              </Routes>\n            </main>\n            \n            <FooterContent \n              currentLanguage={currentLanguage} \n              onLanguageSelect={handleLanguageSelect}\n            />\n            \n            <Toaster />\n          </div>\n        </Router>\n      </TooltipProvider>\n    </TelegramProvider>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/AudioCacheManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Download' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'HardDrive' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'Wifi' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'WifiOff' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":65},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":78},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Progress' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Download, Trash2, HardDrive, Wifi, WifiOff, CheckCircle, AlertCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { getLocaleString } from '@/lib/locales';\nimport audioCacheService from '@/lib/audioCacheService';\n\nconst AudioCacheManager = ({ \n  currentLanguage = 'ru', \n  episodeData = null,\n  showInline = false,\n  className = \"\"\n}) => {\n  const [cacheStats, setCacheStats] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [downloadProgress, setDownloadProgress] = useState({});\n  const [isCached, setIsCached] = useState(false);\n  const [isDownloading, setIsDownloading] = useState(false);\n\n  useEffect(() => {\n    loadCacheStats();\n    \n    if (episodeData?.audio_url) {\n      checkIfCached();\n    }\n\n    // Подписываемся на события загрузки\n    const unsubscribeDownload = audioCacheService.onDownloadProgress((event, data) => {\n      if (episodeData && data.episodeSlug === episodeData.slug) {\n        switch (event) {\n          case 'download_start':\n            setIsDownloading(true);\n            setDownloadProgress({ progress: 0, loaded: 0, total: 0 });\n            break;\n          case 'download_progress':\n            setDownloadProgress({\n              progress: data.progress,\n              loaded: data.loaded,\n              total: data.total\n            });\n            break;\n          case 'download_complete':\n            setIsDownloading(false);\n            setIsCached(true);\n            setDownloadProgress({});\n            loadCacheStats(); // Обновляем статистику\n            break;\n          case 'download_error':\n            setIsDownloading(false);\n            setDownloadProgress({});\n            break;\n        }\n      }\n    });\n\n    return () => {\n      unsubscribeDownload();\n    };\n  }, [episodeData]);\n\n  const loadCacheStats = async () => {\n    try {\n      const stats = await audioCacheService.getCacheStats();\n      setCacheStats(stats);\n    } catch (error) {\n      console.error('Error loading cache stats:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const checkIfCached = async () => {\n    if (!episodeData?.audio_url) return;\n    \n    try {\n      const cached = await audioCacheService.isAudioCached(episodeData.audio_url);\n      setIsCached(cached);\n    } catch (error) {\n      console.error('Error checking cache status:', error);\n    }\n  };\n\n  const handleDownloadEpisode = async () => {\n    if (!episodeData?.audio_url || isDownloading) return;\n\n    try {\n      await audioCacheService.cacheAudio(episodeData.audio_url, episodeData.slug);\n    } catch (error) {\n      console.error('Error downloading episode:', error);\n    }\n  };\n\n  const handleRemoveEpisode = async () => {\n    if (!episodeData?.audio_url) return;\n\n    try {\n      await audioCacheService.removeAudioFromCache(episodeData.audio_url);\n      setIsCached(false);\n      loadCacheStats();\n    } catch (error) {\n      console.error('Error removing episode from cache:', error);\n    }\n  };\n\n  const handleClearCache = async () => {\n    try {\n      await audioCacheService.clearCache();\n      setIsCached(false);\n      loadCacheStats();\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n    }\n  };\n\n  const formatBytes = (bytes) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Встроенный режим для отдельного эпизода\n  if (showInline && episodeData) {\n    return (\n      <div className={`flex items-center gap-2 ${className}`}>\n        {isDownloading ? (\n          <div className=\"flex items-center gap-2\">\n            <Download className=\"h-4 w-4 text-blue-500 animate-pulse\" />\n            <div className=\"flex flex-col gap-1 min-w-[100px]\">\n              <div className=\"text-xs text-slate-400\">\n                {downloadProgress.progress || 0}%\n              </div>\n              <Progress \n                value={downloadProgress.progress || 0} \n                className=\"h-1\"\n              />\n            </div>\n          </div>\n        ) : isCached ? (\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            <span className=\"text-xs text-green-400\">\n              {getLocaleString('cached', currentLanguage) || 'Кешировано'}\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleRemoveEpisode}\n              className=\"h-6 w-6 p-0 text-red-400 hover:text-red-300\"\n            >\n              <Trash2 className=\"h-3 w-3\" />\n            </Button>\n          </div>\n        ) : (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleDownloadEpisode}\n            className=\"flex items-center gap-1 h-6 px-2 text-blue-400 hover:text-blue-300\"\n          >\n            <Download className=\"h-3 w-3\" />\n            <span className=\"text-xs\">\n              {getLocaleString('cache', currentLanguage) || 'Кешировать'}\n            </span>\n          </Button>\n        )}\n      </div>\n    );\n  }\n\n  // Полный режим управления кешем\n  if (isLoading) {\n    return (\n      <div className={`p-4 bg-slate-800 rounded-lg ${className}`}>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-slate-700 rounded w-1/3 mb-2\"></div>\n          <div className=\"h-2 bg-slate-700 rounded w-full mb-4\"></div>\n          <div className=\"h-8 bg-slate-700 rounded w-1/4\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`p-4 bg-slate-800 rounded-lg space-y-4 ${className}`}>\n      {/* Заголовок */}\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-medium text-white flex items-center gap-2\">\n          <HardDrive className=\"h-5 w-5\" />\n          {getLocaleString('audioCache', currentLanguage) || 'Кеш аудио'}\n        </h3>\n        <div className=\"flex items-center gap-2\">\n          {navigator.onLine ? (\n            <Wifi className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <WifiOff className=\"h-4 w-4 text-red-500\" />\n          )}\n        </div>\n      </div>\n\n      {/* Статистика использования */}\n      {cacheStats && (\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-slate-400\">\n              {getLocaleString('cacheUsage', currentLanguage) || 'Использование кеша'}\n            </span>\n            <span className=\"text-white\">\n              {formatBytes(cacheStats.totalSize)} / {formatBytes(cacheStats.maxSize)}\n            </span>\n          </div>\n          \n          <Progress \n            value={cacheStats.usagePercentage} \n            className=\"h-2\"\n          />\n          \n          <div className=\"flex justify-between text-xs text-slate-500\">\n            <span>\n              {cacheStats.fileCount} {getLocaleString('files', currentLanguage) || 'файлов'}\n            </span>\n            <span>\n              {cacheStats.usagePercentage}% {getLocaleString('used', currentLanguage) || 'использовано'}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Действия для текущего эпизода */}\n      {episodeData && (\n        <div className=\"border-t border-slate-700 pt-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <div className=\"text-sm font-medium text-white\">\n                {episodeData.title}\n              </div>\n              <div className=\"text-xs text-slate-400\">\n                {getLocaleString('currentEpisode', currentLanguage) || 'Текущий эпизод'}\n              </div>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              {isCached ? (\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n              ) : (\n                <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\n              )}\n            </div>\n          </div>\n\n          {isDownloading ? (\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-slate-400\">\n                  {getLocaleString('downloading', currentLanguage) || 'Загрузка...'}\n                </span>\n                <span className=\"text-blue-400\">\n                  {downloadProgress.progress || 0}%\n                </span>\n              </div>\n              <Progress \n                value={downloadProgress.progress || 0} \n                className=\"h-2\"\n              />\n              {downloadProgress.total > 0 && (\n                <div className=\"text-xs text-slate-500 text-center\">\n                  {formatBytes(downloadProgress.loaded)} / {formatBytes(downloadProgress.total)}\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"flex gap-2\">\n              {isCached ? (\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={handleRemoveEpisode}\n                  className=\"flex-1\"\n                >\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  {getLocaleString('removeFromCache', currentLanguage) || 'Удалить из кеша'}\n                </Button>\n              ) : (\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  onClick={handleDownloadEpisode}\n                  className=\"flex-1\"\n                  disabled={!navigator.onLine}\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  {getLocaleString('cacheForOffline', currentLanguage) || 'Кешировать для офлайн'}\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Управление кешем */}\n      <div className=\"border-t border-slate-700 pt-4\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <div className=\"text-sm font-medium text-white\">\n              {getLocaleString('cacheManagement', currentLanguage) || 'Управление кешем'}\n            </div>\n            <div className=\"text-xs text-slate-400\">\n              {getLocaleString('manageStoredAudio', currentLanguage) || 'Управление сохраненными аудиофайлами'}\n            </div>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleClearCache}\n            disabled={!cacheStats || cacheStats.fileCount === 0}\n            className=\"text-red-400 border-red-400/30 hover:bg-red-400/10\"\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            {getLocaleString('clearAll', currentLanguage) || 'Очистить все'}\n          </Button>\n        </div>\n      </div>\n\n      {/* Список кешированных файлов */}\n      {cacheStats && cacheStats.files.length > 0 && (\n        <div className=\"border-t border-slate-700 pt-4\">\n          <div className=\"text-sm font-medium text-white mb-3\">\n            {getLocaleString('cachedFiles', currentLanguage) || 'Кешированные файлы'}\n          </div>\n          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n            {cacheStats.files.map((file, index) => (\n              <div key={index} className=\"flex items-center justify-between text-xs p-2 bg-slate-700/50 rounded\">\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-white truncate\">\n                    {file.episodeSlug}\n                  </div>\n                  <div className=\"text-slate-400\">\n                    {formatBytes(file.size)}\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => audioCacheService.removeAudioFromCache(file.url)}\n                  className=\"h-6 w-6 p-0 text-red-400 hover:text-red-300\"\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AudioCacheManager;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/AudioUploader.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":77},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'Progress' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'UploadCloud' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'FileAudio' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { supabase } from '@/lib/supabaseClient';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Progress } from '@/components/ui/progress'; \nimport { UploadCloud, FileAudio, X, Loader2, CheckCircle } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { getLocaleString } from '@/lib/locales';\nimport r2Service from '@/lib/r2Service'; \nimport assemblyAIService from '@/lib/assemblyAIService';\nimport { getFileNameWithoutExtension } from '@/lib/utils';\n\nconst AudioUploader = ({ isOpen, onClose, onUploadSuccess, currentLanguage }) => {\n  const [files, setFiles] = useState([]);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadProgressDetails, setUploadProgressDetails] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadError, setUploadError] = useState(null);\n  const [uploadComplete, setUploadComplete] = useState(false);\n  const { toast } = useToast();\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(prevFiles => [...prevFiles, ...acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    }))]);\n    setUploadError(null);\n    setUploadComplete(false);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { 'audio/*': ['.mp3', '.wav', '.m4a', '.aac', '.ogg', '.flac'] },\n    multiple: true\n  });\n\n  const removeFile = (fileToRemove) => {\n    setFiles(files.filter(file => file !== fileToRemove));\n  };\n\n  const generateEpisodeSlug = (dateStr, lang) => {\n    if (!dateStr) dateStr = new Date().toISOString().split('T')[0]; // Fallback to current date\n    return `${dateStr}_${lang}`;\n  };\n\n  const extractDetailsFromFilename = (filename) => {\n    const nameWithoutExt = getFileNameWithoutExtension(filename);\n    let title = nameWithoutExt;\n    let lang = 'all';\n    let parsedDate = null; // YYYY-MM-DD\n\n    const dateMatch = nameWithoutExt.match(/(\\d{4})\\.(\\d{2})\\.(\\d{2})/);\n    if (dateMatch) {\n      parsedDate = `${dateMatch[1]}-${dateMatch[2]}-${dateMatch[3]}`;\n      title = title.replace(dateMatch[0], '').trim().replace(/^[-_]+|[-_]+$/g, '');\n    } else {\n      // Try to parse if filename itself is a date like YYYY-MM-DD\n      const strictDateMatch = nameWithoutExt.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n      if (strictDateMatch) {\n        parsedDate = `${strictDateMatch[1]}-${strictDateMatch[2]}-${strictDateMatch[3]}`;\n        title = ''; // No specific title part if filename is just date\n      }\n    }\n    \n    const langSuffixMatch = title.match(/_([RUruESes]{2})$/);\n    if (langSuffixMatch) {\n        lang = langSuffixMatch[1].toLowerCase();\n        title = title.substring(0, title.lastIndexOf(langSuffixMatch[0])).trim().replace(/^[-_]+|[-_]+$/g, '');\n    }\n    \n    title = title || (parsedDate ? `Meditación ${parsedDate}` : nameWithoutExt);\n\n    return { title, lang, parsedDate };\n  };\n\n\n  const handleUpload = async () => {\n    if (files.length === 0) return;\n\n    setIsUploading(true);\n    setUploadProgress(0);\n    setUploadProgressDetails(null);\n    setUploadError(null);\n    setUploadComplete(false);\n\n    for (const file of files) {\n      try {\n        const { fileUrl: workerFileUrl, fileKey, bucketName } = await r2Service.uploadFile(\n          file, \n          (progress, details) => {\n            setUploadProgress(progress);\n            setUploadProgressDetails(details);\n            if (details?.message) {\n              console.log(`[Upload UI] ${file.name}: ${progress}% — ${details.message} (${details?.uploadedMB || '0.00'} / ${details?.totalMB || '0.00'} MB)`);\n            }\n          },\n          currentLanguage\n        );\n        toast({ title: getLocaleString('uploadToR2Success', currentLanguage), description: `${file.name} (Archive.org: ${bucketName})` });\n\n        const audioForDuration = new Audio(URL.createObjectURL(file));\n        let duration = 0;\n        try {\n            duration = await new Promise((resolve) => {\n                audioForDuration.onloadedmetadata = () => resolve(audioForDuration.duration);\n                audioForDuration.onerror = () => resolve(0); \n            });\n        } catch (e) { console.error(\"Error getting duration\",e); duration = 0; }\n\n        const { title: episodeTitle, lang: fileLang, parsedDate: episodeDate } = extractDetailsFromFilename(file.name);\n        const episodeSlug = generateEpisodeSlug(episodeDate || new Date().toISOString().split('T')[0], fileLang);\n        \n        const { data: episodeData, error: dbError } = await supabase\n          .from('episodes')\n          .insert([\n            { \n              slug: episodeSlug,\n              title: episodeTitle, \n              lang: fileLang,\n              date: episodeDate || new Date().toISOString().split('T')[0],\n              audio_url: workerFileUrl, \n              r2_object_key: fileKey,\n              r2_bucket_name: bucketName,\n              duration: Math.round(duration || 0),\n            }\n          ])\n          .select('slug')\n          .maybeSingle();\n\n        if (dbError) {\n            if (dbError.code === '23505') { // Unique violation for slug\n                toast({ title: getLocaleString('errorGeneric', currentLanguage), description: `Эпизод с slug ${episodeSlug} уже существует.`, variant: 'destructive'});\n            } else {\n                throw new Error(`Supabase error: ${dbError.message}`);\n            }\n            setIsUploading(false);\n            return;\n        }\n        toast({ title: getLocaleString('metadataSavedSuccess', currentLanguage), description: file.name });\n        \n        if (episodeData && episodeData.slug) {\n          let assemblyLangCode;\n          let transcriptLangForDb;\n\n          if (fileLang === 'all') {\n            assemblyLangCode = currentLanguage === 'ru' ? 'ru' : 'es'; \n            transcriptLangForDb = currentLanguage;\n          } else {\n            assemblyLangCode = fileLang;\n            transcriptLangForDb = fileLang;\n          }\n          \n          const transcriptJob = await assemblyAIService.submitTranscription(\n            workerFileUrl, \n            assemblyLangCode, \n            episodeData.slug, // Pass episode slug to webhook\n            currentLanguage \n          );\n          \n          const { error: transcriptDbError } = await supabase\n            .from('transcripts')\n            .insert([{\n              episode_slug: episodeData.slug,\n              lang: transcriptLangForDb, \n              assemblyai_transcript_id: transcriptJob.id,\n              status: transcriptJob.status,\n            }]);\n\n          if (transcriptDbError) console.error(\"Error saving initial transcript job to DB:\", transcriptDbError);\n          \n          toast({ title: getLocaleString('transcriptionStarted', currentLanguage), description: `${file.name} (${assemblyLangCode})` });\n        }\n        \n      } catch (error) {\n        console.error('Upload process error for file', file.name, ':', error);\n        setUploadError(`${getLocaleString('errorUploadingFile', currentLanguage, {fileName: file.name})}: ${error.message}`);\n        toast({ title: getLocaleString('uploadError', currentLanguage), description: error.message, variant: 'destructive'});\n        setIsUploading(false); \n        return; \n      }\n    }\n    \n    setUploadComplete(true);\n    setIsUploading(false);\n    setFiles([]); \n    if (onUploadSuccess) onUploadSuccess();\n  };\n\n  const handleClose = () => {\n    if (isUploading) return; \n    setFiles([]);\n    setUploadProgress(0);\n    setUploadProgressDetails(null);\n    setUploadError(null);\n    setUploadComplete(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-lg bg-slate-800 border-slate-700 text-white\">\n        <DialogHeader>\n          <DialogTitle className=\"text-purple-300\">{getLocaleString('uploadAudioFiles', currentLanguage)}</DialogTitle>\n          <DialogDescription className=\"text-slate-400\">\n            {getLocaleString('uploadAudioDescription', currentLanguage)}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div {...getRootProps()} className={`mt-4 p-8 border-2 border-dashed rounded-lg text-center cursor-pointer\n          ${isDragActive ? 'border-purple-500 bg-purple-500/10' : 'border-slate-600 hover:border-slate-500'}`}>\n          <input {...getInputProps()} />\n          <UploadCloud className=\"mx-auto h-12 w-12 text-slate-500 mb-2\" />\n          {isDragActive ? (\n            <p className=\"text-purple-400\">{getLocaleString('dropFilesHere', currentLanguage)}</p>\n          ) : (\n            <p className=\"text-slate-400\">{getLocaleString('dragOrClickUpload', currentLanguage)}</p>\n          )}\n          <p className=\"text-xs text-slate-500 mt-1\">{getLocaleString('supportedFormats', currentLanguage)}: MP3, WAV, M4A, etc.</p>\n        </div>\n\n        {files.length > 0 && (\n          <div className=\"mt-4 max-h-40 overflow-y-auto space-y-2 pr-2\">\n            {files.map((file, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 bg-slate-700 rounded\">\n                <div className=\"flex items-center gap-2\">\n                  <FileAudio className=\"h-5 w-5 text-purple-400\" />\n                  <span className=\"text-sm truncate\" title={file.name}>{file.name}</span>\n                </div>\n                {!isUploading && (\n                  <Button variant=\"ghost\" size=\"icon_sm\" onClick={() => removeFile(file)} className=\"text-red-400 hover:text-red-300\">\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n\n        {isUploading && (\n          <div className=\"mt-4\">\n            <Progress value={uploadProgress} className=\"w-full [&>div]:bg-purple-500\" />\n            <div className=\"text-sm text-center mt-2 text-purple-300\">\n              {uploadProgressDetails?.message || getLocaleString('uploading', currentLanguage)} {uploadProgress}%\n              {uploadProgressDetails && (\n                <div className=\"text-xs text-purple-200 mt-1\">\n                  {uploadProgressDetails.uploadedMB} / {uploadProgressDetails.totalMB} MB\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {uploadError && (\n          <p className=\"mt-4 text-sm text-red-400 text-center\">{uploadError}</p>\n        )}\n        \n        {uploadComplete && !uploadError && (\n           <div className=\"mt-4 text-center text-green-400 flex items-center justify-center\">\n             <CheckCircle className=\"h-5 w-5 mr-2\"/>\n             <p>{getLocaleString('allFilesUploadedSuccessfully', currentLanguage)}</p>\n           </div>\n        )}\n\n        <DialogFooter className=\"mt-6\">\n          <Button variant=\"outline\" onClick={handleClose} disabled={isUploading} className=\"border-slate-600 hover:bg-slate-700\">\n            {getLocaleString('close', currentLanguage)}\n          </Button>\n          <Button onClick={handleUpload} disabled={isUploading || files.length === 0} className=\"bg-purple-600 hover:bg-purple-700\">\n            {isUploading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                {getLocaleString('uploadingInProgress', currentLanguage)}\n              </>\n            ) : (\n              getLocaleString('startUpload', currentLanguage)\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AudioUploader;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/Header.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'OfflineIndicator' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport OfflineIndicator from './OfflineIndicator';\n\nconst Header = ({ podcastData, currentLanguage = 'ru' }) => {\n  return (\n    <div className=\"flex items-center justify-between p-4 bg-slate-900 border-b border-slate-800\">\n      <div className=\"flex items-center gap-3\">\n        {podcastData?.image && (\n          <img \n            src={podcastData.image} \n            alt={podcastData.title}\n            className=\"w-10 h-10 rounded-lg object-cover\"\n          />\n        )}\n        <div>\n          <h1 className=\"text-lg font-semibold text-white\">\n            {podcastData?.title || 'Dos Mundos Podcast'}\n          </h1>\n          {podcastData?.author && (\n            <p className=\"text-sm text-slate-400\">\n              {podcastData.author}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      <OfflineIndicator currentLanguage={currentLanguage} />\n    </div>\n  ); \n};\n\nexport default Header;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/LanguageSelectionModal.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Languages' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Languages } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst LanguageSelectionModal = ({ onLanguageSelect, currentLanguage }) => {\n  const availableLanguages = [\n    { code: 'ru', name: \"Русский\", flag: '🇷🇺' },\n    { code: 'es', name: \"Español\", flag: '🇪🇸' },\n    { code: 'en', name: \"English\", flag: '🇺🇸' },\n  ];\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center p-4 z-50 animate-fade-in\">\n      <div className=\"bg-slate-800 p-6 sm:p-8 rounded-xl shadow-2xl border border-slate-700 max-w-md w-full text-center animate-scale-in\">\n        <div className=\"flex justify-center mb-4\">\n          <Languages className=\"h-12 w-12 text-purple-400\" />\n        </div>\n        <h2 className=\"text-xl sm:text-2xl font-bold text-white mb-3\">{getLocaleString('selectLanguageModalTitle', currentLanguage)}</h2>\n        <p className=\"text-slate-400 text-sm mb-6\">\n          {getLocaleString('selectLanguageModalDescription', currentLanguage)}\n        </p>\n        <div className=\"flex flex-col gap-3 sm:gap-4\">\n          {availableLanguages.map(lang => (\n            <Button\n              key={lang.code}\n              onClick={() => onLanguageSelect(lang.code)}\n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white text-base py-3\"\n              size=\"lg\"\n            >\n              {lang.flag} {lang.name}\n            </Button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LanguageSelectionModal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/LanguageSwitcher.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\n\nconst LanguageSwitcher = ({ currentLanguage, onLanguageChange }) => {\n  const languages = [\n    { code: 'ru', name: \"Русский\", flag: '🇷🇺' },\n    { code: 'es', name: \"Español\", flag: '🇪🇸' },\n    { code: 'en', name: \"English\", flag: '🇺🇸' },\n  ];\n\n  return (\n    <div className=\"flex gap-2\">\n      {languages.map((lang) => (\n        <Button\n          key={lang.code}\n          variant={currentLanguage === lang.code ? 'default' : 'outline'}\n          size=\"sm\"\n          onClick={() => onLanguageChange(lang.code)}\n          className={`transition-all rounded-md px-3 sm:px-4 py-2 text-sm font-medium\n                      ${currentLanguage === lang.code \n                        ? 'bg-purple-600 hover:bg-purple-700 text-white border-transparent' \n                        : 'text-white/70 border-white/30 hover:bg-white/10 hover:text-white bg-transparent'}`}\n        >\n          {lang.flag} <span className=\"hidden sm:inline ml-1.5\">{lang.name}</span>\n        </Button>\n      ))}\n    </div>\n  );\n};\n\nexport default LanguageSwitcher;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/OfflineIndicator.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Wifi' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'WifiOff' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'Download' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'Sync' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":65},{"ruleId":"no-unused-vars","severity":1,"message":"'Clock' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Wifi, WifiOff, Download, Sync, AlertCircle, CheckCircle, Clock } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport syncService from '@/lib/syncService';\nimport audioCacheService from '@/lib/audioCacheService';\n\nconst OfflineIndicator = ({ currentLanguage = 'ru' }) => {\n  const [networkStatus, setNetworkStatus] = useState(syncService.getNetworkStatus());\n  const [syncStatus, setSyncStatus] = useState({\n    isActive: false,\n    lastSync: null,\n    pendingChanges: 0,\n    error: null\n  });\n  const [downloadStatus, setDownloadStatus] = useState({\n    isActive: false,\n    progress: 0,\n    currentFile: null\n  });\n\n  useEffect(() => {\n    // Подписываемся на изменения сетевого состояния\n    const unsubscribeNetwork = syncService.onNetworkChange((isOnline) => {\n      setNetworkStatus(prev => ({ ...prev, isOnline }));\n    });\n\n    // Подписываемся на события синхронизации\n    const unsubscribeSync = syncService.onSyncChange((event, data) => {\n      switch (event) {\n        case 'sync_start':\n          setSyncStatus(prev => ({ ...prev, isActive: true, error: null }));\n          break;\n        case 'sync_complete':\n          setSyncStatus(prev => ({\n            ...prev,\n            isActive: false,\n            lastSync: Date.now(),\n            pendingChanges: Math.max(0, prev.pendingChanges - data.successCount),\n            error: data.errorCount > 0 ? `${data.errorCount} errors` : null\n          }));\n          break;\n        case 'sync_error':\n          setSyncStatus(prev => ({\n            ...prev,\n            isActive: false,\n            error: data.error\n          }));\n          break;\n        case 'sync_item_success':\n          setSyncStatus(prev => ({\n            ...prev,\n            pendingChanges: Math.max(0, prev.pendingChanges - 1)\n          }));\n          break;\n      }\n    });\n\n    // Подписываемся на события загрузки аудио\n    const unsubscribeDownload = audioCacheService.onDownloadProgress((event, data) => {\n      switch (event) {\n        case 'download_start':\n          setDownloadStatus({\n            isActive: true,\n            progress: 0,\n            currentFile: data.episodeSlug\n          });\n          break;\n        case 'download_progress':\n          setDownloadStatus(prev => ({\n            ...prev,\n            progress: data.progress,\n            currentFile: data.episodeSlug\n          }));\n          break;\n        case 'download_complete':\n        case 'download_error':\n          setDownloadStatus({\n            isActive: false,\n            progress: 0,\n            currentFile: null\n          });\n          break;\n      }\n    });\n\n    // Проверяем количество ожидающих синхронизации элементов\n    const checkPendingChanges = async () => {\n      try {\n        const queue = await syncService.syncOfflineChanges ? [] : []; // Заглушка\n        setSyncStatus(prev => ({ ...prev, pendingChanges: queue.length }));\n      } catch (error) {\n        console.error('Error checking pending changes:', error);\n      }\n    };\n\n    checkPendingChanges();\n    const pendingInterval = setInterval(checkPendingChanges, 30000); // Проверяем каждые 30 секунд\n\n    return () => {\n      unsubscribeNetwork();\n      unsubscribeSync();\n      unsubscribeDownload();\n      clearInterval(pendingInterval);\n    };\n  }, []);\n\n  const getNetworkIcon = () => {\n    if (networkStatus.isOnline) {\n      return <Wifi className=\"h-4 w-4 text-green-500\" />;\n    } else {\n      return <WifiOff className=\"h-4 w-4 text-red-500\" />;\n    }\n  };\n\n  const getSyncIcon = () => {\n    if (syncStatus.isActive) {\n      return <Sync className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n    } else if (syncStatus.error) {\n      return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n    } else if (syncStatus.pendingChanges > 0) {\n      return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n    } else {\n      return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n    }\n  };\n\n  const getStatusText = () => {\n    if (!networkStatus.isOnline) {\n      return getLocaleString('offlineMode', currentLanguage) || 'Офлайн режим';\n    }\n    \n    if (syncStatus.isActive) {\n      return getLocaleString('syncing', currentLanguage) || 'Синхронизация...';\n    }\n    \n    if (syncStatus.error) {\n      return getLocaleString('syncError', currentLanguage) || 'Ошибка синхронизации';\n    }\n    \n    if (syncStatus.pendingChanges > 0) {\n      return `${syncStatus.pendingChanges} ${getLocaleString('pendingChanges', currentLanguage) || 'изменений ожидает'}`;\n    }\n    \n    return getLocaleString('online', currentLanguage) || 'Онлайн';\n  };\n\n  const getLastSyncText = () => {\n    if (!syncStatus.lastSync) return '';\n    \n    const now = Date.now();\n    const diff = now - syncStatus.lastSync;\n    const minutes = Math.floor(diff / 60000);\n    \n    if (minutes < 1) {\n      return getLocaleString('justSynced', currentLanguage) || 'только что';\n    } else if (minutes < 60) {\n      return `${minutes} ${getLocaleString('minutesAgo', currentLanguage) || 'мин назад'}`;\n    } else {\n      const hours = Math.floor(minutes / 60);\n      return `${hours} ${getLocaleString('hoursAgo', currentLanguage) || 'ч назад'}`;\n    }\n  };\n\n  const handleManualSync = async () => {\n    if (!networkStatus.isOnline || syncStatus.isActive) return;\n    \n    try {\n      await syncService.forcSync();\n    } catch (error) {\n      console.error('Manual sync failed:', error);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center gap-2 px-3 py-1 bg-slate-800/50 rounded-full text-sm\">\n      {/* Индикатор сети */}\n      <div className=\"flex items-center gap-1\">\n        {getNetworkIcon()}\n        <span className={`text-xs ${networkStatus.isOnline ? 'text-green-400' : 'text-red-400'}`}>\n          {networkStatus.isOnline ? 'ON' : 'OFF'}\n        </span>\n      </div>\n\n      {/* Разделитель */}\n      <div className=\"h-4 w-px bg-slate-600\" />\n\n      {/* Индикатор синхронизации */}\n      <div \n        className=\"flex items-center gap-1 cursor-pointer hover:bg-slate-700/50 rounded px-1 py-0.5 transition-colors\"\n        onClick={handleManualSync}\n        title={getLocaleString('clickToSync', currentLanguage) || 'Нажмите для синхронизации'}\n      >\n        {getSyncIcon()}\n        <span className=\"text-xs text-slate-300\">\n          {getStatusText()}\n        </span>\n      </div>\n\n      {/* Индикатор загрузки аудио */}\n      {downloadStatus.isActive && (\n        <>\n          <div className=\"h-4 w-px bg-slate-600\" />\n          <div className=\"flex items-center gap-1\">\n            <Download className=\"h-4 w-4 text-blue-500\" />\n            <span className=\"text-xs text-blue-400\">\n              {downloadStatus.progress}%\n            </span>\n          </div>\n        </>\n      )}\n\n      {/* Время последней синхронизации */}\n      {syncStatus.lastSync && !syncStatus.isActive && (\n        <span className=\"text-xs text-slate-500 ml-1\">\n          {getLastSyncText()}\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default OfflineIndicator;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/PodcastPlayer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'AudioElement' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerUIControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'SpeakerAssignmentDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'AddQuestionDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'episodeLang' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'user' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":7},{"ruleId":"no-unused-vars","severity":1,"message":"'handleOpenSpeakerAssignmentDialog' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":70,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'setPlaybackRateByIndex' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":99,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { X } from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\nimport AudioElement from '@/components/player/player_parts/AudioElement';\nimport PlayerHeader from '@/components/player/player_parts/PlayerHeader';\nimport PlayerUIControls from '@/components/player/player_parts/PlayerUIControls';\nimport SpeakerAssignmentDialog from '@/components/transcript/SpeakerAssignmentDialog';\nimport AddQuestionDialog from '@/components/transcript/AddQuestionDialog.jsx'; \nimport usePlayerState from '@/hooks/player/usePlayerState.js';\nimport usePlayerInitialization from '@/hooks/player/usePlayerInitialization';\nimport usePlayerPlayback from '@/hooks/player/usePlayerPlayback';\nimport usePlayerNavigation from '@/hooks/player/usePlayerNavigation';\nimport usePlayerTimeUpdates from '@/hooks/player/usePlayerTimeUpdates';\nimport useSpeakerAssignment from '@/hooks/player/useSpeakerAssignment';\nimport { getLocaleString } from '@/lib/locales';\n\nconst playbackRateOptions = [\n  { label: \"1x\", value: 1},\n  { label: \"1.5x\", value: 1.5},\n  { label: \"2x\", value: 2},\n];\n\nconst PodcastPlayer = ({ \n  episodeData, \n  onQuestionUpdate, \n  currentLanguage, \n  onQuestionSelectJump, \n  audioRef,\n  episodeSlug, \n  episodeAudioUrl,\n  episodeLang,\n  episodeDate, \n  navigateBack,\n  onPlayerStateChange,\n  playerControlsContainerRef,\n  showTranscript,\n  onToggleShowTranscript,\n  user,\n  onTranscriptUpdate,\n  fetchTranscriptForEpisode\n }) => {\n  \n  const { toast } = useToast();\n  const internalQuestions = episodeData?.questions || [];\n  const internalTranscriptUtterances = episodeData?.transcript?.utterances || [];\n\n  const {\n    isPlayingState, setIsPlayingState,\n    currentTimeState, setCurrentTimeState,\n    durationState, setDurationState,\n    currentPlaybackRateIndex, setCurrentPlaybackRateIndex,\n    activeQuestionTitleState, setActiveQuestionTitleState,\n    isAddQuestionPlayerDialogOpen, setIsAddQuestionPlayerDialogOpen,\n    addQuestionDialogInitialTime, setAddQuestionDialogInitialTime\n  } = usePlayerState(episodeData?.duration);\n\n  const playbackRate = playbackRateOptions[currentPlaybackRateIndex].value;\n\n  const playPromiseRef = useRef(null);\n  const isSeekingRef = useRef(false);\n  const lastJumpIdProcessedRef = useRef(null);\n  const [skipEmptySegments, setSkipEmptySegments] = useState(false);\n\n  const langForContent = episodeData?.lang === 'all' ? currentLanguage : episodeData?.lang;\n\n  const {\n    isSpeakerAssignmentDialogOpen,\n    segmentForSpeakerAssignment,\n    handleOpenSpeakerAssignmentDialog,\n    handleSaveSpeakerAssignment,\n    handleCloseSpeakerAssignmentDialog\n  } = useSpeakerAssignment(episodeData, onTranscriptUpdate, toast, currentLanguage, fetchTranscriptForEpisode, episodeSlug, langForContent);\n\n\n  usePlayerInitialization({\n    episodeData, audioRef, setIsPlayingState, setCurrentTimeState,\n    setActiveQuestionTitleState, setDurationState, setCurrentPlaybackRateIndex,\n    playbackRateOptions, onPlayerStateChange, lastJumpIdProcessedRef,\n    jumpToTime: episodeData?.jumpToTime,\n  });\n\n  usePlayerPlayback({\n    episodeData, audioRef, isPlayingState, setIsPlayingState,\n    playPromiseRef, isSeekingRef, toast, currentLanguage,\n    onPlayerStateChange, lastJumpIdProcessedRef, \n    jumpToTime: episodeData?.jumpToTime, jumpId: episodeData?.jumpId,\n    playAfterJump: episodeData?.playAfterJump, setCurrentTimeState,\n  });\n\n  const { handleTimeUpdate, handleLoadedMetadata } = usePlayerTimeUpdates({\n    audioRef, isSeekingRef, internalQuestions, currentLanguage,\n    setCurrentTimeState, setActiveQuestionTitleState, setDurationState,\n    onPlayerStateChange, skipEmptySegments, transcript: episodeData?.transcript, \n  });\n\n  const { \n    handleProgressChange, handleSkip, navigateQuestion,\n    seekAudio, togglePlayPause, setPlaybackRateByIndex\n  } = usePlayerNavigation({\n    audioRef, durationState, isPlayingState, setIsPlayingState,\n    onQuestionSelectJump, internalQuestions, currentTimeState,\n    toast, currentLanguage, currentPlaybackRateIndex,\n    setCurrentPlaybackRateIndex, playbackRateOptions, episodeData, onPlayerStateChange,\n  });\n  \n  const handleQuestionsChange = useCallback((action, questionDataOrArray) => {\n    onQuestionUpdate(action, questionDataOrArray);\n  }, [onQuestionUpdate]);\n\n  const handleSetPlaybackRate = useCallback((rateValue) => {\n    const index = playbackRateOptions.findIndex(opt => opt.value === rateValue);\n    if (index !== -1) {\n      setCurrentPlaybackRateIndex(index);\n      if (audioRef.current) {\n        audioRef.current.playbackRate = rateValue;\n      }\n      onPlayerStateChange?.({ playbackRate: rateValue });\n    }\n  }, [setCurrentPlaybackRateIndex, audioRef, onPlayerStateChange]);\n\n  useEffect(() => {\n    if(typeof window !== 'undefined'){\n      window.__navigateQuestion = navigateQuestion;\n      window.__skipPlayerTime = handleSkip;\n      window.__togglePlayPause = togglePlayPause;\n      window.__seekAudio = seekAudio;\n    }\n    return () => {\n      if(typeof window !== 'undefined'){\n        delete window.__navigateQuestion;\n        delete window.__skipPlayerTime;\n        delete window.__togglePlayPause;\n        delete window.__seekAudio;\n      }\n    }\n  }, [navigateQuestion, handleSkip, togglePlayPause, seekAudio]);\n\n  const handleDownloadAudio = () => {\n    if (episodeAudioUrl) {\n      const link = document.createElement('a');\n      link.href = episodeAudioUrl;\n      link.download = `${episodeSlug || 'podcast_episode'}.mp3`; \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      toast({ title: getLocaleString('downloadStartedTitle', currentLanguage), description: getLocaleString('downloadStartedDesc', currentLanguage) });\n    } else {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('audioNotAvailableForDownload', currentLanguage), variant: 'destructive' });\n    }\n  };\n\n  const handleSaveNewQuestionFromPlayer = useCallback((title, time, isFullTranscript = false, isIntro = false) => {\n    handleQuestionsChange('add', { title, time, lang: langForContent, isFullTranscript, isIntro });\n    setIsAddQuestionPlayerDialogOpen(false);\n  }, [handleQuestionsChange, langForContent, setIsAddQuestionPlayerDialogOpen]);\n\n  const handleOpenAddQuestionDialogFromPlayer = useCallback(() => {\n    setAddQuestionDialogInitialTime(currentTimeState);\n    setIsAddQuestionPlayerDialogOpen(true);\n  }, [currentTimeState, setAddQuestionDialogInitialTime, setIsAddQuestionPlayerDialogOpen]);\n\n\n  if (!episodeData) return <div className=\"p-4 text-center\">{getLocaleString('selectAnEpisode', currentLanguage)}</div>;\n\n  return (\n    <>\n    <div className=\"relative podcast-player bg-slate-800/50 p-2 sm:p-3 md:p-4 rounded-xl shadow-2xl border border-slate-700/40\">\n      <PlayerHeader \n        episodeTitle={episodeData.displayTitle}\n        episodeDate={episodeData.date} \n        onNavigateBack={navigateBack} \n        currentLanguage={currentLanguage} \n      />\n      <div>\n        <AudioElement \n          audioRef={audioRef}\n          episodeAudioUrl={episodeAudioUrl}\n          onTimeUpdate={handleTimeUpdate}\n          onLoadedMetadata={handleLoadedMetadata}\n          onEnded={() => { setIsPlayingState(false); onPlayerStateChange?.({isPlaying: false});}}\n          onDurationChange={handleLoadedMetadata} \n          playbackRate={playbackRate}\n          onError={(e) => {\n             if (e.target.error && e.target.error.code !== e.target.error.MEDIA_ERR_ABORTED) {\n                toast({\n                title: getLocaleString('audioErrorTitle', currentLanguage),\n                description: getLocaleString('audioErrorDescriptionPlayer', currentLanguage, {episodeTitle: episodeData.title}),\n                variant: \"destructive\",\n                });\n            }\n          }}\n        />\n        \n        <PlayerUIControls \n          activeQuestionTitle={activeQuestionTitleState}\n          isPlaying={isPlayingState}\n          currentLanguage={currentLanguage}\n          currentTime={currentTimeState}\n          duration={durationState}\n          onProgressChange={handleProgressChange}\n          questions={internalQuestions}\n          onQuestionSelectJump={onQuestionSelectJump}\n          onNavigateQuestion={navigateQuestion}\n          onTogglePlayPause={togglePlayPause}\n          onSkip={handleSkip}\n          playerControlsContainerRef={playerControlsContainerRef}\n          showTranscript={showTranscript}\n          onToggleShowTranscript={onToggleShowTranscript}\n          skipEmptySegments={skipEmptySegments}\n          onToggleSkipEmptySegments={() => setSkipEmptySegments(prev => !prev)}\n          onDownloadAudio={handleDownloadAudio}\n          playbackRateOptions={playbackRateOptions}\n          currentPlaybackRateValue={playbackRate}\n          onSetPlaybackRate={handleSetPlaybackRate}\n          onOpenAddQuestionDialog={handleOpenAddQuestionDialogFromPlayer}\n          episodeDate={episodeDate}\n        />\n      </div>\n    </div>\n     {segmentForSpeakerAssignment && (\n        <SpeakerAssignmentDialog\n          isOpen={isSpeakerAssignmentDialogOpen}\n          onClose={handleCloseSpeakerAssignmentDialog}\n          segment={segmentForSpeakerAssignment}\n          allUtterances={internalTranscriptUtterances}\n          onSave={handleSaveSpeakerAssignment}\n          currentLanguage={currentLanguage}\n        />\n      )}\n      {isAddQuestionPlayerDialogOpen && (\n        <AddQuestionDialog\n          isOpen={isAddQuestionPlayerDialogOpen}\n          onClose={() => setIsAddQuestionPlayerDialogOpen(false)}\n          onSave={handleSaveNewQuestionFromPlayer}\n          maxDuration={durationState}\n          currentLanguage={currentLanguage}\n          initialTime={addQuestionDialogInitialTime}\n          episodeDate={episodeDate}\n          segment={null}\n          audioRef={audioRef}\n          mainPlayerIsPlaying={isPlayingState}\n          mainPlayerTogglePlayPause={togglePlayPause}\n          mainPlayerSeekAudio={seekAudio}\n        />\n      )}\n    </>\n  );\n};\n\nexport default React.memo(PodcastPlayer);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/TranscriptEditor.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/episodes/EmptyState.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'List' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { List } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst EmptyState = ({ currentLanguage }) => (\n  <div className=\"text-center py-12 animate-fade-in-up\">\n    <List className=\"mx-auto h-16 w-16 text-slate-500 mb-4\" />\n    <p className=\"mt-4 text-lg text-slate-300\">\n      {getLocaleString('noEpisodesFoundForLanguage', currentLanguage, { language: getLocaleString(currentLanguage, currentLanguage) })}\n    </p>\n    <p className=\"mt-2 text-sm text-slate-400\">{getLocaleString('tryUploadingAudioOrFilter', currentLanguage)}</p>\n  </div>\n);\n\nexport default EmptyState;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/episodes/EpisodeListItem.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'EpisodeQuestionsList' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport EpisodeQuestionsList from './EpisodeQuestionsList';\nimport { getLocaleString, getPluralizedLocaleString } from '@/lib/locales';\nimport { formatFullTime, formatShortDate } from '@/lib/utils';\nimport { AlertTriangle, Loader2 } from 'lucide-react';\n\nconst EpisodeListItem = React.memo(({ episode, currentLanguage, questionsCount, questionsForEpisode }) => {\n  \n  const formatEpisodeTitle = (title, episodeDate) => {\n    const prefix = getLocaleString('meditationTitlePrefix', currentLanguage);\n    let datePart = '';\n\n    if (episodeDate) {\n      datePart = formatShortDate(episodeDate, currentLanguage);\n    }\n    \n    return datePart ? `${prefix} ${datePart}` : title || prefix;\n  };\n\n  const displayTitle = formatEpisodeTitle(episode.title, episode.date);\n  const langDisplay = episode.lang === 'all' ? currentLanguage : episode.lang;\n  const langColorClass = langDisplay === 'ru' ? 'bg-blue-600/70 text-blue-100' \n                      : langDisplay === 'es' ? 'bg-yellow-600/70 text-yellow-100' \n                      : 'bg-green-600/70 text-green-100';\n\n\n\n  return (\n    <li className=\"bg-slate-800/70 rounded-xl shadow-lg hover:shadow-purple-500/20 transition-all duration-300 ease-in-out border border-slate-700/50 hover:border-purple-500/60 animate-fade-in-up\">\n      <div className=\"p-4\">\n        \n        <Link to={`/episode/${episode.slug}`} className=\"block group mb-2\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2\">\n            <h2 className=\"text-lg font-semibold group-hover:text-purple-200 transition-colors truncate flex-grow text-purple-300\" title={displayTitle}>\n              {displayTitle}\n            </h2>\n            {episode.file_has_lang_suffix && (\n              <span className={`text-xs font-medium px-2.5 py-1 rounded-full ml-0 sm:ml-3 mt-1 sm:mt-0 ${langColorClass} shadow-sm`}>\n                {langDisplay.toUpperCase()}\n              </span>\n            )}\n          </div>\n          <div className=\"text-sm text-slate-400 flex flex-wrap gap-x-4 gap-y-1\">\n            {episode.duration > 0 && (\n               <span>\n                 {getLocaleString('duration', currentLanguage)}: <span className=\"font-medium text-slate-300\">{formatFullTime(episode.duration, false)}</span>\n               </span>\n            )}\n            <span>\n              {getPluralizedLocaleString('questionCount', currentLanguage, questionsCount || 0, { count: questionsCount || 0 })}\n            </span>\n          </div>\n        </Link>\n        <EpisodeQuestionsList\n          questions={questionsForEpisode}\n          episodeSlug={episode.slug}\n          currentLanguage={currentLanguage}\n        />\n      </div>\n    </li>\n  );\n});\n\nexport default EpisodeListItem;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/episodes/EpisodeQuestionsList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'MessageSquare' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { MessageSquare } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst EpisodeQuestionsList = React.memo(({ questions, episodeSlug, currentLanguage }) => {\n  const navigate = useNavigate();\n\n  if (!questions || questions.length === 0) {\n    return (\n      <div className=\"mt-3 pl-2 py-1 text-xs text-slate-400\">\n        {getLocaleString('noQuestionsAddedYet', currentLanguage)}\n      </div>\n    );\n  }\n\n  const handleQuestionClick = (questionId) => {\n    navigate(`/episode/${episodeSlug}#question-${questionId}&play=true`);\n  };\n\n  return (\n    <div className=\"mt-3 pl-2\">\n      <div className=\"text-xs text-purple-300 font-semibold mb-1 py-1\">\n        {getLocaleString('questions', currentLanguage)} ({questions.length})\n      </div>\n      <ul className=\"space-y-1.5 overflow-hidden pl-2 border-l-2 border-purple-500/20 animate-fade-in\">\n        {questions.map(question => (\n          <li \n            key={question.id}\n            className=\"animate-slide-in-left\"\n          >\n            <button \n              onClick={() => handleQuestionClick(question.id)}\n              className=\"text-xs text-slate-300 hover:text-purple-200 hover:underline flex items-start gap-1.5 text-left w-full\"\n            >\n              <MessageSquare size={12} className=\"text-purple-400 shrink-0 mt-0.5\" />\n              <span className=\"flex-grow\" title={question.title}>{question.title || getLocaleString('untitledQuestion', currentLanguage)}</span>\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n\nexport default EpisodeQuestionsList;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/episodes/EpisodesList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'EpisodeListItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport EpisodeListItem from './EpisodeListItem';\n\nconst EpisodesList = React.memo(({ episodes, currentLanguage, episodeQuestionsCount, allQuestions }) => {\n  if (episodes.length === 0) {\n    return null; \n  }\n  return (\n    <ul className=\"space-y-4 animate-fade-in\">\n      {episodes.map((episode) => {\n        const effectiveLang = episode.lang === 'all' ? currentLanguage : episode.lang;\n        const questionsForThisEpisode = allQuestions.filter(q => q.episode_slug === episode.slug && q.lang === effectiveLang) || [];\n                                          \n        return (\n          <EpisodeListItem \n            key={episode.slug + '-' + effectiveLang} \n            episode={episode} \n            currentLanguage={currentLanguage}\n            questionsCount={episodeQuestionsCount[episode.slug]?.[effectiveLang] || 0}\n            questionsForEpisode={questionsForThisEpisode}\n          />\n        );\n      })}\n    </ul>\n  );\n});\n\nexport default EpisodesList;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/episodes/EpisodesPageHeader.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { getLocaleString } from '@/lib/locales';\nimport { useTelegram } from '@/contexts/TelegramContext';\n\nconst EpisodesPageHeader = ({ currentLanguage }) => {\n  const { user, isReady } = useTelegram();\n  const navigate = useNavigate();\n  const showManageButton = isReady && user && user.username === 'de_paz';\n\n  return (\n    <div className=\"flex flex-col sm:flex-row justify-between items-center mb-6 gap-4\">\n      <div className=\"flex items-center w-full sm:w-auto\">\n        <img \n          src=\"https://dosmundos.pe/wp-content/uploads/2025/02/logo-5-120x120.png\" \n          alt=\"Dos Mundos Logo\" \n          className=\"w-10 h-10 sm:w-12 sm:h-12 mr-3 rounded-full object-contain shadow-md\" \n        />\n        <h1 className=\"text-3xl sm:text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-500\">\n          {getLocaleString('episodes', currentLanguage)}\n        </h1>\n      </div>\n      {showManageButton && (\n        <Button onClick={() => navigate('/manage')} className=\"bg-gradient-to-r from-indigo-600 to-blue-600 hover:from-indigo-700 hover:to-blue-700 text-white font-semibold shadow-md hover:shadow-lg transition-all duration-300 py-2 px-5\">\n          {getLocaleString('manageAndUploadTitle', currentLanguage)}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default EpisodesPageHeader;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/episodes/FilterAndSearchControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Select' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":43},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectTrigger' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'SelectValue' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":71},{"ruleId":"no-unused-vars","severity":1,"message":"'SearchIconLucide' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":36},{"ruleId":"no-unused-vars","severity":1,"message":"'CalendarDays' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Search as SearchIconLucide, CalendarDays } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst FilterAndSearchControls = ({ years, months, selectedYear, setSelectedYear, selectedMonth, setSelectedMonth, currentLanguage }) => {\n  const navigate = useNavigate();\n  return (\n    <div className=\"mb-6 p-3 sm:p-4 bg-slate-800/50 rounded-lg border border-slate-700/50\">\n      <div className=\"flex flex-col sm:flex-row items-center gap-2 sm:gap-3\">\n        <div className=\"w-full sm:flex-1\">\n          <Select value={selectedYear || ''} onValueChange={(value) => setSelectedYear(value === 'all' ? null : value)}>\n            <SelectTrigger className=\"w-full bg-slate-700/60 border-slate-600 hover:border-purple-500/70 focus:ring-purple-500 text-white h-9 text-xs sm:text-sm\">\n              <CalendarDays className=\"h-3.5 w-3.5 mr-1.5 text-purple-400 opacity-80\" />\n              <SelectValue placeholder={getLocaleString('filterByYear', currentLanguage)} />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-700 text-white\">\n              <SelectItem value=\"all\" className=\"focus:bg-slate-700\">{getLocaleString('allYears', currentLanguage)}</SelectItem>\n              {years.map(year => <SelectItem key={year} value={year} className=\"focus:bg-slate-700\">{year}</SelectItem>)}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"w-full sm:flex-1\">\n          <Select value={selectedMonth || ''} onValueChange={(value) => setSelectedMonth(value === 'all' ? null : value)} disabled={!selectedYear}>\n            <SelectTrigger className=\"w-full bg-slate-700/60 border-slate-600 hover:border-purple-500/70 focus:ring-purple-500 text-white h-9 text-xs sm:text-sm\" disabled={!selectedYear}>\n              <CalendarDays className=\"h-3.5 w-3.5 mr-1.5 text-purple-400 opacity-80\" />\n              <SelectValue placeholder={getLocaleString('filterByMonth', currentLanguage)} />\n            </SelectTrigger>\n            <SelectContent className=\"bg-slate-800 border-slate-700 text-white\">\n              <SelectItem value=\"all\" className=\"focus:bg-slate-700\">{getLocaleString('allMonths', currentLanguage)}</SelectItem>\n              {months.map(month => (\n                <SelectItem key={month.value} value={month.value} className=\"focus:bg-slate-700\">\n                  {getLocaleString(month.labelKey, currentLanguage)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <Button \n          onClick={() => navigate('/deep-search')} \n          variant=\"outline\"\n          className=\"w-full sm:w-auto bg-purple-600/10 hover:bg-purple-700/20 border-purple-500/50 text-purple-300 hover:text-purple-200 font-semibold shadow-md hover:shadow-lg transition-all duration-300 h-9 rounded-lg flex items-center justify-center gap-1.5 px-3 text-xs sm:text-sm\"\n          title={getLocaleString('navigateToDeepSearch', currentLanguage)}\n        >\n          <SearchIconLucide className=\"h-3.5 w-3.5\" />\n          <span>{getLocaleString('search', currentLanguage)}</span>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterAndSearchControls;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/FloatingPlayerControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Play' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Pause' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCw' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCw, RotateCcw } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst FloatingPlayerControls = ({ \n  episodeTitle, \n  isPlaying, \n  activeQuestionTitle,\n  onPlayPause, \n  onSkipSeconds,\n  currentLanguage\n}) => {\n  if (!episodeTitle) return null;\n\n  return (\n    <div\n      className=\"fixed top-0 left-0 right-0 z-50 bg-slate-900/80 backdrop-blur-md shadow-xl border-b border-slate-700/50\"\n    >\n      <div className=\"container mx-auto px-3 py-2 flex items-center justify-between max-w-4xl\">\n        <div className=\"flex-grow min-w-0 mr-2\">\n          <p className=\"text-sm font-semibold text-purple-300 truncate\" title={episodeTitle}>\n            {episodeTitle}\n          </p>\n          <p className=\"text-xs text-slate-300 truncate\" title={activeQuestionTitle || getLocaleString('paused', currentLanguage)}>\n            {activeQuestionTitle || (isPlaying ? getLocaleString('nowPlaying', currentLanguage) : getLocaleString('paused', currentLanguage))}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-1 shrink-0\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={() => {\n              if (onSkipSeconds) onSkipSeconds(-10);\n            }} \n            className=\"text-slate-200 hover:text-white hover:bg-white/15 h-9 w-9\"\n            aria-label={getLocaleString('skipBackward10', currentLanguage) || \"Skip backward 10s\"}\n          >\n            <RotateCcw className=\"h-5 w-5\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onPlayPause} \n            className=\"text-slate-100 hover:text-white bg-purple-600/30 hover:bg-purple-500/50 rounded-full h-10 w-10\"\n            aria-label={isPlaying ? getLocaleString('pause', currentLanguage) : getLocaleString('play', currentLanguage)}\n          >\n            {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={() => {\n              if (onSkipSeconds) onSkipSeconds(10);\n            }} \n            className=\"text-slate-200 hover:text-white hover:bg-white/15 h-9 w-9\"\n            aria-label={getLocaleString('skipForward10', currentLanguage) || \"Skip forward 10s\"}\n          >\n            <RotateCw className=\"h-5 w-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FloatingPlayerControls;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/FloatingPlayerControlsReadingMode.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Play' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Pause' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCw' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Play, Pause, RotateCw, RotateCcw, X } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\nconst FloatingPlayerControlsReadingMode = ({ \n  episodeTitle, \n  isPlaying, \n  onPlayPause, \n  onSkipSeconds,\n  onClose,\n  currentLanguage,\n  audioRef \n}) => {\n  if (!episodeTitle) return null;\n\n  const handlePlayPause = () => {\n    if (onPlayPause) {\n      onPlayPause();\n    } else if (audioRef && audioRef.current) { \n      if (audioRef.current.paused) {\n        audioRef.current.play().catch(e => console.error(\"Reading mode play error (direct):\", e));\n      } else {\n        audioRef.current.pause();\n      }\n    }\n  };\n\n  const handleSkip = (seconds) => {\n     if (onSkipSeconds) {\n        onSkipSeconds(seconds);\n     } else if (audioRef && audioRef.current) {\n        const newTime = Math.max(0, Math.min(audioRef.current.duration || 0, audioRef.current.currentTime + seconds));\n        audioRef.current.currentTime = newTime;\n    }\n  };\n\n  return (\n    <div\n      className=\"fixed top-0 left-0 right-0 z-[110] bg-slate-50/90 backdrop-blur-md shadow-lg border-b border-slate-300\"\n    >\n      <div className=\"container mx-auto px-3 py-2 flex items-center justify-between max-w-3xl\">\n        <div className=\"flex-grow min-w-0 mx-2 text-center\">\n          <p className=\"text-sm font-semibold text-slate-700 truncate\" title={episodeTitle}>\n            {episodeTitle}\n          </p>\n          <p className=\"text-xs text-slate-500 truncate\">\n            {isPlaying ? getLocaleString('nowPlaying', currentLanguage) : getLocaleString('paused', currentLanguage)}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-1 shrink-0\">\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  onClick={() => handleSkip(-10)} \n                  className=\"text-slate-700 hover:text-purple-700 hover:bg-purple-100 h-9 w-9\"\n                  aria-label={getLocaleString('skipBackward10', currentLanguage) || \"Skip backward 10s\"}\n                >\n                  <RotateCcw className=\"h-5 w-5\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent side=\"bottom\" className=\"bg-slate-800 text-white border-slate-700\">\n                  <p>{getLocaleString('skipBackward10Tooltip', currentLanguage)}</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  onClick={handlePlayPause} \n                  className=\"text-slate-800 hover:text-purple-700 bg-purple-500/20 hover:bg-purple-500/30 rounded-full h-10 w-10\"\n                  aria-label={isPlaying ? getLocaleString('pause', currentLanguage) : getLocaleString('play', currentLanguage)}\n                >\n                  {isPlaying ? <Pause className=\"h-5 w-5\" /> : <Play className=\"h-5 w-5\" />}\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent side=\"bottom\" className=\"bg-slate-800 text-white border-slate-700\">\n                  <p>{isPlaying ? getLocaleString('pauseTooltip', currentLanguage) : getLocaleString('playTooltip', currentLanguage)}</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  onClick={() => handleSkip(10)} \n                  className=\"text-slate-700 hover:text-purple-700 hover:bg-purple-100 h-9 w-9\"\n                  aria-label={getLocaleString('skipForward10', currentLanguage) || \"Skip forward 10s\"}\n                >\n                  <RotateCw className=\"h-5 w-5\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent side=\"bottom\" className=\"bg-slate-800 text-white border-slate-700\">\n                  <p>{getLocaleString('skipForward10Tooltip', currentLanguage)}</p>\n              </TooltipContent>\n            </Tooltip>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  onClick={onClose}\n                  className=\"text-slate-700 hover:text-red-600 hover:bg-red-100 h-9 w-9 ml-2\"\n                  aria-label={getLocaleString('exitReadingMode', currentLanguage)}\n                >\n                  <X className=\"h-5 w-5\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent side=\"bottom\" className=\"bg-slate-800 text-white border-slate-700\">\n                  <p>{getLocaleString('exitReadingModeTooltip', currentLanguage)}</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FloatingPlayerControlsReadingMode;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/PlayerControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Play' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Pause' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCw' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'currentTime' is defined but never used. Allowed unused args must match /^_/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Play, Pause, RotateCcw, RotateCw } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst PlayerControls = ({ \n  isPlaying, \n  onPlayPause, \n  onSkip, \n  variant = \"default\",\n  onAdjustTime,\n  seekAudio,\n  currentTime, \n  mainPlayerIsPlaying, \n  mainPlayerTogglePlayPause, \n  mainPlayerSeekAudio,\n  audioRefCurrentTime, \n  playerDuration \n }) => {\n  const controlSize = variant === \"compact\" ? \"h-10 w-10 md:h-11 md:w-11\" : \"h-11 w-11 md:h-13 md:w-13\";\n  const iconSize = variant === \"compact\" ? \"h-5 w-5 md:h-5 md:w-5\" : \"h-5 w-5 md:h-6 md:w-6\";\n  const mainButtonSize = variant === \"compact\" ? \"h-14 w-14 md:h-16 md:w-16\" : \"h-16 w-16 md:h-18 md:w-18\";\n  const mainIconSize = variant === \"compact\" ? \"h-7 w-7 md:h-8 md:w-8\" : \"h-8 w-8 md:h-9 md:w-9\";\n\n  if (variant === \"timeAdjustment\") {\n    const handleTimeAdjustAndPlay = (amount) => {\n      const currentAudioTime = audioRefCurrentTime ?? 0;\n      const duration = playerDuration ?? Infinity;\n      const newTime = Math.max(0, Math.min(duration, currentAudioTime + amount));\n      \n      if (onAdjustTime) { \n         onAdjustTime(amount); \n      } else if (mainPlayerSeekAudio) { \n         mainPlayerSeekAudio(newTime, true); \n      } else if (seekAudio) {\n         seekAudio(newTime, true);\n      }\n    };\n\n    return (\n       <div className=\"flex items-center justify-center gap-1\">\n        <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(-10)}>\n          <RotateCcw className=\"h-3.5 w-3.5 mr-1\" /> -10s\n        </Button>\n        <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(-1)}>\n          <RotateCcw className=\"h-3.5 w-3.5 mr-1\" /> -1s\n        </Button>\n        <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 bg-white/10 hover:bg-white/20 border-white/20\" \n          onClick={() => {\n             if (mainPlayerTogglePlayPause) mainPlayerTogglePlayPause(); \n             else if (onPlayPause) onPlayPause(); \n          }}>\n          {(mainPlayerIsPlaying !== undefined ? mainPlayerIsPlaying : isPlaying) ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n        </Button>\n        <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(1)}>\n          +1s <RotateCw className=\"h-3.5 w-3.5 ml-1\" />\n        </Button>\n        <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(10)}>\n          +10s <RotateCw className=\"h-3.5 w-3.5 ml-1\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`flex items-center justify-center gap-2 md:gap-2.5 ${variant === \"compact\" ? \"my-0\" : \"\"}`}>\n      <Button \n        variant=\"ghost\" \n        size=\"icon\"\n        onClick={() => {\n      \n          onSkip(-10);\n        }}\n        className={`text-white hover:text-white/80 hover:bg-white/15 ${controlSize}`}\n        aria-label=\"Перемотать назад на 10 секунд\"\n      >\n        <RotateCcw className={iconSize} />\n      </Button>\n      \n      <Button \n        variant=\"default\" \n        size=\"icon\"\n        onClick={() => {\n      \n          onPlayPause();\n        }}\n        className={`bg-white text-blue-700 hover:bg-white/90 rounded-full flex items-center justify-center shadow-lg ${mainButtonSize}`}\n        aria-label={isPlaying ? \"Пауза\" : \"Воспроизвести\"}\n      >\n        {isPlaying ? <Pause className={mainIconSize} /> : <Play className={`${mainIconSize}`} />}\n      </Button>\n      \n      <Button \n        variant=\"ghost\" \n        size=\"icon\"\n        onClick={() => {\n      \n          onSkip(10);\n        }}\n        className={`text-white hover:text-white/80 hover:bg-white/10 ${controlSize}`}\n        aria-label=\"Перемотать вперед на 10 секунд\"\n      >\n        <RotateCw className={iconSize} />\n      </Button>\n    </div>\n  );\n};\n\nexport default PlayerControls;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/ProgressBar.jsx","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":17,"column":14,"nodeType":"BlockStatement","messageId":"unexpected","endLine":19,"endColumn":8,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[719,727],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":20,"column":12,"nodeType":"BlockStatement","messageId":"unexpected","endLine":22,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[741,747],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useCallback } from 'react';\nimport { formatTime } from '@/lib/utils';\n\nconst DEFAULT_MARKER_COLOR = '#FFC107'; \n\nconst ProgressBar = ({ currentTime, duration, sections, onProgressChange, onSectionJump }) => {\n  const progressBarRef = useRef(null);\n\n  const handleProgressInteraction = useCallback((clientX) => {\n\n    if (progressBarRef.current && duration > 0) {\n      const rect = progressBarRef.current.getBoundingClientRect();\n      const clickPosition = (clientX - rect.left) / rect.width;\n      const newTime = Math.max(0, Math.min(duration, clickPosition * duration));\n      if (typeof onProgressChange === 'function' && !isNaN(newTime)) {\n        onProgressChange(newTime);\n      } else {\n\n      }\n    } else {\n\n    }\n  }, [duration, onProgressChange]);\n\n  const handleMouseClick = (e) => {\n\n    handleProgressInteraction(e.clientX);\n  };\n\n  const handleTouchInteraction = (touch) => {\n    handleProgressInteraction(touch.clientX);\n  }\n  \n  const handleTouchStart = (e) => {\n     if (e.touches.length > 0) {\n      handleTouchInteraction(e.touches[0]);\n    }\n  };\n\n  const handleTouchMove = (e) => {\n    e.preventDefault(); \n    if (e.touches.length > 0) {\n      handleTouchInteraction(e.touches[0]);\n    }\n  };\n\n  const handleSectionMarkerClick = useCallback((e, time, id) => {\n    e.stopPropagation(); \n    if (typeof onSectionJump === 'function' && !isNaN(time)) {\n      onSectionJump(time, id);\n    }\n  }, [onSectionJump]);\n\n\n  return (\n    <div \n      className=\"h-5 md:h-6 w-full relative cursor-pointer group\"\n      onClick={handleMouseClick}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      ref={progressBarRef}\n      role=\"slider\"\n      aria-valuemin=\"0\"\n      aria-valuemax={duration}\n      aria-valuenow={currentTime}\n      aria-label=\"Podcast progress\"\n    >\n      <div className=\"absolute top-1/2 left-0 transform -translate-y-1/2 w-full h-1 md:h-1.5 bg-white/20 rounded-full group-hover:h-1.5 md:group-hover:h-2 transition-all\"></div>\n      <div \n        className=\"absolute top-1/2 left-0 transform -translate-y-1/2 progress-bar group-hover:h-1.5 md:group-hover:h-2 transition-all\"\n        style={{ width: duration > 0 ? `${(currentTime / duration) * 100}%` : '0%' }}\n      ></div>\n      \n      {sections.map((section) => (\n        <button\n          key={section.id}\n          className=\"absolute w-2 h-2 md:w-2.5 md:h-2.5 rounded-full shadow-md hover:scale-150 transition-transform duration-150 focus:outline-none focus:ring-2 focus:ring-white\"\n          style={{ \n            left: duration > 0 ? `calc(${(section.time / duration) * 100}% - 4px)` : '0%',\n            top: '50%',\n            transform: 'translateY(-50%)',\n            backgroundColor: DEFAULT_MARKER_COLOR \n          }}\n          onClick={(e) => handleSectionMarkerClick(e, section.time, section.id)}\n          onTouchStart={(e) => handleSectionMarkerClick(e, section.time, section.id)}\n          title={`${section.title} (${formatTime(section.time)})`}\n          aria-label={`Перейти к вопросу: ${section.title}`}\n        ></button>\n      ))}\n      <div \n        className=\"absolute top-1/2 h-2.5 w-2.5 md:h-3 md:w-3 bg-white rounded-full shadow-md transform -translate-y-1/2 -translate-x-1/2 pointer-events-none transition-all group-hover:h-3.5 group-hover:w-3.5\"\n        style={{ left: duration > 0 ? `${(currentTime / duration) * 100}%` : '0%' }}\n      ></div>\n    </div>\n  );\n};\n\nexport default ProgressBar;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/QuestionsManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'QuestionBlock' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'onQuestionsChange' is defined but never used. Allowed unused args must match /^_/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'episodeDate' is defined but never used. Allowed unused args must match /^_/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'mainPlayerTogglePlayPause' is defined but never used. Allowed unused args must match /^_/u.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'episodeAudioUrl' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'transcriptId' is defined but never used. Allowed unused args must match /^_/u.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'transcriptWords' is defined but never used. Allowed unused args must match /^_/u.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'isLoading' is defined but never used. Allowed unused args must match /^_/u.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":12},{"ruleId":"no-unused-vars","severity":1,"message":"'onTranscriptLocalUpdate' is defined but never used. Allowed unused args must match /^_/u.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport QuestionBlock from '@/components/player/questions_manager_parts/QuestionBlock.jsx';\n\nconst QuestionsManager = ({\n  questions,\n  currentTime,\n  duration,\n  onQuestionsChange,\n  onQuestionJump,\n  episodeSlug,\n  episodeDate,\n  audioRef,\n  mainPlayerIsPlaying,\n  mainPlayerTogglePlayPause,\n  mainPlayerSeekAudio,\n  currentLanguage,\n  episodeLang,\n  episodeAudioUrl,\n  jumpToQuestionId,\n  showTranscript,\n  user,\n  disableAutomaticCollapse = false,\n  onOpenSpeakerAssignmentDialog,\n  transcriptUtterances,\n  transcriptId,\n  transcriptWords,\n  segmentToHighlight,\n  isLoading,\n  transcriptLoading,\n  onTranscriptLocalUpdate\n}) => {\n  const [activeQuestionId, setActiveQuestionId] = useState(null);\n  const [expandedById, setExpandedById] = useState({});\n\n  const langForContent = episodeLang === 'all' ? currentLanguage : episodeLang;\n  const utterances = transcriptUtterances || [];\n\n  const questionSegmentsMap = useMemo(() => {\n    if (!showTranscript || utterances.length === 0) return {};\n    const map = {};\n    const sorted = [...questions].sort((a, b) => a.time - b.time);\n    sorted.forEach((q, idx) => {\n      const startMs = (q.time || 0) * 1000;\n      const next = sorted[idx + 1];\n      const endMs = next ? (next.time * 1000) : (duration ? duration * 1000 : Infinity);\n      map[q.id] = utterances\n        .filter(u => typeof u.start === 'number' && u.start >= startMs && u.start < endMs)\n        .sort((a, b) => a.start - b.start);\n    });\n    return map;\n  }, [questions, utterances, duration, showTranscript]);\n\n  useEffect(() => {\n    if (!disableAutomaticCollapse && Array.isArray(questions) && questions.length > 0) {\n      const playingQ = questions.find(q => currentTime >= q.time && (questions.indexOf(q) === questions.length - 1 || currentTime < questions[questions.indexOf(q) + 1].time));\n      if (playingQ && playingQ.id !== activeQuestionId) {\n        setActiveQuestionId(playingQ.id);\n        setExpandedById(prev => ({ ...prev, [playingQ.id]: true }));\n      }\n    }\n  }, [currentTime, questions, activeQuestionId, disableAutomaticCollapse]);\n\n  useEffect(() => {\n    if (!jumpToQuestionId) return;\n    const q = questions.find(x => String(x.id) === String(jumpToQuestionId));\n    if (q) {\n      setActiveQuestionId(q.id);\n      setExpandedById(prev => ({ ...prev, [q.id]: true }));\n      const el = document.getElementById(`question-block-${q.id}`);\n      if (el) el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  }, [jumpToQuestionId, questions]);\n\n  const toggleQuestionExpansion = useCallback((id) => {\n    setExpandedById(prev => ({ ...prev, [id]: !prev[id] }));\n  }, []);\n\n  const handleActivateQuestion = useCallback((q) => {\n    onQuestionJump(q.time, `question-${q.id}`, true);\n    setActiveQuestionId(q.id);\n    if (!disableAutomaticCollapse) setExpandedById({ [q.id]: true });\n  }, [onQuestionJump, disableAutomaticCollapse]);\n\n  const handleSegmentClick = useCallback((timeInSeconds) => {\n    if (mainPlayerSeekAudio) mainPlayerSeekAudio(timeInSeconds, true);\n  }, [mainPlayerSeekAudio]);\n\n  const displayableQuestions = useMemo(() => {\n    if (!Array.isArray(questions)) return [];\n    const sorted = [...questions].sort((a, b) => a.time - b.time);\n    const fullTranscript = (!sorted.some(q => q.id !== 'intro-virtual') && utterances.length > 0 && showTranscript)\n      ? [{ id: 'full-transcript-virtual', title: '', time: 0, is_full_transcript: true, is_intro: false, lang: langForContent }]\n      : [];\n    return [...fullTranscript, ...sorted];\n  }, [questions, utterances, showTranscript, langForContent]);\n\n  return (\n    <div className=\"mt-1\">\n      {displayableQuestions.map((q) => (\n        <QuestionBlock\n          key={q.id}\n          id={`question-block-${q.id}`}\n          question={q}\n          segments={questionSegmentsMap[q.id] || []}\n          isActiveQuestion={activeQuestionId === q.id}\n          isJumpTarget={segmentToHighlight && (questionSegmentsMap[q.id] || []).some(s => s.start === segmentToHighlight)}\n          isExpanded={!!expandedById[q.id]}\n          onToggleExpansion={() => toggleQuestionExpansion(q.id)}\n          onActivate={() => handleActivateQuestion(q)}\n          onEditQuestion={() => {}}\n          currentLanguage={currentLanguage}\n          onSegmentClick={handleSegmentClick}\n          audioRef={audioRef}\n          onSaveEditedSegment={() => {}}\n          activeSegmentTime={currentTime * 1000}\n          onAddQuestionFromSegment={() => {}}\n          utterances={utterances}\n          mainPlayerIsPlaying={mainPlayerIsPlaying}\n          showTranscript={showTranscript}\n          user={user}\n          episodeSlug={episodeSlug}\n          isReadingMode={false}\n          readingModeEditingActive={false}\n          setReadingModeEditingSegmentRef={null}\n          onOpenSpeakerAssignmentDialog={onOpenSpeakerAssignmentDialog}\n          segmentToHighlight={segmentToHighlight}\n          transcriptLoading={transcriptLoading}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default QuestionsManager;\n\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/ReadingModeAudioPlayer.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/ReadingModeDisplay.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'FloatingPlayerControlsReadingMode' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":41},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'QuestionsManager' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'SpeakerAssignmentDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'ReadingModeAudioPlayer' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'segment' is defined but never used. Allowed unused args must match /^_/u.","line":116,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":65}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport FloatingPlayerControlsReadingMode from '@/components/player/FloatingPlayerControlsReadingMode';\nimport PlayerHeader from '@/components/player/player_parts/PlayerHeader';\nimport QuestionsManager from '@/components/player/QuestionsManager';\nimport SpeakerAssignmentDialog from '@/components/transcript/SpeakerAssignmentDialog';\nimport ReadingModeAudioPlayer from '@/components/player/ReadingModeAudioPlayer';\nimport { getLocaleString } from '@/lib/locales';\nimport { Loader2 } from 'lucide-react';\n\nconst ReadingModeDisplay = ({\n  episodeData,\n  currentLanguage,\n  audioRef: mainAudioPlayerRef, \n  isPlaying: mainPlayerIsPlaying,\n  currentTime: mainPlayerCurrentTime,\n  onClose,\n  onOpenSpeakerAssignmentDialog,\n  onQuestionsChange, \n  episodeSlug,\n  episodeDate,\n  episodeAudioUrl,\n  user,\n  segmentForSpeakerAssignment,\n  isSpeakerAssignmentDialogOpen,\n  onCloseSpeakerAssignmentDialog,\n  onSaveSpeakerAssignment,\n  internalTranscriptUtterances\n}) => {\n  const readingModeAudioRef = useRef(null);\n  const [rmIsPlaying, setRmIsPlaying] = useState(false);\n  const [rmCurrentTime, setRmCurrentTime] = useState(0);\n  const [rmDuration, setRmDuration] = useState(0);\n  const [isLoadingAudio, setIsLoadingAudio] = useState(true);\n\n  useEffect(() => {\n    if (mainAudioPlayerRef?.current && mainPlayerIsPlaying) {\n      mainAudioPlayerRef.current.pause();\n    }\n  }, [mainAudioPlayerRef, mainPlayerIsPlaying]);\n\n\n  useEffect(() => {\n    const audioEl = readingModeAudioRef.current;\n    if (audioEl && episodeAudioUrl) {\n      if (audioEl.src !== episodeAudioUrl) {\n        audioEl.src = episodeAudioUrl;\n        audioEl.load();\n      }\n      \n      const onCanPlay = () => {\n        if (!audioEl) return; \n        setIsLoadingAudio(false);\n        audioEl.currentTime = mainPlayerCurrentTime;\n        setRmCurrentTime(mainPlayerCurrentTime);\n        \n        if (mainPlayerIsPlaying) {\n          audioEl.play().then(() => {\n            if (audioEl) setRmIsPlaying(true);\n          }).catch(e => console.error(\"RM initial play error\", e));\n        } else {\n          audioEl.pause();\n          setRmIsPlaying(false);\n        }\n      };\n\n      audioEl.addEventListener('canplaythrough', onCanPlay, { once: true });\n      \n      return () => {\n        if (audioEl) {\n            audioEl.removeEventListener('canplaythrough', onCanPlay);\n            if (!audioEl.paused) {\n              audioEl.pause();\n            }\n        }\n      }\n    } else if (!episodeAudioUrl) {\n        setIsLoadingAudio(false); \n    }\n  }, [episodeAudioUrl, mainPlayerCurrentTime, mainPlayerIsPlaying]);\n\n\n  const handleRmPlayPause = useCallback(() => {\n    const audioEl = readingModeAudioRef.current;\n    if (audioEl) {\n      if (audioEl.paused) {\n        audioEl.play().then(() => {\n            if(audioEl) setRmIsPlaying(true);\n        }).catch(e => console.error(\"RM play error\", e));\n      } else {\n        audioEl.pause();\n        setRmIsPlaying(false);\n      }\n    }\n  }, []);\n\n  const handleRmSkip = useCallback((seconds) => {\n    const audioEl = readingModeAudioRef.current;\n    if (audioEl) {\n      const newTime = Math.max(0, Math.min(rmDuration || 0, audioEl.currentTime + seconds));\n      audioEl.currentTime = newTime;\n      setRmCurrentTime(newTime);\n    }\n  }, [rmDuration]);\n  \n  const handleRmSeek = useCallback((time, playAfterSeek = false) => {\n    const audioEl = readingModeAudioRef.current;\n    if (audioEl && !isNaN(time)) {\n      audioEl.currentTime = time;\n      setRmCurrentTime(time);\n      if (playAfterSeek && audioEl.paused) {\n        handleRmPlayPause();\n      }\n    }\n  }, [handleRmPlayPause]);\n\n  const handleSegmentClick = useCallback((timeInSeconds, segment) => {\n    handleRmSeek(timeInSeconds, true);\n  }, [handleRmSeek]);\n  \n  const handleCloseReadingMode = useCallback(() => {\n    if (readingModeAudioRef.current && !readingModeAudioRef.current.paused) {\n        readingModeAudioRef.current.pause();\n        setRmIsPlaying(false);\n    }\n    if (mainAudioPlayerRef?.current && mainAudioPlayerRef.current.paused && mainPlayerIsPlaying) {\n      mainAudioPlayerRef.current.play().catch(e => console.error(\"Error resuming main player:\", e));\n    }\n    onClose();\n  }, [onClose, mainAudioPlayerRef, mainPlayerIsPlaying]);\n\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (event.key === 'Escape') {\n        handleCloseReadingMode();\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [handleCloseReadingMode]);\n\n\n  return (\n    <>\n      <ReadingModeAudioPlayer\n        audioRef={readingModeAudioRef}\n        src={episodeAudioUrl} \n        onTimeUpdate={setRmCurrentTime}\n        onLoadedMetadata={setRmDuration}\n        onEnded={() => setRmIsPlaying(false)}\n        onIsPlayingChange={setRmIsPlaying}\n      />\n      <div className=\"fixed inset-0 z-[100] bg-white text-slate-900 font-serif overflow-y-auto reading-mode-active\">\n        <FloatingPlayerControlsReadingMode\n          episodeTitle={episodeData.displayTitle}\n          isPlaying={rmIsPlaying}\n          onPlayPause={handleRmPlayPause}\n          onSkipSeconds={handleRmSkip}\n          onClose={handleCloseReadingMode}\n          currentLanguage={currentLanguage}\n          audioRef={readingModeAudioRef} \n          isLoadingAudio={isLoadingAudio}\n        />\n        <div className=\"container mx-auto px-4 sm:px-6 md:px-8 pt-20 pb-8 max-w-3xl\">\n          <PlayerHeader \n            episodeTitle={episodeData.displayTitle}\n            episodeDate={null} \n            onNavigateBack={() => {}} \n            currentLanguage={currentLanguage} \n            isReadingMode={true}\n          />\n           {isLoadingAudio && (\n             <div className=\"flex flex-col items-center justify-center py-10\">\n                <Loader2 className=\"h-10 w-10 animate-spin text-purple-600\" />\n                <p className=\"mt-3 text-sm text-slate-600\">{getLocaleString('loadingAudio', currentLanguage)}</p>\n            </div>\n           )}\n          {!isLoadingAudio && (\n            <div className=\"reading-mode-content-text\">\n              <QuestionsManager\n                questions={episodeData.questions || []}\n                currentTime={rmCurrentTime}\n                duration={rmDuration}\n                onQuestionsChange={onQuestionsChange} \n                onQuestionJump={(time, id, playAfterJumpParam) => handleRmSeek(time, playAfterJumpParam)}\n                episodeSlug={episodeSlug}\n                episodeDate={episodeDate}\n                audioRef={readingModeAudioRef} \n                mainPlayerIsPlaying={rmIsPlaying}\n                mainPlayerTogglePlayPause={handleRmPlayPause}\n                mainPlayerSeekAudio={handleRmSeek}\n                currentLanguage={currentLanguage}\n                episodeLang={episodeData.lang || 'all'}\n                episodeAudioUrl={episodeAudioUrl}\n                jumpToQuestionId={episodeData?.jumpToQuestionId}\n                isBatchAddDisabled={true}\n                showTranscript={true} \n                user={user}\n                isReadingMode={true}\n                onSegmentClick={handleSegmentClick} \n                disableAutomaticCollapse={true}\n                readingModeEditingActive={false} \n                setReadingModeEditingSegmentRef={null} \n                onOpenSpeakerAssignmentDialog={onOpenSpeakerAssignmentDialog}\n                transcriptUtterances={internalTranscriptUtterances}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {segmentForSpeakerAssignment && (\n        <SpeakerAssignmentDialog\n          isOpen={isSpeakerAssignmentDialogOpen}\n          onClose={onCloseSpeakerAssignmentDialog}\n          segment={segmentForSpeakerAssignment}\n          allUtterances={internalTranscriptUtterances}\n          onSave={onSaveSpeakerAssignment}\n          currentLanguage={currentLanguage}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ReadingModeDisplay;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/SectionsManager.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Plus' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'Save' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":34},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Edit, Plus, Save, Trash2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/components/ui/use-toast';\n\nconst SectionsManager = ({ sections, currentTime, onSectionsChange, onSectionJump, formatTime, episodeId }) => {\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [currentSectionData, setCurrentSectionData] = useState(null);\n  const [isAddingSection, setIsAddingSection] = useState(false);\n  const { toast } = useToast();\n\n  const handleAddSection = () => {\n    setCurrentSectionData({\n      id: `temp-${Date.now()}`, \n      time: parseFloat(currentTime.toFixed(2)),\n      title: '',\n      description: ''\n    });\n    setIsAddingSection(true);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleEditSection = (section) => {\n    setCurrentSectionData({ ...section, time: parseFloat(section.time.toFixed(2)) });\n    setIsAddingSection(false);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSaveSection = () => {\n    if (!currentSectionData.title.trim()) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Название раздела не может быть пустым.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (isNaN(currentSectionData.time) || currentSectionData.time < 0) {\n       toast({\n        title: \"Ошибка\",\n        description: \"Время раздела указано неверно.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n\n    let updatedSections;\n    if (isAddingSection) {\n      const newSection = { ...currentSectionData, id: `${episodeId}-section-${Date.now()}`};\n      updatedSections = [...sections, newSection].sort((a, b) => a.time - b.time);\n    } else {\n      updatedSections = sections.map(s => \n        s.id === currentSectionData.id ? { ...currentSectionData } : s\n      ).sort((a,b) => a.time - b.time);\n    }\n\n    onSectionsChange(updatedSections);\n    setIsEditDialogOpen(false);\n    toast({\n      title: \"Раздел сохранен\",\n      description: `Раздел \"${currentSectionData.title}\" успешно сохранен.`,\n    });\n  };\n\n  const handleDeleteSection = (sectionId) => {\n    const updatedSections = sections.filter(s => s.id !== sectionId);\n    onSectionsChange(updatedSections);\n    setIsEditDialogOpen(false);\n     toast({\n      title: \"Раздел удален\",\n      description: \"Раздел успешно удален.\",\n    });\n  };\n  \n  const activeSection = sections\n    .filter(section => section.time <= currentTime)\n    .sort((a, b) => b.time - a.time)[0] || null;\n\n  return (\n    <>\n      <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3 md:p-4 mt-4 md:mt-6\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h3 className=\"font-semibold text-sm md:text-base\">Текущий раздел</h3>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={handleAddSection}\n            className=\"text-white hover:text-white/80 hover:bg-white/10 text-xs md:text-sm\"\n            aria-label=\"Добавить новый раздел\"\n          >\n            <Plus className=\"h-3.5 w-3.5 md:h-4 md:w-4 mr-1\" />\n            Добавить\n          </Button>\n        </div>\n        \n        {activeSection ? (\n          <div className=\"bg-white/5 rounded p-2 md:p-3\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <h4 className=\"font-medium text-sm md:text-base\">{activeSection.title}</h4>\n                <p className=\"text-xs md:text-sm text-white/80\">{formatTime(activeSection.time)}</p>\n                {activeSection.description && (\n                  <p className=\"text-xs mt-1 line-clamp-2\">{activeSection.description}</p>\n                )}\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                onClick={() => handleEditSection(activeSection)}\n                className=\"text-white hover:text-white/80 hover:bg-white/10 h-7 w-7 md:h-8 md:w-8\"\n                aria-label=\"Редактировать текущий раздел\"\n              >\n                <Edit className=\"h-3.5 w-3.5 md:h-4 md:w-4\" />\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <p className=\"text-white/70 text-xs md:text-sm\">Нет активного раздела. Добавьте новый.</p>\n        )}\n      </div>\n\n      <div className=\"mt-3 md:mt-4\">\n        <h3 className=\"font-semibold text-sm md:text-base mb-2\">Все разделы ({sections.length})</h3>\n        {sections.length > 0 ? (\n          <div className=\"space-y-1.5 md:space-y-2 max-h-48 md:max-h-60 overflow-y-auto pr-1 md:pr-2\">\n            {sections.map((section) => (\n              <div \n                key={section.id}\n                className={`p-2 rounded flex justify-between items-center cursor-pointer text-xs md:text-sm ${\n                  activeSection?.id === section.id \n                    ? 'bg-white/20' \n                    : 'bg-white/5 hover:bg-white/10'\n                }`}\n                onClick={() => onSectionJump(section.time)}\n                role=\"button\"\n                tabIndex={0}\n                onKeyPress={(e) => e.key === 'Enter' && onSectionJump(section.time)}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded\">\n                    {formatTime(section.time)}\n                  </div>\n                  <span className=\"font-medium line-clamp-1\">{section.title}</span>\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleEditSection(section);\n                  }}\n                  className=\"text-white/70 hover:text-white hover:bg-white/10 h-6 w-6 md:h-7 md:w-7\"\n                  aria-label={`Редактировать раздел ${section.title}`}\n                >\n                  <Edit className=\"h-3 w-3 md:h-3.5 md:w-3.5\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-white/70 text-xs md:text-sm\">Разделы еще не добавлены.</p>\n        )}\n      </div>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"bg-gray-900 border-gray-800 text-white sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>{isAddingSection ? 'Добавить раздел' : 'Редактировать раздел'}</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"section-time\" className=\"text-right col-span-1\">Время</Label>\n              <Input\n                id=\"section-time\"\n                type=\"number\"\n                step=\"0.01\"\n                value={currentSectionData?.time || ''}\n                onChange={(e) => setCurrentSectionData({\n                  ...currentSectionData,\n                  time: parseFloat(e.target.value)\n                })}\n                className=\"bg-gray-800 border-gray-700 col-span-3\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"section-title\" className=\"text-right col-span-1\">Название</Label>\n              <Input\n                id=\"section-title\"\n                value={currentSectionData?.title || ''}\n                onChange={(e) => setCurrentSectionData({\n                  ...currentSectionData,\n                  title: e.target.value\n                })}\n                className=\"bg-gray-800 border-gray-700 col-span-3\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"section-description\" className=\"text-right col-span-1\">Описание</Label>\n              <Input\n                id=\"section-description\"\n                value={currentSectionData?.description || ''}\n                onChange={(e) => setCurrentSectionData({\n                  ...currentSectionData,\n                  description: e.target.value\n                })}\n                className=\"bg-gray-800 border-gray-700 col-span-3\"\n              />\n            </div>\n          </div>\n          \n          <DialogFooter className=\"flex flex-col sm:flex-row justify-between mt-2\">\n            {!isAddingSection && currentSectionData && (\n              <Button \n                variant=\"destructive\" \n                onClick={() => handleDeleteSection(currentSectionData.id)}\n                className=\"w-full sm:w-auto mb-2 sm:mb-0\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-1\" />\n                Удалить\n              </Button>\n            )}\n            <Button onClick={handleSaveSection} className=\"w-full sm:w-auto sm:ml-auto\">\n              <Save className=\"h-4 w-4 mr-1\" />\n              Сохранить\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n};\n\nexport default SectionsManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/UnifiedPlayerControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Play' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Pause' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCw' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'currentTime' is defined but never used. Allowed unused args must match /^_/u.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Play, Pause, RotateCcw, RotateCw } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst UnifiedPlayerControls = ({ \n  // Audio element props\n  audioRef, \n  episodeAudioUrl, \n  onTimeUpdate, \n  onLoadedMetadata, \n  onEnded, \n  onDurationChange, \n  onError,\n  playbackRate,\n  \n  // Control props\n  isPlaying, \n  onPlayPause, \n  onSkip, \n  variant = \"default\",\n  onAdjustTime,\n  seekAudio,\n  currentTime, \n  mainPlayerIsPlaying, \n  mainPlayerTogglePlayPause, \n  mainPlayerSeekAudio,\n  audioRefCurrentTime, \n  playerDuration \n}) => {\n  // Audio element effect\n  React.useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.playbackRate = playbackRate;\n    }\n  }, [playbackRate, audioRef]);\n\n  const controlSize = variant === \"compact\" ? \"h-10 w-10 md:h-11 md:w-11\" : \"h-11 w-11 md:h-13 md:w-13\";\n  const iconSize = variant === \"compact\" ? \"h-5 w-5 md:h-5 md:w-5\" : \"h-5 w-5 md:h-6 md:w-6\";\n  const mainButtonSize = variant === \"compact\" ? \"h-14 w-14 md:h-16 md:w-16\" : \"h-16 w-16 md:h-18 md:w-18\";\n  const mainIconSize = variant === \"compact\" ? \"h-7 w-7 md:h-8 md:w-8\" : \"h-8 w-8 md:h-9 md:w-9\";\n\n  if (variant === \"timeAdjustment\") {\n    const handleTimeAdjustAndPlay = (amount) => {\n      const currentAudioTime = audioRefCurrentTime ?? 0;\n      const duration = playerDuration ?? Infinity;\n      const newTime = Math.max(0, Math.min(duration, currentAudioTime + amount));\n      \n      if (onAdjustTime) { \n         onAdjustTime(amount); \n      } else if (mainPlayerSeekAudio) { \n         mainPlayerSeekAudio(newTime, true); \n      } else if (seekAudio) {\n         seekAudio(newTime, true);\n      }\n    };\n\n    return (\n      <>\n        {/* Hidden audio element */}\n        <audio \n          ref={audioRef}\n          onTimeUpdate={onTimeUpdate}\n          onLoadedMetadata={onLoadedMetadata}\n          onEnded={onEnded}\n          onDurationChange={onDurationChange} \n          onError={onError}\n          src={episodeAudioUrl} \n        />\n        \n        {/* Time adjustment controls */}\n        <div className=\"flex items-center justify-center gap-1\">\n          <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(-10)}>\n            <RotateCcw className=\"h-3.5 w-3.5 mr-1\" /> -10s\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(-1)}>\n            <RotateCcw className=\"h-3.5 w-3.5 mr-1\" /> -1s\n          </Button>\n          <Button variant=\"outline\" size=\"icon\" className=\"h-8 w-8 bg-white/10 hover:bg-white/20 border-white/20\" \n            onClick={() => {\n               if (mainPlayerTogglePlayPause) mainPlayerTogglePlayPause(); \n               else if (onPlayPause) onPlayPause(); \n            }}>\n            {(mainPlayerIsPlaying !== undefined ? mainPlayerIsPlaying : isPlaying) ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(1)}>\n            +1s <RotateCw className=\"h-3.5 w-3.5 ml-1\" />\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" className=\"px-2 py-1 h-auto bg-white/10 hover:bg-white/20 border-white/20\" onClick={() => handleTimeAdjustAndPlay(10)}>\n            +10s <RotateCw className=\"h-3.5 w-3.5 ml-1\" />\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <>\n      {/* Hidden audio element */}\n      <audio \n        ref={audioRef}\n        onTimeUpdate={onTimeUpdate}\n        onLoadedMetadata={onLoadedMetadata}\n        onEnded={onEnded}\n        onDurationChange={onDurationChange} \n        onError={onError}\n        src={episodeAudioUrl} \n      />\n      \n      {/* Main player controls */}\n      <div className={`flex items-center justify-center gap-2 md:gap-2.5 ${variant === \"compact\" ? \"my-0\" : \"\"}`}>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={() => onSkip(-10)}\n          className={`text-white hover:text-white/80 hover:bg-white/15 ${controlSize}`}\n          aria-label=\"Перемотать назад на 10 секунд\"\n        >\n          <RotateCcw className={iconSize} />\n        </Button>\n        \n        <Button \n          variant=\"default\" \n          size=\"icon\"\n          onClick={onPlayPause}\n          className={`bg-white text-blue-700 hover:bg-white/90 rounded-full flex items-center justify-center shadow-lg ${mainButtonSize}`}\n          aria-label={isPlaying ? \"Пауза\" : \"Воспроизвести\"}\n        >\n          {isPlaying ? <Pause className={mainIconSize} /> : <Play className={`${mainIconSize}`} />}\n        </Button>\n        \n        <Button \n          variant=\"ghost\" \n          size=\"icon\"\n          onClick={() => onSkip(10)}\n          className={`text-white hover:text-white/80 hover:bg-white/10 ${controlSize}`}\n          aria-label=\"Перемотать вперед на 10 секунд\"\n        >\n          <RotateCw className={iconSize} />\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport default UnifiedPlayerControls; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/player_parts/AudioElement.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/player_parts/PlayerHeader.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'episodeDate' is defined but never used. Allowed unused args must match /^_/u.","line":7,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ArrowLeft } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { getLocaleString } from '@/lib/locales';\nimport { Link } from 'react-router-dom';\n\nconst PlayerHeader = ({ episodeTitle, episodeDate, onNavigateBack, currentLanguage, isReadingMode }) => {\n  const logoUrl = \"https://dosmundos.pe/wp-content/uploads/2025/02/logo-5-120x120.png\";\n\n  return (\n    <div className=\"relative flex items-center justify-center mb-3 sm:mb-4\">\n      {!isReadingMode && (\n        onNavigateBack ? (\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onNavigateBack} \n            className=\"text-slate-300 hover:text-white hover:bg-white/10 absolute left-0 top-1/2 -translate-y-1/2 ml-1 shrink-0\"\n            aria-label={getLocaleString('backToEpisodesShort', currentLanguage)}\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </Button>\n        ) : (\n          <Link to=\"/episodes\" className=\"absolute left-0 top-1/2 -translate-y-1/2 p-1 rounded-md hover:bg-white/10 transition-colors shrink-0\" aria-label={getLocaleString('backToEpisodes', currentLanguage)}>\n            <img src={logoUrl} alt=\"Dos Mundos Logo\" className=\"h-8 w-8 rounded-sm\" />\n          </Link>\n        )\n      )}\n      <div className=\"flex-grow text-center\">\n        <h1 \n          className={`font-bold truncate ${isReadingMode ? 'text-3xl text-slate-900' : 'text-xl sm:text-2xl text-white'}`} \n          title={episodeTitle}\n        >\n          {episodeTitle}\n        </h1>\n      </div>\n      {!isReadingMode && onNavigateBack && <div className=\"w-8 shrink-0\"></div>}\n    </div>\n  );\n};\n\nexport default PlayerHeader;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/player_parts/PlayerSettingsMenu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenu' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuCheckboxItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuLabel' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuSeparator' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuTrigger' is defined but never used. Allowed unused vars must match /^React$/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuRadioGroup' is defined but never used. Allowed unused vars must match /^React$/u.","line":11,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'DropdownMenuRadioItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Settings' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'ScrollText' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'Download' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'SkipForward' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'PlusCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":65},{"ruleId":"no-unused-vars","severity":1,"message":"'Gauge' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":67,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":72}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React from 'react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from '@/components/ui/button';\nimport { Settings, ScrollText, Download, SkipForward, PlusCircle, Gauge } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst PlayerSettingsMenu = ({\n  currentLanguage,\n  showTranscript,\n  onToggleShowTranscript,\n  skipEmptySegments,\n  onToggleSkipEmptySegments,\n  onDownloadAudio,\n  isCompact = false,\n  playbackRateOptions,\n  currentPlaybackRateValue,\n  onSetPlaybackRate,\n}) => {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size={isCompact ? \"icon_sm\" : \"icon\"} \n          className={`text-white/80 hover:text-white hover:bg-white/15 ${isCompact ? 'h-8 w-8' : 'h-9 w-9 sm:h-10 sm:w-10 md:h-11 md:w-11'}`}\n          aria-label={getLocaleString('settings', currentLanguage)}\n        >\n          <Settings className={isCompact ? \"h-4 w-4\" : \"h-4 w-4 sm:h-5 sm:w-5 md:h-5 md:w-5\"} />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"w-60 bg-slate-800 border-slate-700 text-slate-100 shadow-xl\" side=\"top\" align=\"start\">\n        <DropdownMenuLabel className=\"text-purple-300\">{getLocaleString('settings', currentLanguage)}</DropdownMenuLabel>\n        <DropdownMenuSeparator className=\"bg-slate-700\" />\n        \n        <DropdownMenuCheckboxItem\n          checked={showTranscript}\n          onCheckedChange={onToggleShowTranscript}\n          className=\"focus:bg-slate-700 data-[state=checked]:bg-purple-600/30\"\n        >\n          <ScrollText className=\"mr-2 h-4 w-4 text-purple-300\" />\n          <span>{getLocaleString('showTranscript', currentLanguage)}</span>\n        </DropdownMenuCheckboxItem>\n\n        <DropdownMenuCheckboxItem\n          checked={skipEmptySegments}\n          onCheckedChange={onToggleSkipEmptySegments}\n          className=\"focus:bg-slate-700 data-[state=checked]:bg-purple-600/30\"\n        >\n          <SkipForward className=\"mr-2 h-4 w-4 text-purple-300\" />\n          <span>{getLocaleString('skipEmptySegments', currentLanguage)}</span>\n        </DropdownMenuCheckboxItem>\n        \n        <DropdownMenuSeparator className=\"bg-slate-700\" />\n\n        <DropdownMenuLabel className=\"text-purple-300 flex items-center\">\n            <Gauge className=\"mr-2 h-4 w-4\" />\n            {getLocaleString('playbackSpeed', currentLanguage)}\n        </DropdownMenuLabel>\n        <DropdownMenuRadioGroup value={String(currentPlaybackRateValue)} onValueChange={(value) => onSetPlaybackRate(parseFloat(value))}>\n            {playbackRateOptions.map(option => (\n                <DropdownMenuRadioItem \n                    key={option.value} \n                    value={String(option.value)}\n                    className=\"focus:bg-slate-700 data-[state=checked]:bg-purple-600/30\"\n                >\n                    {option.label}\n                </DropdownMenuRadioItem>\n            ))}\n        </DropdownMenuRadioGroup>\n\n        <DropdownMenuSeparator className=\"bg-slate-700\" />\n\n        <DropdownMenuItem onClick={onDownloadAudio} className=\"focus:bg-slate-700\">\n          <Download className=\"mr-2 h-4 w-4 text-purple-300\" />\n          <span>{getLocaleString('downloadAudio', currentLanguage)}</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n\nexport default PlayerSettingsMenu;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/player_parts/PlayerUIControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'PlusCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'ProgressBar' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerSettingsMenu' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'episodeDate' is defined but never used. Allowed unused args must match /^_/u.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { ChevronLeft, ChevronRight, PlusCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport PlayerControls from '@/components/player/PlayerControls';\nimport ProgressBar from '@/components/player/ProgressBar';\nimport { formatFullTime } from '@/lib/utils';\nimport { getLocaleString } from '@/lib/locales';\nimport PlayerSettingsMenu from './PlayerSettingsMenu';\n\nconst PlayerUIControls = React.memo(({ \n  activeQuestionTitle, \n  isPlaying, \n  currentLanguage, \n  currentTime, \n  duration, \n  onProgressChange, \n  questions, \n  onQuestionSelectJump, \n  onNavigateQuestion, \n  onTogglePlayPause,\n  onSkip,\n  playerControlsContainerRef,\n  showTranscript,\n  onToggleShowTranscript,\n  skipEmptySegments,\n  onToggleSkipEmptySegments,\n  onDownloadAudio,\n  playbackRateOptions,\n  currentPlaybackRateValue,\n  onSetPlaybackRate,\n  onOpenAddQuestionDialog,\n  episodeDate\n}) => {\n  \n  return (\n    <div ref={playerControlsContainerRef} className=\"w-full flex flex-col items-center justify-center\">\n      <div className=\"w-full flex flex-col items-center justify-center px-1 sm:px-1.5\">\n        <div className=\"h-5 text-center mb-1 text-xs sm:text-sm text-white truncate px-1 w-full flex items-center justify-center\">\n          {activeQuestionTitle || (isPlaying ? getLocaleString('nowPlaying', currentLanguage) : getLocaleString('paused', currentLanguage))}\n        </div>\n        <div className=\"w-full flex flex-col items-center justify-center\">\n          <ProgressBar \n            currentTime={currentTime}\n            duration={duration}\n            sections={questions}\n            onProgressChange={onProgressChange}\n            onSectionJump={(time, id) => onQuestionSelectJump(time, id, true)}\n          />\n          <div className=\"flex justify-between text-xs mt-1 text-white/80 px-1 w-full max-w-full\">\n            <span>{formatFullTime(currentTime, true)}</span>\n            <span>{formatFullTime(duration, true)}</span>\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-2.5 flex flex-col items-center gap-1.5 md:gap-2.5\">\n        <div className=\"flex items-center justify-center w-full gap-1.5 sm:gap-2 md:gap-2.5\">\n          <PlayerSettingsMenu\n            currentLanguage={currentLanguage}\n            showTranscript={showTranscript}\n            onToggleShowTranscript={onToggleShowTranscript}\n            skipEmptySegments={skipEmptySegments}\n            onToggleSkipEmptySegments={onToggleSkipEmptySegments}\n            onDownloadAudio={onDownloadAudio}\n            playbackRateOptions={playbackRateOptions}\n            currentPlaybackRateValue={currentPlaybackRateValue}\n            onSetPlaybackRate={onSetPlaybackRate}\n            isCompact={false}\n          />\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => onNavigateQuestion(-1)} className=\"text-white/80 hover:text-white hover:bg-white/15 h-9 w-9 sm:h-10 sm:w-10 md:h-11 md:w-11\" aria-label={getLocaleString('previousQuestion', currentLanguage)}>\n            <ChevronLeft className=\"h-5 w-5 sm:h-5 sm:w-5 md:h-6 md:w-6\" />\n          </Button>\n          <PlayerControls\n            isPlaying={isPlaying}\n            onPlayPause={onTogglePlayPause}\n            onSkip={onSkip}\n            variant=\"compact\"\n            currentLanguage={currentLanguage}\n          />\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => onNavigateQuestion(1)} className=\"text-white/80 hover:text-white hover:bg-white/15 h-9 w-9 sm:h-10 sm:w-10 md:h-11 md:w-11\" aria-label={getLocaleString('nextQuestion', currentLanguage)}>\n            <ChevronRight className=\"h-5 w-5 sm:h-5 sm:w-5 md:h-6 md:w-6\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onOpenAddQuestionDialog}\n            className=\"text-white/80 hover:text-white hover:bg-white/15 h-9 w-9 sm:h-10 sm:w-10 md:h-11 md:w-11\" \n            aria-label={getLocaleString('addQuestion', currentLanguage)}\n          >\n            <PlusCircle className=\"h-4 w-4 sm:h-5 sm:w-5 md:h-5 md:w-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n});\n\nexport default PlayerUIControls;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/AddQuestionFromSegmentDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Save' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'audioRef' is defined but never used. Allowed unused args must match /^_/u.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"no-unused-vars","severity":1,"message":"'isTimeInputFocused' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Save } from 'lucide-react';\nimport PlayerControls from '@/components/player/PlayerControls.jsx';\nimport { formatFullTime } from '@/lib/utils';\nimport { getLocaleString } from '@/lib/locales';\n\nconst AddQuestionFromSegmentDialog = ({\n  isOpen,\n  onClose,\n  segment,\n  onSave,\n  currentLanguage,\n  audioRef,\n  mainPlayerIsPlaying,\n  mainPlayerTogglePlayPause,\n  mainPlayerSeekAudio,\n  duration,\n}) => {\n  const [questionTitle, setQuestionTitle] = useState('');\n  const [questionTime, setQuestionTime] = useState(0);\n  const [isTimeInputFocused, setIsTimeInputFocused] = useState(false);\n\n  useEffect(() => {\n    if (segment) {\n      setQuestionTime(segment.start / 1000);\n      setQuestionTitle(''); \n    }\n  }, [segment]);\n\n  const handleSave = () => {\n    if (!questionTitle.trim()) return;\n    onSave(questionTitle, questionTime);\n  };\n\n  const handleDialogTimeInputChange = (e) => {\n    const parts = e.target.value.split(':').map(Number);\n    let newTimeValue = 0;\n    if (parts.length === 3) newTimeValue = parts[0]*3600 + parts[1]*60 + parts[2];\n    else if (parts.length === 2) newTimeValue = parts[0]*60 + parts[1];\n    else if (parts.length === 1 && !isNaN(parts[0])) newTimeValue = parts[0];\n    else { setQuestionTime(NaN); return; }\n\n    if (!isNaN(newTimeValue) && newTimeValue >= 0 && newTimeValue <= (duration || Infinity)) {\n        setQuestionTime(newTimeValue);\n        if (mainPlayerSeekAudio) mainPlayerSeekAudio(newTimeValue, false); \n    } else if (e.target.value === \"\") {\n        setQuestionTime(0); \n    }\n  };\n  \n  const handleDialogTimeAdjust = (amount) => {\n    const newTime = Math.max(0, Math.min(duration || Infinity, questionTime + amount));\n    setQuestionTime(newTime);\n    if (mainPlayerSeekAudio) mainPlayerSeekAudio(newTime, true); \n  };\n\n  if (!segment) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-slate-900 border-slate-800 text-white sm:max-w-md shadow-2xl rounded-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-purple-300\">\n            {getLocaleString('addQuestionDialogTitle', currentLanguage)}\n          </DialogTitle>\n          <DialogDescription className=\"text-sm text-slate-400\">\n            {getLocaleString('addQuestionDialogDescriptionSegment', currentLanguage, {segmentText: segment.text.substring(0, 70) + \"...\"})}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-5 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"qfs-time\" className=\"text-slate-300 font-medium\">{getLocaleString('questionTime', currentLanguage)}</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input \n                id=\"qfs-time\" \n                type=\"text\" \n                value={formatFullTime(questionTime, true)} \n                onFocus={() => setIsTimeInputFocused(true)} \n                onBlur={() => setIsTimeInputFocused(false)} \n                onChange={handleDialogTimeInputChange} \n                className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500 col-span-3 tabular-nums\" \n                placeholder=\"HH:MM:SS\" \n              />\n            </div>\n            <PlayerControls \n              variant=\"timeAdjustment\" \n              isPlaying={mainPlayerIsPlaying} \n              onPlayPause={mainPlayerTogglePlayPause} \n              onAdjustTime={handleDialogTimeAdjust} \n              currentTime={questionTime} \n              mainPlayerSeekAudio={mainPlayerSeekAudio} \n              currentLanguage={currentLanguage}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"qfs-title\" className=\"text-slate-300 font-medium\">{getLocaleString('questionTitle', currentLanguage)}</Label>\n            <Input \n              id=\"qfs-title\" \n              value={questionTitle} \n              onChange={(e) => setQuestionTitle(e.target.value)} \n              className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500\" \n              placeholder={getLocaleString('questionTitlePlaceholder', currentLanguage)}\n            />\n          </div>\n        </div>\n        <DialogFooter className=\"flex flex-col-reverse sm:flex-row justify-end items-center mt-4 pt-4 border-t border-slate-700/50\">\n          <Button variant=\"outline\" onClick={onClose} className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300 w-full sm:w-auto mb-2 sm:mb-0 sm:mr-2\">{getLocaleString('cancel', currentLanguage)}</Button>\n          <Button onClick={handleSave} className=\"bg-purple-600 hover:bg-purple-700 text-white font-semibold w-full sm:w-auto\"><Save className=\"h-4 w-4 mr-2\" />{getLocaleString('saveQuestion', currentLanguage)}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AddQuestionFromSegmentDialog;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/BatchAddQuestionsDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'ListPlus' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'episodeDate' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":14}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { ListPlus } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport { parseQuestionsFromDescriptionString } from '@/lib/podcastService.js';\n\nconst BatchAddQuestionsDialog = ({\n  isOpen,\n  onClose,\n  batchQuestionsText,\n  onBatchQuestionsTextChange,\n  onSave,\n  currentLanguage,\n  episodeLang,\n  episodeSlug, // Changed from episodeId\n  episodeDate, // Changed from episodeParsedDate\n}) => {\n  const handleProcessAndAdd = () => {\n    if (!batchQuestionsText.trim()) return;\n    const parsed = parseQuestionsFromDescriptionString(batchQuestionsText, episodeLang, episodeSlug);\n    onSave(parsed);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-slate-900 border-slate-800 text-white sm:max-w-lg shadow-2xl rounded-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-purple-300\">{getLocaleString('batchAddQuestionsDialogTitle', currentLanguage)}</DialogTitle>\n          <DialogDescription className=\"text-sm text-slate-400\">\n            {getLocaleString('batchAddQuestionsDialogDescription', currentLanguage)}\n            <pre className=\"mt-2 p-2 bg-slate-800/50 rounded text-xs text-slate-300 whitespace-pre-wrap\">{`00:00:57 ${getLocaleString('bilingualExamplePart1', currentLanguage)} / ${getLocaleString('bilingualExamplePart2', currentLanguage)}\\n0:03:17 ${getLocaleString('singleLanguageExample', currentLanguage)}`}</pre>\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-5 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"batch-questions-text-dialog\" className=\"text-slate-300 font-medium\">{getLocaleString('pasteQuestionsList', currentLanguage)}</Label>\n            <Textarea \n              id=\"batch-questions-text-dialog\" \n              value={batchQuestionsText} \n              onChange={(e) => onBatchQuestionsTextChange(e.target.value)} \n              className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500 min-h-[150px] text-sm\" \n              placeholder={getLocaleString('batchAddPlaceholder', currentLanguage)}\n            />\n          </div>\n        </div>\n        <DialogFooter className=\"flex flex-col-reverse sm:flex-row justify-end items-center mt-4 pt-4 border-t border-slate-700/50\">\n          <Button variant=\"outline\" onClick={onClose} className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300 w-full sm:w-auto mb-2 sm:mb-0 sm:mr-2\">{getLocaleString('cancel', currentLanguage)}</Button>\n          <Button onClick={handleProcessAndAdd} className=\"bg-purple-600 hover:bg-purple-700 text-white font-semibold w-full sm:w-auto\"><ListPlus className=\"h-4 w-4 mr-2\" />{getLocaleString('processAndAdd', currentLanguage)}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default BatchAddQuestionsDialog;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/EditConfirmationDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogCancel' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":103},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":105,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":122},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":124,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":141},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":143,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":159},{"ruleId":"no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { getLocaleString } from '@/lib/locales';\n\nconst EditConfirmationDialog = ({\n  isOpen,\n  onOpenChange,\n  title,\n  description,\n  onConfirm,\n  onCancel,\n  actionType,\n  currentLanguage,\n}) => {\n  const dontAskAgainKey = `confirm${actionType}SegmentDisabled`;\n\n  const handleCheckedChange = (checked) => {\n    localStorage.setItem(dontAskAgainKey, checked.toString());\n  };\n  \n  const isDontAskAgainChecked = localStorage.getItem(dontAskAgainKey) === 'true';\n\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent className=\"bg-slate-900 border-slate-800 text-white\">\n        <AlertDialogHeader>\n          <AlertDialogTitle className={\n            actionType === 'Delete' ? 'text-red-500' : \n            actionType === 'Merge' ? 'text-orange-400' :\n            actionType === 'Split' ? 'text-blue-400' : 'text-slate-50'\n          }>{title}</AlertDialogTitle>\n          <AlertDialogDescription className=\"text-slate-300\">{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <div className=\"flex items-center space-x-2 my-4\">\n          <Checkbox \n            id={`dont-ask-${actionType}`} \n            checked={isDontAskAgainChecked}\n            onCheckedChange={handleCheckedChange}\n            className={\n                actionType === 'Delete' ? 'border-slate-600 data-[state=checked]:bg-red-600 data-[state=checked]:text-white' :\n                actionType === 'Merge' ? 'border-slate-600 data-[state=checked]:bg-orange-500 data-[state=checked]:text-white' :\n                actionType === 'Split' ? 'border-slate-600 data-[state=checked]:bg-blue-500 data-[state=checked]:text-white' :\n                'border-slate-600 data-[state=checked]:bg-purple-600 data-[state=checked]:text-white'\n            }\n          />\n          <label\n            htmlFor={`dont-ask-${actionType}`}\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-slate-300\"\n          >\n            {getLocaleString('doNotAskAgain', currentLanguage)}\n          </label>\n        </div>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onCancel} className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300\">{getLocaleString('cancel', currentLanguage)}</AlertDialogCancel>\n          <AlertDialogAction \n            onClick={onConfirm} \n            className={\n                actionType === 'Delete' ? 'bg-red-600 hover:bg-red-700 text-white' : \n                actionType === 'Merge' ? 'bg-orange-600 hover:bg-orange-700 text-white' :\n                actionType === 'Split' ? 'bg-blue-600 hover:bg-blue-700 text-white' :\n                'bg-purple-600 hover:bg-purple-700 text-white'\n            }\n          >\n            {getLocaleString('confirm', currentLanguage) || 'Confirm'}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nexport default EditConfirmationDialog;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/EditQuestionDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Save' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'onDialogTimeChange' is defined but never used. Allowed unused args must match /^_/u.","line":20,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'onQuestionLangChange' is defined but never used. Allowed unused args must match /^_/u.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'isTimeInputFocused' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Save, Trash2 } from 'lucide-react';\nimport PlayerControls from '@/components/player/PlayerControls.jsx';\nimport { formatFullTime } from '@/lib/utils';\nimport { getLocaleString } from '@/lib/locales';\n\nconst EditQuestionDialog = ({\n  isOpen,\n  onClose,\n  questionData,\n  onSave,\n  onDelete,\n  isAdding,\n  dialogTime: externalDialogTime,\n  onDialogTimeChange,\n  onDialogTimeAdjust,\n  onDialogTimeInputChange,\n  questionLang: externalQuestionLang,\n  onQuestionLangChange,\n  currentLanguage,\n  duration,\n  mainPlayerIsPlaying,\n  mainPlayerTogglePlayPause,\n  mainPlayerSeekAudio,\n}) => {\n  const [internalTitle, setInternalTitle] = useState('');\n  const [isTimeInputFocused, setIsTimeInputFocused] = useState(false);\n  \n  const isSpecialBlock = questionData?.is_intro || questionData?.is_full_transcript || questionData?.id === 'intro-virtual';\n\n  useEffect(() => {\n    setInternalTitle(questionData?.title || '');\n  }, [questionData?.id, questionData?.title, isAdding]);\n\n  const handleSave = () => {\n    if (!internalTitle.trim() && !isSpecialBlock) return; \n    \n    let timeToSave = parseFloat(externalDialogTime.toFixed(2));\n    if (isSpecialBlock) {\n      timeToSave = questionData.time; \n    }\n\n    if (isNaN(timeToSave) || timeToSave < 0 || timeToSave > duration) return;\n    \n    onSave({ \n      ...questionData, \n      title: internalTitle, \n      time: timeToSave, \n      lang: externalQuestionLang,\n      is_intro: questionData?.is_intro || false,\n      is_full_transcript: questionData?.is_full_transcript || false\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-slate-900 border-slate-800 text-white sm:max-w-md shadow-2xl rounded-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-purple-300\">\n            {isAdding ? getLocaleString('addQuestionDialogTitle', currentLanguage) : getLocaleString('editQuestionDialogTitle', currentLanguage)}\n          </DialogTitle>\n          <DialogDescription className=\"text-sm text-slate-400\">\n            {isAdding ? getLocaleString('addQuestionDialogDescription', currentLanguage) : getLocaleString('editQuestionDialogDescription', currentLanguage)}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-5 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"question-time-dialog\" className=\"text-slate-300 font-medium\">{getLocaleString('questionTime', currentLanguage)}</Label>\n            <div className=\"flex items-center gap-2\">\n              <Input \n                id=\"question-time-dialog\" \n                type=\"text\" \n                value={formatFullTime(externalDialogTime, true)} \n                onFocus={() => setIsTimeInputFocused(true)} \n                onBlur={() => setIsTimeInputFocused(false)} \n                onChange={onDialogTimeInputChange} \n                className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500 col-span-3 tabular-nums\" \n                placeholder=\"HH:MM:SS\" \n                disabled={isSpecialBlock}\n              />\n            </div>\n            {!isSpecialBlock && (\n              <PlayerControls \n                variant=\"timeAdjustment\" \n                isPlaying={mainPlayerIsPlaying} \n                onPlayPause={mainPlayerTogglePlayPause} \n                onAdjustTime={onDialogTimeAdjust} \n                currentTime={externalDialogTime} \n                mainPlayerSeekAudio={mainPlayerSeekAudio} \n                currentLanguage={currentLanguage}\n              />\n            )}\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"question-title-dialog\" className=\"text-slate-300 font-medium\">{getLocaleString('questionTitle', currentLanguage)}</Label>\n            <Input \n              id=\"question-title-dialog\" \n              value={internalTitle} \n              onChange={(e) => setInternalTitle(e.target.value)} \n              className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500\" \n              placeholder={getLocaleString('questionTitlePlaceholder', currentLanguage)}\n            />\n          </div>\n        </div>\n        <DialogFooter className=\"flex flex-col-reverse sm:flex-row justify-between items-center mt-4 pt-4 border-t border-slate-700/50\">\n          {!isAdding && questionData && questionData.id && !isSpecialBlock && (\n            <Button variant=\"destructive\" onClick={() => onDelete(questionData.id)} className=\"w-full sm:w-auto mb-2 sm:mb-0 bg-red-600 hover:bg-red-700 text-white font-semibold\">\n              <Trash2 className=\"h-4 w-4 mr-2\" />{getLocaleString('deleteQuestion', currentLanguage)}\n            </Button>\n          )}\n           <div className={`w-full sm:w-auto ${(!isAdding && questionData && questionData.id && !isSpecialBlock) ? 'sm:ml-auto' : 'ml-auto'} flex gap-2`}>\n            <Button variant=\"outline\" onClick={onClose} className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300 w-full sm:w-auto\">{getLocaleString('cancel', currentLanguage)}</Button>\n            <Button onClick={handleSave} className=\"bg-purple-600 hover:bg-purple-700 text-white font-semibold w-full sm:w-auto\"><Save className=\"h-4 w-4 mr-2\" />{getLocaleString('saveQuestion', currentLanguage)}</Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default EditQuestionDialog;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/QuestionBlock.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronUp' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":47},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'EditConfirmationDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'SegmentList' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'QuestionBlockHeader' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":10,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'setEditingSegment' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":107,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'textareaRef' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":112,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":112,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Edit, ChevronDown, ChevronUp, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { getLocaleString } from '@/lib/locales';\nimport { formatFullTime } from '@/lib/utils';\nimport EditConfirmationDialog from '@/components/player/questions_manager_parts/EditConfirmationDialog.jsx';\nimport SegmentList from '@/components/player/questions_manager_parts/SegmentList.jsx';\nimport useSegmentEditing from '@/hooks/useSegmentEditing.js';\n\nconst QuestionBlockHeader = ({ \n  question, \n  isActiveQuestion, \n  isExpanded, \n  editingSegment,\n  onActivate, \n  onToggleExpansion, \n  onEditQuestion, \n  currentLanguage,\n  segmentsAvailable,\n  isReadingMode\n}) => (\n  <div \n    className={`flex justify-between items-center p-1.5 rounded-t-md transition-colors\n      ${isReadingMode ? 'cursor-default' : 'cursor-pointer hover:bg-slate-700/20'}\n      ${isActiveQuestion && !isReadingMode ? 'bg-purple-600/15' : ''}\n      ${isReadingMode ? 'mb-1 pb-2' : ''} \n    `}\n    onClick={isReadingMode ? undefined : onActivate}\n    role={isReadingMode ? undefined : \"button\"}\n    tabIndex={isReadingMode ? undefined : 0}\n    onKeyPress={(e) => { if(e.key === 'Enter' && !isReadingMode) { onActivate() } }}\n  >\n    <div className=\"flex items-center gap-2 overflow-hidden\">\n        {!isReadingMode && (\n          <div className={`text-white text-xs px-1.5 py-0.5 rounded tabular-nums ${isActiveQuestion ? 'bg-purple-500' : 'bg-blue-500/70'}`}>\n            {formatFullTime(question.time, true)}\n          </div>\n        )}\n      <span className={`font-medium line-clamp-1 flex-grow min-w-0 ${isReadingMode ? 'text-xl font-semibold text-slate-900' : 'text-sm text-slate-100'}`}>\n        {question.title || getLocaleString('untitledQuestion', currentLanguage)}\n      </span>\n    </div>\n    {!isReadingMode && (\n      <div className=\"flex items-center shrink-0\">\n        {!editingSegment && segmentsAvailable && (\n            <Button \n                variant=\"ghost\" \n                size=\"icon_sm\" \n                onClick={(e) => {e.stopPropagation(); onToggleExpansion();}}\n                className=\"text-slate-300 hover:text-white hover:bg-white/15 h-7 w-7\"\n                aria-label={isExpanded ? getLocaleString('hide', currentLanguage) : getLocaleString('showText', currentLanguage)}\n            >\n                {isExpanded ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\n            </Button>\n        )}\n        {!editingSegment && (\n          <Button \n            variant=\"ghost\" \n            size=\"icon_sm\" \n            onClick={(e) => {\n              e.stopPropagation();\n              if(onEditQuestion) onEditQuestion(question);\n            }}\n            className=\"text-slate-300 hover:text-white hover:bg-white/15 h-7 w-7\"\n            aria-label={`${getLocaleString('editQuestion', currentLanguage)} ${question.title}`}\n          >\n            <Edit className=\"h-3.5 w-3.5\" />\n          </Button>\n        )}\n      </div>\n    )}\n  </div>\n);\n\n\nconst QuestionBlock = React.memo(({\n  question,\n  segments,\n  isActiveQuestion,\n  isJumpTarget,\n  isExpanded,\n  onToggleExpansion,\n  onActivate,\n  onEditQuestion,\n  currentLanguage,\n  onSegmentClick,\n  audioRef,\n  onSaveEditedSegment, \n  activeSegmentTime,\n  onAddQuestionFromSegment,\n  utterances,\n  mainPlayerIsPlaying,\n  showTranscript,\n  user,\n  episodeSlug,\n  isReadingMode,\n  readingModeEditingActive,\n  setReadingModeEditingSegmentRef,\n  onOpenSpeakerAssignmentDialog,\n  segmentToHighlight,\n  transcriptLoading\n}) => {\n  const [visibleSegmentsCount, setVisibleSegmentsCount] = useState(isReadingMode ? Infinity : 5);\n\n  const {\n    editingSegment,\n    setEditingSegment, \n    editedText,\n    setEditedText,\n    showConfirmDialog,\n    confirmDialogProps,\n    textareaRef, \n    setTextareaRef: setInternalTextareaRef,\n    handleEditSegment,\n    handleSaveCurrentSegmentEdit,\n    handleCancelEdit,\n    performActionWithConfirmation,\n    setShowConfirmDialog,\n    isSaving,\n  } = useSegmentEditing(utterances || [], onSaveEditedSegment, audioRef, currentLanguage, user, episodeSlug);\n\n  useEffect(() => {\n    if (isExpanded && !editingSegment && !isReadingMode) {\n      setVisibleSegmentsCount(5); \n    } else if (isReadingMode) {\n      setVisibleSegmentsCount(Infinity);\n    }\n  }, [isExpanded, editingSegment, isReadingMode]);\n\n  useEffect(() => {\n    if (segmentToHighlight && isExpanded && segments.length > visibleSegmentsCount) {\n      const segmentIndex = segments.findIndex(s => s.start === segmentToHighlight);\n      if (segmentIndex !== -1) {\n        const desiredVisible = Math.min(segments.length, segmentIndex + 6); // target + 5 after\n        if (desiredVisible > visibleSegmentsCount) {\n          setVisibleSegmentsCount(desiredVisible);\n        }\n      }\n    }\n  }, [segmentToHighlight, isExpanded, segments, visibleSegmentsCount]);\n  \n  const handleLoadMoreSegments = useCallback(() => {\n    setVisibleSegmentsCount(prev => prev + 10);\n  }, []);\n\n  const isFullTranscriptBlock = Boolean(question?.is_full_transcript) || question?.id === 'full-transcript-virtual';\n  const isActiveBySegment = (\n    !isReadingMode &&\n    !isFullTranscriptBlock &&\n    typeof activeSegmentTime === 'number' &&\n    Array.isArray(segments) &&\n    segments.some(s => typeof s.start === 'number' && typeof s.end === 'number' && activeSegmentTime >= s.start && activeSegmentTime < s.end)\n  );\n\n  // Highlight rules: when playing, highlight only the block that contains the current segment;\n  // when paused/stopped, highlight the clicked/active question\n  const shouldHighlight = !isReadingMode && ((mainPlayerIsPlaying && isActiveBySegment) || (!mainPlayerIsPlaying && isActiveQuestion));\n\n  const blockHighlightClass = shouldHighlight && !isReadingMode\n    ? (isJumpTarget && isExpanded ? 'ring-1 ring-purple-500/30' : 'bg-purple-600/10 ring-1 ring-purple-500/20')\n    : '';\n\n  const segmentsAvailableForHeader = segments && segments.length > 0 && showTranscript;\n  const displaySegments = segments; \n  const displayVisibleCount = (editingSegment || (isReadingMode && readingModeEditingActive)) ? (segments ? segments.length : 0) : visibleSegmentsCount;\n\n\n  const handleEditSegmentInternal = useCallback((segment) => {\n    if (isReadingMode && readingModeEditingActive) {\n      handleEditSegment(segment);\n      if (setReadingModeEditingSegmentRef) {\n        setReadingModeEditingSegmentRef({ \n          segment, \n          setText: setEditedText,\n          save: () => handleSaveCurrentSegmentEdit(segment.id || segment.start) \n        });\n      }\n    } else if (!isReadingMode) {\n      handleEditSegment(segment);\n    }\n  }, [isReadingMode, readingModeEditingActive, handleEditSegment, setReadingModeEditingSegmentRef, setEditedText, handleSaveCurrentSegmentEdit]);\n\n  const handleSaveEditInternal = useCallback(async () => {\n    await handleSaveCurrentSegmentEdit(editingSegment?.id || editingSegment?.start);\n    if (isReadingMode && readingModeEditingActive && setReadingModeEditingSegmentRef) {\n       setReadingModeEditingSegmentRef(null);\n    }\n  }, [handleSaveCurrentSegmentEdit, editingSegment, isReadingMode, readingModeEditingActive, setReadingModeEditingSegmentRef]);\n\n  const handleCancelEditInternal = useCallback(() => {\n    handleCancelEdit();\n    if (isReadingMode && readingModeEditingActive && setReadingModeEditingSegmentRef) {\n       setReadingModeEditingSegmentRef(null);\n    }\n  }, [handleCancelEdit, isReadingMode, readingModeEditingActive, setReadingModeEditingSegmentRef]);\n\n  return (\n    <>\n      <div className={`mb-0.5 rounded-md ${blockHighlightClass} ${isReadingMode ? 'reading-mode-block' : ''}`}>\n        <QuestionBlockHeader\n          question={question}\n          isActiveQuestion={shouldHighlight}\n          isExpanded={isExpanded || !!editingSegment} \n          editingSegment={editingSegment}\n          onActivate={onActivate}\n          onToggleExpansion={onToggleExpansion}\n          onEditQuestion={onEditQuestion}\n          currentLanguage={currentLanguage}\n          segmentsAvailable={segmentsAvailableForHeader}\n          isReadingMode={isReadingMode}\n        />\n        {(isExpanded || editingSegment) && displaySegments && displaySegments.length > 0 && showTranscript && (\n          <div className=\"animate-expand-collapse overflow-hidden\">\n             <SegmentList\n                segments={displaySegments}\n                visibleSegmentsCount={displayVisibleCount}\n                editingSegment={editingSegment}\n                editedText={editedText}\n                activeSegmentTime={activeSegmentTime}\n                question={question}\n                blockIndex={0} \n                currentLanguage={currentLanguage}\n                onSegmentClick={onSegmentClick}\n                handleEditSegment={handleEditSegmentInternal} \n                handleSaveCurrentSegmentEdit={handleSaveEditInternal}\n                handleCancelEdit={handleCancelEditInternal}\n                isSaving={isSaving}\n                setEditedText={setEditedText}\n                audioRef={audioRef}\n                segmentPlaying={mainPlayerIsPlaying}\n                onAddQuestionFromSegment={onAddQuestionFromSegment}\n                performActionWithConfirmation={performActionWithConfirmation}\n                setTextareaRef={setInternalTextareaRef}\n                handleLoadMoreSegments={handleLoadMoreSegments}\n                toggleTextExpansion={onToggleExpansion}\n                isJumpTarget={isJumpTarget}\n                isActiveQuestionBlock={shouldHighlight}\n                isExpanded={isExpanded}\n                isReadingMode={isReadingMode}\n                readingModeEditingActive={readingModeEditingActive}\n                onOpenSpeakerAssignmentDialog={onOpenSpeakerAssignmentDialog}\n             />\n           </div>\n        )}\n           {(isExpanded || editingSegment) && (!displaySegments || displaySegments.length === 0) && showTranscript && (\n             <div \n               className={`text-xs pt-1.5 pl-1.5 mt-1 rounded-b-md pb-2 ${isReadingMode ? 'text-slate-600' : 'text-slate-400 border-t border-slate-700/20'}`}\n             >\n               <span className=\"inline-flex items-center gap-1.5\">\n                 {transcriptLoading && (\n                   <Loader2 className=\"h-3.5 w-3.5 animate-spin text-purple-400\" />\n                 )}\n                 {getLocaleString('noTranscriptData', currentLanguage)}\n               </span>\n             </div>\n           )}\n      </div>\n\n      {showConfirmDialog && (\n        <EditConfirmationDialog\n            isOpen={showConfirmDialog}\n            onOpenChange={setShowConfirmDialog}\n            title={confirmDialogProps.title}\n            description={confirmDialogProps.description}\n            onConfirm={confirmDialogProps.onConfirm}\n            onCancel={() => setShowConfirmDialog(false)}\n            actionType={confirmDialogProps.actionType}\n            currentLanguage={currentLanguage}\n        />\n      )}\n    </>\n  );\n});\n\nexport default QuestionBlock;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/QuestionBlockHeader.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Edit' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronUp' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":38},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Edit, ChevronDown, ChevronUp } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { getLocaleString } from '@/lib/locales';\nimport { formatFullTime } from '@/lib/utils';\n\nconst QuestionBlockHeader = ({ \n  question, \n  isActiveQuestion, \n  isExpanded, \n  editingSegment,\n  onActivate, \n  onToggleExpansion, \n  onEditQuestion, \n  currentLanguage,\n  segmentsAvailable,\n  isReadingMode\n}) => (\n  <div \n    className={`flex justify-between items-center p-1.5 rounded-t-md transition-colors\n      ${isReadingMode ? 'cursor-default' : 'cursor-pointer hover:bg-slate-700/20'}\n      ${isActiveQuestion && !isReadingMode ? 'bg-purple-600/15' : ''}\n      ${isReadingMode ? 'mb-1 pb-2 border-b-0' : ''} \n    `}\n    onClick={isReadingMode ? undefined : onActivate}\n    role={isReadingMode ? undefined : \"button\"}\n    tabIndex={isReadingMode ? undefined : 0}\n    onKeyPress={(e) => { if(e.key === 'Enter' && !isReadingMode) { onActivate() } }}\n  >\n    <div className=\"flex items-center gap-2 overflow-hidden\">\n        {!isReadingMode && (\n          <div className={`text-white text-xs px-1.5 py-0.5 rounded tabular-nums ${isActiveQuestion ? 'bg-purple-500' : 'bg-blue-500/70'}`}>\n            {formatFullTime(question.time, true)}\n          </div>\n        )}\n      <span className={`font-medium flex-grow min-w-0 ${isReadingMode ? 'text-xl font-semibold text-slate-900 whitespace-normal' : 'text-sm text-slate-100 line-clamp-1'}`}>\n        {question.title || getLocaleString('untitledQuestion', currentLanguage)}\n      </span>\n    </div>\n    {!isReadingMode && (\n      <div className=\"flex items-center shrink-0\">\n        {!editingSegment && segmentsAvailable && (\n            <Button \n                variant=\"ghost\" \n                size=\"icon_sm\" \n                onClick={(e) => {e.stopPropagation(); onToggleExpansion();}}\n                className=\"text-slate-300 hover:text-white hover:bg-white/15 h-7 w-7\"\n                aria-label={isExpanded ? getLocaleString('hide', currentLanguage) : getLocaleString('showText', currentLanguage)}\n            >\n                {isExpanded ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\n            </Button>\n        )}\n        {!editingSegment && (\n          <Button \n            variant=\"ghost\" \n            size=\"icon_sm\" \n            onClick={(e) => {\n              e.stopPropagation();\n              if(onEditQuestion) onEditQuestion(question);\n            }}\n            className=\"text-slate-300 hover:text-white hover:bg-white/15 h-7 w-7\"\n            aria-label={`${getLocaleString('editQuestion', currentLanguage)} ${question.title}`}\n          >\n            <Edit className=\"h-3.5 w-3.5\" />\n          </Button>\n        )}\n      </div>\n    )}\n  </div>\n);\n\nexport default QuestionBlockHeader;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/SegmentEditControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":66},{"ruleId":"no-unused-vars","severity":1,"message":"'Check' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'CornerLeftUp' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":32},{"ruleId":"no-unused-vars","severity":1,"message":"'DivideSquare' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":46},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Check, X, CornerLeftUp, DivideSquare, Trash2 } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst SegmentEditControls = ({\n  onSave,\n  onCancel,\n  onSplit,\n  onMerge,\n  onDelete,\n  isFirstOverallSegment,\n  currentLanguage,\n}) => {\n  return (\n    <div \n      className=\"flex flex-wrap items-center justify-start gap-1 pt-1.5\"\n    >\n      <TooltipProvider delayDuration={200}>\n         {!isFirstOverallSegment && (\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button onClick={onMerge} variant=\"ghost\" size=\"icon_sm\" className=\"h-7 w-7 text-white hover:bg-slate-700/70\">\n                <CornerLeftUp size={16} />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"top\" className=\"bg-slate-800 text-white border-slate-700\">\n              <p>{getLocaleString('mergeWithPreviousSegment', currentLanguage)}</p>\n            </TooltipContent>\n          </Tooltip>\n        )}\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button onClick={onSplit} variant=\"ghost\" size=\"icon_sm\" className=\"h-7 w-7 text-white hover:bg-slate-700/70\">\n              <DivideSquare size={16} />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"top\" className=\"bg-slate-800 text-white border-slate-700\">\n            <p>{getLocaleString('splitSegmentAtCursor', currentLanguage)}</p>\n          </TooltipContent>\n        </Tooltip>\n        <Tooltip>\n          <TooltipTrigger asChild>\n             <Button onClick={onDelete} variant=\"ghost\" size=\"icon_sm\" className=\"h-7 w-7 text-white hover:bg-slate-700/70\">\n              <Trash2 size={16} />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent side=\"top\" className=\"bg-slate-800 text-white border-slate-700\">\n            <p>{getLocaleString('deleteSegment', currentLanguage)}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n\n      <div className=\"flex-grow\"></div> \n\n      <Button onClick={onCancel} variant=\"ghost\" size=\"icon_sm\" className=\"h-7 w-7 text-white hover:bg-slate-700/70\">\n        <X size={18} />\n      </Button>\n      <Button onClick={onSave} variant=\"ghost\" size=\"icon_sm\" className=\"h-7 w-7 text-white hover:bg-slate-700/70\">\n        <Check size={18} /> \n      </Button>\n    </div>\n  );\n};\n\nexport default SegmentEditControls;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/SegmentList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'TranscriptSegment' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport TranscriptSegment from '@/components/transcript/TranscriptSegment.jsx';\nimport { Button } from '@/components/ui/button';\nimport { getLocaleString } from '@/lib/locales';\n\nconst SegmentList = ({\n  segments,\n  visibleSegmentsCount,\n  editingSegment,\n  editedText,\n  activeSegmentTime,\n  question,\n  blockIndex,\n  currentLanguage,\n  onSegmentClick,\n  handleEditSegment,\n  handleSaveCurrentSegmentEdit,\n  handleCancelEdit,\n  isSaving,\n  setEditedText,\n  audioRef,\n  segmentPlaying,\n  onAddQuestionFromSegment,\n  performActionWithConfirmation,\n  setTextareaRef,\n  handleLoadMoreSegments,\n  toggleTextExpansion,\n  isJumpTarget,\n  isActiveQuestionBlock,\n  isExpanded,\n  isReadingMode,\n  readingModeEditingActive,\n  onOpenSpeakerAssignmentDialog\n}) => {\n  \n  const segmentsToDisplay = segments.slice(0, visibleSegmentsCount);\n  const showLoadMore = segments.length > visibleSegmentsCount && !isReadingMode;\n\n  return (\n    <div\n      className={`overflow-hidden pl-1 pr-0.5 pt-1.5 mt-1 rounded-b-md \n        ${isJumpTarget && isActiveQuestionBlock && !isReadingMode ? 'border-x border-b border-purple-500/30' : 'border-t border-slate-700/20'}\n        ${isReadingMode ? 'reading-mode-segment-list' : ''}\n      `}\n    >\n      {segmentsToDisplay.map((segmentItem, index) => (\n        <TranscriptSegment\n          key={segmentItem.id || `${segmentItem.start}-${index}`}\n          segment={segmentItem}\n          isActive={!isReadingMode && activeSegmentTime === segmentItem.start}\n          isEditingThisSegment={ (isReadingMode && readingModeEditingActive && editingSegment?.id === segmentItem.id) || \n                                 (!isReadingMode && editingSegment && (editingSegment.id || editingSegment.start) === (segmentItem.id || segmentItem.start))}\n          editedText={editedText}\n          isSaving={isSaving}\n          onSegmentClick={onSegmentClick}\n          onEditSegment={handleEditSegment}\n          onSaveEdit={handleSaveCurrentSegmentEdit}\n          onCancelEdit={handleCancelEdit}\n          onTextChange={setEditedText}\n          audioRef={audioRef}\n          currentLanguage={currentLanguage}\n          segmentPlaying={segmentPlaying}\n          onAddQuestionFromSegment={onAddQuestionFromSegment}\n          activeSegmentTime={activeSegmentTime}\n          highlightTextFn={(text) => text} \n          isFirstSegmentInQuestion={index === 0 && question && !question.isIntro && !question.isFullTranscript && Math.abs((question.time * 1000) - segmentItem.start) < 1000 } \n          onSplitSegment={(seg, txt, pos) => performActionWithConfirmation('Split', seg, txt, pos)}\n          onMergeWithPreviousSegment={(seg) => performActionWithConfirmation('Merge', seg)}\n          onDeleteSegment={(seg) => performActionWithConfirmation('Delete', seg)}\n          isFirstOverallSegment={blockIndex === 0 && index === 0} \n          setTextareaRef={setTextareaRef}\n          isActiveQuestionBlock={isActiveQuestionBlock}\n          isJumpTargetPreview={isJumpTarget && index === 0}\n          isReadingMode={isReadingMode}\n          readingModeEditingActive={readingModeEditingActive}\n          onOpenSpeakerAssignmentDialog={onOpenSpeakerAssignmentDialog}\n        />\n      ))}\n      {!isReadingMode && (\n        <div className=\"flex justify-start items-center gap-2 mt-1 min-h-[26px]\">\n          {showLoadMore && (\n            <Button \n              onClick={handleLoadMoreSegments} \n              variant=\"link\" \n              size=\"sm\" \n              className=\"text-purple-300 hover:text-purple-200 text-xs focus-visible:ring-purple-400 focus-visible:ring-offset-slate-900 focus-visible:ring-1 border border-purple-400/30 hover:border-purple-400/60 px-2 py-1 h-auto\"\n            >\n              {getLocaleString('loadMoreSegments', currentLanguage)} ({segments.length - visibleSegmentsCount})\n            </Button>\n          )}\n          {isExpanded && segments.length > 0 && (\n            <Button \n                onClick={(e) => {e.stopPropagation(); toggleTextExpansion(e);}} \n                variant=\"link\" \n                size=\"sm\" \n                className=\"text-slate-400 hover:text-slate-200 text-xs focus-visible:ring-slate-400 focus-visible:ring-offset-slate-900 focus-visible:ring-1\"\n            >\n                {getLocaleString('hide', currentLanguage)}\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SegmentList;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/TranscriptControls.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'TextSelect' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'onRefresh' is defined but never used. Allowed unused args must match /^_/u.","line":10,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, TextSelect, AlertTriangle } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst TranscriptControls = ({\n  isLoading,\n  transcriptError,\n  transcriptAvailable,\n  onRefresh,\n  onStartTranscription,\n  currentLanguage,\n  assemblyLang,\n}) => {\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-4 text-slate-300 text-sm\">\n        <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> {getLocaleString('loadingTranscript', currentLanguage)}\n      </div>\n    );\n  }\n\n  if (transcriptError) {\n    return (\n      <div className=\"text-red-400 text-center p-2 text-xs bg-red-900/20 rounded-md flex items-center justify-center\">\n        <AlertTriangle size={16} className=\"mr-2\"/> {transcriptError}\n      </div>\n    );\n  }\n\n  if (!transcriptAvailable) {\n    return (\n      <div className=\"text-center py-4\">\n        <p className=\"text-slate-400 mb-2 text-sm\">{getLocaleString('noTranscriptAvailableYet', currentLanguage)}</p>\n        <Button onClick={onStartTranscription} disabled={isLoading} className=\"bg-purple-600 hover:bg-purple-700 text-xs h-8\">\n          {isLoading ? <Loader2 className=\"h-3 w-3 animate-spin mr-1.5\" /> : <TextSelect className=\"h-3 w-3 mr-1.5\" />}\n          {getLocaleString('startTranscription', currentLanguage)} ({assemblyLang})\n        </Button>\n      </div>\n    );\n  }\n  \n  return null; \n};\n\nexport default TranscriptControls;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/player/questions_manager_parts/TranscriptSearch.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { Search, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { getLocaleString } from '@/lib/locales';\n\nconst TranscriptSearch = ({ searchTerm, onSearchTermChange, currentLanguage }) => {\n  return (\n    <div className=\"relative mb-2\">\n      <Input\n        type=\"text\"\n        placeholder={getLocaleString('searchTranscriptPlaceholder', currentLanguage)}\n        value={searchTerm}\n        onChange={(e) => onSearchTermChange(e.target.value)}\n        className=\"pl-9 pr-8 bg-slate-800/50 border-slate-700/60 focus:border-purple-500 text-slate-100 placeholder-slate-400 text-sm h-9\"\n      />\n      <Search className=\"absolute left-2.5 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400\" />\n      {searchTerm && (\n        <Button\n          variant=\"ghost\"\n          size=\"icon_sm\"\n          className=\"absolute right-1.5 top-1/2 transform -translate-y-1/2 h-7 w-7 text-slate-400 hover:text-slate-200\"\n          onClick={() => onSearchTermChange('')}\n        >\n          <X size={16} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default TranscriptSearch;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/transcript/AddQuestionDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'PlayerControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { getLocaleString } from '@/lib/locales';\nimport { formatFullTime } from '@/lib/utils';\nimport PlayerControls from '@/components/player/PlayerControls';\n\nconst AddQuestionDialog = ({ \n    isOpen, \n    onClose, \n    segment,\n    initialTime, \n    onSave, \n    currentLanguage,\n    audioRef,\n    mainPlayerIsPlaying,\n    mainPlayerTogglePlayPause,\n    mainPlayerSeekAudio,\n    duration\n}) => {\n  const [questionTitle, setQuestionTitle] = useState('');\n  const [questionTime, setQuestionTime] = useState(0);\n\n  useEffect(() => {\n    if (isOpen) {\n      if (segment) {\n        setQuestionTime(segment.start / 1000);\n      } else if (initialTime !== undefined) {\n        setQuestionTime(initialTime);\n      } else {\n        setQuestionTime(0);\n      }\n      setQuestionTitle(''); \n    }\n  }, [segment, initialTime, isOpen]);\n\n  const handleSave = () => {\n    if (!questionTitle.trim()) return;\n    onSave(questionTitle, questionTime); \n    onClose();\n  };\n\n  const handleDialogTimeAdjust = (amount) => {\n    const newTime = Math.max(0, Math.min(duration || Infinity, questionTime + amount));\n    setQuestionTime(newTime);\n    if(mainPlayerSeekAudio) mainPlayerSeekAudio(newTime, true); \n  };\n  \n  const handleDialogTimeInputChange = (e) => {\n    const parts = e.target.value.split(':').map(Number);\n    let newTimeValue = 0;\n    if (parts.length === 3) newTimeValue = parts[0]*3600 + parts[1]*60 + parts[2];\n    else if (parts.length === 2) newTimeValue = parts[0]*60 + parts[1];\n    else if (parts.length === 1 && !isNaN(parts[0])) newTimeValue = parts[0];\n    else {\n        setQuestionTime(NaN); \n        return;\n    }\n     \n    if (!isNaN(newTimeValue) && newTimeValue >= 0 && newTimeValue <= (duration || Infinity)) {\n        setQuestionTime(newTimeValue);\n        if(mainPlayerSeekAudio) mainPlayerSeekAudio(newTimeValue, false); \n    } else if (e.target.value === \"\") {\n        setQuestionTime(0); \n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-slate-900 border-slate-800 text-white sm:max-w-md shadow-2xl rounded-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-purple-300\">{getLocaleString('addQuestionDialogTitle', currentLanguage)}</DialogTitle>\n           <DialogDescription className=\"text-sm text-slate-400\">\n             {segment \n                ? getLocaleString('addQuestionDialogDescriptionSegment', currentLanguage, {segmentText: segment.text.substring(0, 70) + \"...\"})\n                : getLocaleString('addQuestionDialogDescription', currentLanguage)\n             }\n           </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"grid gap-5 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dialog-question-time\" className=\"text-slate-300 font-medium\">{getLocaleString('questionTime', currentLanguage)}</Label>\n              <Input\n                id=\"dialog-question-time\"\n                type=\"text\"\n                value={formatFullTime(questionTime, true)}\n                onChange={handleDialogTimeInputChange}\n                className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500 col-span-3 tabular-nums\"\n                placeholder=\"HH:MM:SS\"\n              />\n              <PlayerControls \n                variant=\"timeAdjustment\"\n                isPlaying={mainPlayerIsPlaying} \n                onPlayPause={mainPlayerTogglePlayPause} \n                onAdjustTime={handleDialogTimeAdjust} \n                currentTime={questionTime} \n                mainPlayerSeekAudio={mainPlayerSeekAudio}\n                currentLanguage={currentLanguage}\n                audioRefCurrentTime={audioRef?.current?.currentTime}\n                playerDuration={duration}\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dialog-question-title\" className=\"text-slate-300 font-medium\">{getLocaleString('questionTitle', currentLanguage)}</Label>\n              <Input\n                id=\"dialog-question-title\"\n                value={questionTitle}\n                onChange={(e) => setQuestionTitle(e.target.value)}\n                className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500\"\n                placeholder={getLocaleString('questionTitlePlaceholder', currentLanguage)}\n              />\n            </div>\n        </div>\n\n        <DialogFooter className=\"flex flex-col-reverse sm:flex-row justify-end items-center mt-4 pt-4 border-t border-slate-700/50\">\n            <Button variant=\"outline\" onClick={onClose} className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300 w-full sm:w-auto sm:mr-2\">\n                {getLocaleString('cancel', currentLanguage)}\n            </Button>\n            <Button onClick={handleSave} className=\"bg-purple-600 hover:bg-purple-700 text-white font-semibold w-full sm:w-auto\">\n              {getLocaleString('saveQuestion', currentLanguage)}\n            </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default AddQuestionDialog;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/transcript/SpeakerAssignmentDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":91},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { getLocaleString } from '@/lib/locales';\n\nconst SpeakerAssignmentDialog = ({\n  isOpen,\n  onClose,\n  segment,\n  onSave,\n  currentLanguage\n}) => {\n  const [speakerName, setSpeakerName] = useState('');\n\n  const quickAssignNames = useMemo(() => {\n    return currentLanguage === 'ru' ? { pepe: 'Пепе', maria: 'Мария'} : { pepe: 'Pepe', maria: 'Maria'};\n  }, [currentLanguage]);\n\n  useEffect(() => {\n    if (isOpen && segment) {\n      const currentSpeaker = segment.speaker;\n      const isNumericDefault = currentSpeaker !== null && currentSpeaker !== undefined && (/^\\d+$/.test(String(currentSpeaker)) || /^SPEAKER\\s[A-Z0-9]+$/.test(String(currentSpeaker).toUpperCase()) || /^SPEAKER_[A-Z]$/.test(String(currentSpeaker).toUpperCase()));\n      setSpeakerName(isNumericDefault ? '' : (currentSpeaker || ''));\n    } else if (!isOpen) {\n      setSpeakerName('');\n    }\n  }, [isOpen, segment]);\n\n  const handleSave = () => {\n    const oldSpeakerId = segment?.speaker;\n    let finalSpeakerId = speakerName.trim();\n\n    if (finalSpeakerId === \"\") { \n        finalSpeakerId = null; \n    }\n    \n    onSave(segment, oldSpeakerId, finalSpeakerId);\n    onClose();\n  };\n\n  const handleQuickAssign = (name) => {\n    setSpeakerName(name);\n  };\n\n  if (!isOpen || !segment) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"bg-slate-900 border-slate-800 text-white sm:max-w-md shadow-2xl rounded-xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-purple-300\">{getLocaleString('assignSpeakerTitle', currentLanguage)}</DialogTitle>\n          <DialogDescription className=\"text-sm text-slate-400\">\n            {getLocaleString('assignSpeakerDescription', currentLanguage)} \"{segment.text.substring(0,50)}...\"\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid gap-5 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"speaker-name-input\" className=\"text-slate-300 font-medium\">\n                {getLocaleString('speakerName', currentLanguage)}\n            </Label>\n            <Input\n              id=\"speaker-name-input\"\n              value={speakerName}\n              onChange={(e) => setSpeakerName(e.target.value)}\n              className=\"bg-slate-800 border-slate-700 focus:border-purple-500 focus:ring-purple-500\"\n              placeholder={getLocaleString('enterSpeakerNamePlaceholder', currentLanguage)}\n            />\n            <div className=\"flex gap-2 mt-1.5\">\n                <Button size=\"xs\" variant=\"outlineSubtle\" onClick={() => handleQuickAssign(quickAssignNames.pepe)} className=\"text-xs\">\n                    {quickAssignNames.pepe}\n                </Button>\n                <Button size=\"xs\" variant=\"outlineSubtle\" onClick={() => handleQuickAssign(quickAssignNames.maria)} className=\"text-xs\">\n                    {quickAssignNames.maria}\n                </Button>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex flex-col-reverse sm:flex-row justify-end items-center mt-4 pt-4 border-t border-slate-700/50\">\n          <Button variant=\"outline\" onClick={onClose} className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300 w-full sm:w-auto sm:mr-2\">\n            {getLocaleString('cancel', currentLanguage)}\n          </Button>\n          <Button onClick={handleSave} className=\"bg-purple-600 hover:bg-purple-700 text-white font-semibold w-full sm:w-auto\">\n            {getLocaleString('saveSpeakerAssignment', currentLanguage)}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default SpeakerAssignmentDialog;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/transcript/TranscriptSegment.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":66},{"ruleId":"no-unused-vars","severity":1,"message":"'Edit3' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'HelpCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'SegmentEditControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Edit3, HelpCircle } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport { formatFullTime } from '@/lib/utils';\nimport SegmentEditControls from '@/components/player/questions_manager_parts/SegmentEditControls.jsx';\n\nconst speakerDisplayColors = [\n  'text-sky-400', 'text-emerald-400', 'text-amber-400', \n  'text-rose-400', 'text-indigo-400', 'text-pink-400',\n  'text-teal-400', 'text-orange-400', 'text-cyan-400',\n  'text-lime-400', 'text-fuchsia-400', 'text-violet-400'\n];\n\nconst speakerColorCache = {};\n\nconst getSpeakerDisplay = (speakerId, currentLanguage) => {\n  if (speakerId === null || speakerId === undefined || String(speakerId).trim() === \"\") {\n    return { name: getLocaleString('unknownSpeaker', currentLanguage), color: 'text-slate-400' };\n  }\n  \n  const speakerString = String(speakerId).trim();\n\n  // Жёсткое сопоставление цветов для Pepe и Maria\n  if (speakerString.toLowerCase() === 'pepe') {\n    return { name: speakerString, color: 'text-fuchsia-400' };\n  }\n  if (speakerString.toLowerCase() === 'maria') {\n    return { name: speakerString, color: 'text-sky-400' };\n  }\n\n  if (speakerColorCache[speakerString]) {\n    const cached = speakerColorCache[speakerString];\n    const isNumericDefault = /^\\d+$/.test(speakerString) || /^SPEAKER_[A-Z]$/.test(speakerString.toUpperCase()) || /^SPEAKER\\s[A-Z0-9]+$/.test(speakerString.toUpperCase());\n    const name = isNumericDefault ? `${getLocaleString('speaker', currentLanguage)} ${speakerString.replace(/^SPEAKER\\s?/i, '')}` : speakerString;\n    return { name, color: cached.color };\n  }\n  \n  let idForColorHash = 0;\n  for (let i = 0; i < speakerString.length; i++) {\n    idForColorHash = (idForColorHash << 5) - idForColorHash + speakerString.charCodeAt(i);\n    idForColorHash |= 0; \n  }\n  \n  const colorIndex = Math.abs(idForColorHash) % speakerDisplayColors.length;\n  const color = speakerDisplayColors[colorIndex] || 'text-slate-400';\n  \n  speakerColorCache[speakerString] = { color };\n\n  const isNumericDefault = /^\\d+$/.test(speakerString) || /^SPEAKER_[A-Z]$/.test(speakerString.toUpperCase()) || /^SPEAKER\\s[A-Z0-9]+$/.test(speakerString.toUpperCase());\n  const name = isNumericDefault ? `${getLocaleString('speaker', currentLanguage)} ${speakerString.replace(/^SPEAKER\\s?/i, '')}` : speakerString;\n\n  return { name, color };\n};\n\n\nconst TranscriptSegment = ({\n  segment,\n  isActive,\n  isEditingThisSegment,\n  editedText,\n  onSegmentClick,\n  onEditSegment,\n  onSaveEdit,\n  onCancelEdit,\n  onTextChange,\n  currentLanguage,\n  onAddQuestionFromSegment,\n  highlightTextFn,\n  onSplitSegment,\n  onMergeWithPreviousSegment,\n  onDeleteSegment,\n  isFirstOverallSegment,\n  setTextareaRef,\n  isActiveQuestionBlock,\n  isJumpTargetPreview,\n  onOpenSpeakerAssignmentDialog\n}) => {\n  \n  const [cursorPositionForSplit, setCursorPositionForSplit] = useState(null);\n  const internalTextareaRef = useRef(null);\n  const [textareaHeight, setTextareaHeight] = useState('auto');\n  \n  useEffect(() => {\n    if (setTextareaRef && internalTextareaRef.current) {\n      setTextareaRef(internalTextareaRef.current);\n    }\n  }, [setTextareaRef, internalTextareaRef]);\n\n  useEffect(() => {\n    if (isEditingThisSegment && internalTextareaRef.current) {\n      internalTextareaRef.current.focus();\n      const scrollHeight = internalTextareaRef.current.scrollHeight;\n      internalTextareaRef.current.style.height = 'auto'; \n      internalTextareaRef.current.style.height = `${scrollHeight}px`; \n      setTextareaHeight(`${scrollHeight}px`);\n    } else {\n      setTextareaHeight('auto');\n    }\n  }, [isEditingThisSegment, editedText]);\n  \n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (isEditingThisSegment && event.key === 'Enter' && !event.shiftKey) {\n        event.preventDefault();\n        if (onSaveEdit) onSaveEdit();\n      }\n    };\n\n    const currentRef = internalTextareaRef.current;\n    if (currentRef && isEditingThisSegment) {\n      currentRef.addEventListener('keydown', handleKeyDown);\n    }\n    return () => {\n      if (currentRef && isEditingThisSegment) {\n        currentRef.removeEventListener('keydown', handleKeyDown);\n      }\n    };\n  }, [isEditingThisSegment, onSaveEdit]);\n\n  const handleTimeClick = (e) => {\n    e.stopPropagation(); \n    if (onSegmentClick && segment && typeof segment.start === 'number') {\n      onSegmentClick(segment.start / 1000, segment);\n    }\n  };\n\n  const handleSpeakerClick = (e) => {\n    e.stopPropagation();\n    if (onOpenSpeakerAssignmentDialog && segment) {\n      onOpenSpeakerAssignmentDialog(segment);\n    }\n  };\n  \n  const segmentTextDisplay = highlightTextFn && segment?.text ? highlightTextFn(segment.text) : segment?.text;\n\n  const attemptSplit = () => {\n    if (cursorPositionForSplit === null || cursorPositionForSplit < 0 || cursorPositionForSplit > (editedText || \"\").length) {\n      return; \n    }\n    if (onSplitSegment && segment) {\n        onSplitSegment(segment, editedText, cursorPositionForSplit);\n    }\n  };\n\n  const attemptMerge = () => {\n    if (onMergeWithPreviousSegment && segment) {\n        onMergeWithPreviousSegment(segment);\n    }\n  };\n  \n  const attemptDelete = () => {\n    if (onDeleteSegment && segment) {\n        onDeleteSegment(segment);\n    }\n  };\n\n  const handleTextareaChange = (e) => {\n    if (onTextChange) {\n        onTextChange(e.target.value);\n    }\n    if (internalTextareaRef.current) {\n      internalTextareaRef.current.style.height = 'auto';\n      internalTextareaRef.current.style.height = `${internalTextareaRef.current.scrollHeight}px`;\n      setTextareaHeight(`${internalTextareaRef.current.scrollHeight}px`);\n    }\n  };\n\n  const handleTextareaClick = (e) => {\n    setCursorPositionForSplit(e.target.selectionStart);\n  };\n  const handleTextareaKeyUp = (e) => {\n     setCursorPositionForSplit(e.target.selectionStart);\n  };\n\n  const segmentBaseStyle = `p-1.5 mb-1 rounded-md transition-all duration-200 ease-in-out shadow-sm text-sm relative`;\n  let segmentDynamicStyle = \"\";\n\n  if (isEditingThisSegment) {\n    segmentDynamicStyle = \"bg-slate-500 ring-1 ring-purple-400 shadow-purple-400/20\";\n  } else if (isActive) { \n    segmentDynamicStyle = \"bg-purple-700/20 ring-2 ring-purple-400 shadow-lg shadow-purple-400/20 z-10 segment-active-highlight\";\n  } else if (isJumpTargetPreview && isActiveQuestionBlock) {\n    segmentDynamicStyle = \"bg-purple-600/15\"; \n  } else {\n    segmentDynamicStyle = \"bg-slate-700/30 hover:bg-slate-600/40\";\n  }\n\n\n  if (!segment || typeof segment.start !== 'number' || typeof segment.end !== 'number') {\n    return null; \n  }\n  \n  const speakerInfo = getSpeakerDisplay(segment.speaker, currentLanguage);\n  const timeColorClass = speakerInfo.color;\n\n  return (\n    <div\n      className={`${segmentBaseStyle} ${segmentDynamicStyle}`}\n      id={`segment-${segment.start}`}\n    >\n      <div className=\"min-w-0\">\n          <div className={`flex justify-between items-center mb-px text-xs`}>\n              <div className=\"flex items-center\">\n                <span \n                  onClick={handleTimeClick}\n                  className={`hover:underline ${isEditingThisSegment ? 'text-slate-300 cursor-default' : `${timeColorClass} cursor-pointer`}`}\n                  role=\"button\"\n                  tabIndex={isEditingThisSegment ? -1 : 0}\n                  onKeyPress={(e) => { if(e.key === 'Enter' && !isEditingThisSegment) handleTimeClick(e);}}\n                >\n                  {formatFullTime(segment.start / 1000)} - {formatFullTime(segment.end / 1000)}\n                </span>\n                {segment.speaker !== null && segment.speaker !== undefined && !isEditingThisSegment && (\n                    <span \n                      onClick={handleSpeakerClick}\n                      className={`ml-2 font-medium cursor-pointer hover:opacity-80 ${speakerInfo.color}`}\n                      title={`${getLocaleString('assignSpeakerTooltip', currentLanguage)}: ${speakerInfo.name}`}\n                    >\n                      ({speakerInfo.name})\n                    </span>\n                )}\n              </div>\n              {!isEditingThisSegment && (\n                  <div className=\"flex items-center gap-0.5\">\n                      <TooltipProvider delayDuration={200}>\n                          <Tooltip>\n                          <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon_xs\" className=\"text-slate-300 hover:text-purple-300 hover:bg-slate-700/70 h-6 w-6\" onClick={(e) => { e.stopPropagation(); if(onAddQuestionFromSegment) onAddQuestionFromSegment(segment);}}>\n                              <HelpCircle size={14} />\n                              </Button>\n                          </TooltipTrigger>\n                          <TooltipContent side=\"top\" className=\"bg-slate-800 text-white border-slate-700\">\n                              <p>{getLocaleString('addQuestionToSegment', currentLanguage)}</p>\n                          </TooltipContent>\n                          </Tooltip>\n                          <Tooltip>\n                          <TooltipTrigger asChild>\n                              <Button variant=\"ghost\" size=\"icon_xs\" className=\"text-slate-300 hover:text-purple-300 hover:bg-slate-700/70 h-6 w-6\" onClick={(e) => { e.stopPropagation(); if(onEditSegment) onEditSegment(segment);}}>\n                              <Edit3 size={13} />\n                              </Button>\n                          </TooltipTrigger>\n                          <TooltipContent side=\"top\" className=\"bg-slate-800 text-white border-slate-700\">\n                              <p>{getLocaleString('editSegment', currentLanguage)}</p>\n                          </TooltipContent>\n                          </Tooltip>\n                      </TooltipProvider>\n                  </div>\n              )}\n          </div>\n        \n        <div className=\"flex items-start gap-1\">\n          <div className=\"flex-grow min-w-0\">\n            {isEditingThisSegment ? (\n              <>\n              <Textarea\n                ref={internalTextareaRef}\n                value={editedText || \"\"}\n                onChange={handleTextareaChange}\n                onClick={(e) => { e.stopPropagation(); handleTextareaClick(e); }}\n                onKeyUp={handleTextareaKeyUp}\n                className={`w-full p-2 rounded border-slate-400 focus:ring-purple-500 focus:border-purple-500 text-sm leading-relaxed placeholder-slate-500 overflow-hidden resize-none bg-slate-200 text-slate-900`}\n                style={{ height: textareaHeight }}\n                placeholder={getLocaleString('editTextSegmentPlaceholder', currentLanguage)}\n              />\n              </>\n            ) : (\n              <>\n              <p\n                className={`leading-relaxed whitespace-pre-wrap pt-0.5 pb-0 rounded-sm text-sm text-slate-100`}\n              >\n                {segmentTextDisplay}\n              </p>\n              </>\n            )}\n          </div>\n        </div>\n        {isEditingThisSegment && (\n          <SegmentEditControls\n            onSave={onSaveEdit}\n            onCancel={onCancelEdit}\n            onSplit={attemptSplit}\n            onMerge={attemptMerge}\n            onDelete={attemptDelete}\n            isFirstOverallSegment={isFirstOverallSegment}\n            currentLanguage={currentLanguage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TranscriptSegment;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/alert-dialog.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/button.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Comp' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":39,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        outlineSubtle: \"border border-slate-700 bg-slate-800/50 hover:bg-slate-700/70 text-slate-300\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        xs: \"h-7 rounded-md px-2 text-xs\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    (<Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />)\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/checkbox.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Check' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { Check } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n      'border-slate-600 data-[state=checked]:bg-purple-600 data-[state=checked]:text-white data-[state=checked]:border-purple-600 focus-visible:ring-purple-500',\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/command.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Dialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'DialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props} />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props} />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props} />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props} />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    (<span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />)\n  );\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandSeparator,\n  CommandShortcut,\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/dialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst Dialog = DialogPrimitive.Root;\nconst DialogTrigger = DialogPrimitive.Trigger;\nconst DialogPortal = DialogPrimitive.Portal;\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      'fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({ className, ...props }) => (\n  <div\n    className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)}\n    {...props}\n  />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({ className, ...props }) => (\n  <div\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\n    {...props}\n  />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn('text-lg font-semibold leading-none tracking-tight', className)}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/dropdown-menu.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Check' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronRight' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"no-unused-vars","severity":1,"message":"'Circle' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props} />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    (<span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props} />)\n  );\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/form-elements.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Check' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as LabelPrimitive from '@radix-ui/react-label';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { Check } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { cva } from 'class-variance-authority';\n\n// Label component\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n);\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\n// Input component\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      className={cn(\n        \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nInput.displayName = \"Input\";\n\n// Textarea component\nconst Textarea = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = \"Textarea\";\n\n// Checkbox component\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Input, Label, Textarea, Checkbox }; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/input.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/label.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/popover.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/progress.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/select.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Check' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronDown' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'ChevronUp' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\"p-1\", position === \"popper\" &&\n          \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\")}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/slider.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/textarea.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/toast.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport * as ToastPrimitives from '@radix-ui/react-toast';\nimport { cva } from 'class-variance-authority';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst ToastProvider = ToastPrimitives.Provider;\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',\n      className\n    )}\n    {...props}\n  />\n));\nToastViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastVariants = cva(\n  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',\n  {\n    variants: {\n      variant: {\n        default: 'border-slate-700 bg-slate-800 text-slate-50',\n        destructive: 'destructive group border-red-500/50 bg-red-900 text-red-50',\n        info: 'info group border-blue-500/50 bg-blue-900 text-blue-50'\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;\n});\nToast.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-slate-600 bg-transparent px-3 text-sm font-medium ring-offset-slate-900 transition-colors hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-red-400/30 group-[.destructive]:hover:border-red-500/50 group-[.destructive]:hover:bg-red-800 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400',\n      className\n    )}\n    {...props}\n  />\n));\nToastAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      'absolute right-2 top-2 rounded-md p-1 text-slate-400 opacity-0 transition-opacity hover:text-slate-100 focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-900',\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n));\nToastClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title ref={ref} className={cn('text-sm font-semibold', className)} {...props} />\n));\nToastTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn('text-sm opacity-90', className)} {...props} />\n));\nToastDescription.displayName = ToastPrimitives.Description.displayName;\n\nexport {\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastAction,\n  ToastClose,\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/toaster.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Toast' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":8},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastClose' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastProvider' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'ToastViewport' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'_dismiss' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":19,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/components/ui/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        const { dismiss: _dismiss, ...restProps } = props;\n        return (\n          <Toast key={id} {...restProps}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/tooltip.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/ui/use-toast.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/uploader/FileUploadItem.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'FileAudio' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'X' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":35},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'Languages' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":70},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Label' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Textarea' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'Progress' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { FileAudio, X, CheckCircle, Loader2, AlertTriangle, Languages } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Progress } from '@/components/ui/progress';\nimport { getLocaleString } from '@/lib/locales';\n\nconst FileUploadItem = ({\n  itemData,\n  onTimingsChange,\n  onTitleChange,\n  onRemove,\n  currentLanguage,\n}) => {\n  const { \n    file, \n    episodeTitle, \n    lang, \n    timingsText, \n    isUploading, \n    uploadProgress, \n    uploadError, \n    uploadComplete,\n    transcriptionStatus,\n    transcriptionError,\n    isTranslatingTimings,\n    uploadProgressDetails\n  } = itemData;\n\n  const handleTimingsUpdate = (e) => {\n    onTimingsChange(itemData.id, e.target.value);\n  };\n\n  const handleTitleUpdate = (e) => {\n    onTitleChange(itemData.id, e.target.value);\n  };\n\n  const getTranscriptionStatusText = () => {\n    if (!transcriptionStatus) return null;\n    switch (transcriptionStatus) {\n      case 'queued':\n        return getLocaleString('transcriptionQueued', currentLanguage);\n      case 'processing':\n        return getLocaleString('transcriptionProcessing', currentLanguage);\n      case 'completed':\n        return getLocaleString('transcriptionCompletedShort', currentLanguage);\n      case 'error':\n        return getLocaleString('transcriptionFailedShort', currentLanguage);\n      case 'pending_translation_from_es':\n        return getLocaleString('transcriptionPendingTranslation', currentLanguage);\n      case 'translating_from_es':\n          return getLocaleString('transcriptionTranslating', currentLanguage);\n      default:\n        return transcriptionStatus;\n    }\n  };\n\n  const statusText = getTranscriptionStatusText();\n  \n  const langColor = lang === 'ru' ? 'rgba(59, 130, 246, 0.7)' : \n                    lang === 'es' ? 'rgba(234, 179, 8, 0.7)' : \n                    'rgba(34, 197, 94, 0.7)';\n\n\n  return (\n    <div className=\"p-4 bg-slate-700/50 rounded-lg border border-slate-600 space-y-3 relative\">\n      {file && (\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center gap-2 flex-grow min-w-0\">\n            <FileAudio className=\"h-6 w-6 text-purple-300 shrink-0\" />\n            <span className=\"text-sm font-medium text-slate-100 truncate\" title={file.name}>{file.name}</span>\n          </div>\n          <div className=\"px-2 py-0.5 text-xs font-semibold rounded-full text-white ml-2 shrink-0\"\n               style={{backgroundColor: langColor }}>\n            {lang.toUpperCase()}\n          </div>\n          {!isUploading && !uploadComplete && (\n            <Button variant=\"ghost\" size=\"icon_sm\" onClick={() => onRemove(itemData.id)} className=\"text-red-400 hover:text-red-300 ml-2 shrink-0\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      )}\n\n      <div>\n        <Label htmlFor={`episodeTitle-${itemData.id}`} className=\"text-xs text-slate-300\">{getLocaleString('episodeTitle', currentLanguage)}</Label>\n        <Input\n          id={`episodeTitle-${itemData.id}`}\n          type=\"text\"\n          value={episodeTitle}\n          onChange={handleTitleUpdate}\n          className=\"bg-slate-600 border-slate-500 text-slate-100 mt-1 text-sm\"\n          disabled={isUploading || uploadComplete}\n        />\n      </div>\n\n      <div>\n        <div className=\"flex justify-between items-center\">\n            <Label htmlFor={`timings-${itemData.id}`} className=\"text-xs text-slate-300\">{getLocaleString('timingsQuestions', currentLanguage)}</Label>\n        </div>\n        <Textarea\n          id={`timings-${itemData.id}`}\n          value={timingsText}\n          onChange={handleTimingsUpdate}\n          className=\"bg-slate-600 border-slate-500 focus:border-purple-400 text-slate-100 min-h-[100px] mt-1 text-sm\"\n          placeholder={getLocaleString('batchAddPlaceholder', currentLanguage)}\n          disabled={isUploading || uploadComplete || isTranslatingTimings}\n        />\n      </div>\n\n      {isUploading && (\n        <div className=\"mt-2\">\n          <Progress value={uploadProgress} className=\"w-full [&>div]:bg-purple-400 h-2\" />\n          <div className=\"text-xs text-center mt-1 text-purple-300\">\n            {uploadProgressDetails?.message || getLocaleString('uploading', currentLanguage)} {uploadProgress}%\n            {uploadProgressDetails && (\n              <div className=\"text-xs text-purple-200 mt-1\">\n                {uploadProgressDetails.uploadedMB} / {uploadProgressDetails.totalMB} MB\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {uploadError && (\n        <p className=\"mt-2 text-xs text-red-300 text-center bg-red-800/40 p-2 rounded-md flex items-center justify-center\">\n            <AlertTriangle size={14} className=\"mr-1.5\" />{uploadError}\n        </p>\n      )}\n\n      {uploadComplete && !uploadError && (\n        <div className=\"mt-2 text-xs text-center text-green-300 flex items-center justify-center bg-green-800/40 p-2 rounded-md\">\n          <CheckCircle className=\"h-4 w-4 mr-1.5\" />\n          <span>{getLocaleString('uploadComplete', currentLanguage)}</span>\n        </div>\n      )}\n\n      {statusText && !isUploading && !uploadError && (\n        <div className={`mt-2 text-xs text-center p-2 rounded-md flex items-center justify-center\n          ${transcriptionStatus === 'completed' ? 'text-green-300 bg-green-800/40' : \n            transcriptionStatus === 'error' || transcriptionError ? 'text-red-300 bg-red-800/40' :\n            'text-blue-300 bg-blue-800/40'}`}>\n          {transcriptionStatus === 'processing' || transcriptionStatus === 'queued' || transcriptionStatus === 'translating_from_es' ? <Loader2 className=\"h-3 w-3 animate-spin mr-1.5\" /> : \n           transcriptionStatus === 'error' || transcriptionError ? <AlertTriangle size={13} className=\"mr-1.5\" /> :\n           transcriptionStatus === 'completed' ? <CheckCircle size={13} className=\"mr-1.5\" /> :\n           null\n          }\n          <span>{statusText}</span>\n          {transcriptionError && transcriptionStatus !== 'error' && <span className=\"ml-1 text-red-400\">({getLocaleString('errorGeneric', currentLanguage)})</span>}\n        </div>\n      )}\n       {transcriptionError && !statusText && (\n         <p className=\"mt-2 text-xs text-red-300 text-center bg-red-800/40 p-2 rounded-md flex items-center justify-center\">\n            <AlertTriangle size={14} className=\"mr-1.5\" />{transcriptionError}\n         </p>\n       )}\n\n\n    </div>\n  );\n};\n\nexport default FileUploadItem;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/components/uploader/OverwriteDialog.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogCancel' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":103},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":105,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":122},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":124,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":141},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":143,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":159},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { AlertTriangle } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst OverwriteDialog = ({ isOpen, onOpenChange, onConfirm, onCancel, slug, currentLanguage }) => {\n  if (!isOpen) return null;\n\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onOpenChange}>\n      <AlertDialogContent className=\"bg-slate-800 border-slate-700 text-white\">\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"text-yellow-400 flex items-center\">\n            <AlertTriangle className=\"h-6 w-6 mr-2\" />\n            {getLocaleString('confirmOverwriteTitle', currentLanguage)}\n          </AlertDialogTitle>\n          <AlertDialogDescription className=\"text-slate-300\">\n            {getLocaleString('confirmOverwriteMessage', currentLanguage, { slug: slug })}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onCancel} className=\"bg-slate-600 hover:bg-slate-500 border-slate-500\">\n            {getLocaleString('cancel', currentLanguage)}\n          </AlertDialogCancel>\n          <AlertDialogAction onClick={onConfirm} className=\"bg-red-600 hover:bg-red-700\">\n            {getLocaleString('overwrite', currentLanguage)}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n};\n\nexport default OverwriteDialog;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/contexts/TelegramContext.jsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/usePlayerCore.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/usePlayerInitialization.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/usePlayerNavigation.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'currentPlaybackRateIndex' is defined but never used. Allowed unused args must match /^_/u.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useCallback } from 'react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst usePlayerNavigation = ({\n  audioRef,\n  durationState,\n  isPlayingState,\n  setIsPlayingState,\n  onQuestionSelectJump,\n  internalQuestions,\n  currentTimeState,\n  toast,\n  currentLanguage,\n  currentPlaybackRateIndex,\n  setCurrentPlaybackRateIndex,\n  playbackRateOptions,\n  episodeData,\n  onPlayerStateChange,\n}) => {\n\n  const handleProgressChange = useCallback((newTime) => {\n    if (audioRef.current && !isNaN(newTime)) {\n      const clampedTime = Math.max(0, Math.min(durationState || 0, newTime));\n      \n      onQuestionSelectJump(clampedTime, null, isPlayingState);\n    }\n  }, [audioRef, durationState, onQuestionSelectJump, isPlayingState]);\n\n  const handleSkip = useCallback((seconds) => {\n    if (audioRef.current) {\n      const newTime = audioRef.current.currentTime + seconds;\n      \n      onQuestionSelectJump(newTime, null, isPlayingState);\n    }\n  }, [onQuestionSelectJump, audioRef, isPlayingState]);\n\n  const navigateQuestion = useCallback((direction) => {\n    if (!internalQuestions || internalQuestions.length === 0) {\n      toast({ title: getLocaleString('navigationToastTitle', currentLanguage), description: getLocaleString('navigationNoQuestions', currentLanguage), className:\"bg-blue-600/80 border-blue-500 text-white\" });\n      return;\n    }\n\n    let currentQuestionIndex = -1;\n    let currentQuestionStartTime = 0;\n\n    for (let i = 0; i < internalQuestions.length; i++) {\n      if (internalQuestions[i].time <= currentTimeState) {\n        currentQuestionIndex = i;\n        currentQuestionStartTime = internalQuestions[i].time;\n      } else {\n        break; \n      }\n    }\n    \n    const playAfterNav = audioRef.current ? !audioRef.current.paused : false;\n\n    if (direction < 0) { \n      if (currentQuestionIndex !== -1 && (currentTimeState - currentQuestionStartTime > 2)) {\n        onQuestionSelectJump(currentQuestionStartTime, internalQuestions[currentQuestionIndex].id, playAfterNav);\n      } else if (currentQuestionIndex > 0) {\n        onQuestionSelectJump(internalQuestions[currentQuestionIndex - 1].time, internalQuestions[currentQuestionIndex - 1].id, playAfterNav);\n      } else {\n        onQuestionSelectJump(0, internalQuestions.length > 0 ? internalQuestions[0].id : null, playAfterNav);\n      }\n    } else { \n      if (currentQuestionIndex < internalQuestions.length - 1) {\n        onQuestionSelectJump(internalQuestions[currentQuestionIndex + 1].time, internalQuestions[currentQuestionIndex + 1].id, playAfterNav);\n      } else {\n        return; \n      }\n    }\n  }, [internalQuestions, currentTimeState, audioRef, onQuestionSelectJump, currentLanguage, toast]);\n\n  const seekAudio = useCallback((time, playAfterSeek = false) => {\n     onQuestionSelectJump(time, null, playAfterSeek);\n  }, [onQuestionSelectJump]);\n\n  const togglePlayPause = useCallback(() => {\n\n    \n    if (!episodeData?.audio_url && audioRef.current) {\n\n        toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('noAudioSource', currentLanguage), variant: 'destructive' });\n        setIsPlayingState(false);\n        onPlayerStateChange?.({isPlaying: false});\n        return;\n    }\n    \n    // Проверяем реальное состояние аудио элемента\n    const audioIsActuallyPlaying = audioRef.current && !audioRef.current.paused;\n    const newIsPlaying = !audioIsActuallyPlaying;\n    \n\n    \n    setIsPlayingState(newIsPlaying);\n    onPlayerStateChange?.({isPlaying: newIsPlaying});\n  }, [episodeData?.audio_url, toast, currentLanguage, audioRef, isPlayingState, setIsPlayingState, onPlayerStateChange]);\n\n  const setPlaybackRateByIndex = useCallback((index) => {\n    if (index >= 0 && index < playbackRateOptions.length) {\n      setCurrentPlaybackRateIndex(index);\n      if (audioRef.current) {\n        audioRef.current.playbackRate = playbackRateOptions[index].value;\n      }\n      onPlayerStateChange?.({ playbackRate: playbackRateOptions[index].value });\n    }\n  }, [playbackRateOptions, setCurrentPlaybackRateIndex, audioRef, onPlayerStateChange]);\n\n  return {\n    handleProgressChange,\n    handleSkip,\n    navigateQuestion,\n    seekAudio,\n    togglePlayPause,\n    setPlaybackRateByIndex,\n  };\n};\n\nexport default usePlayerNavigation;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/usePlayerPlayback.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/usePlayerState.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/usePlayerTimeUpdates.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/useReadingMode.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^React$/u.","line":1,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'getLocaleString' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'toast' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":7,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useCallback } from 'react';\nimport { useToast as useShadcnToast } from '@/components/ui/use-toast';\nimport { getLocaleString } from '@/lib/locales';\n\nconst useReadingMode = (mainPlayerIsPlaying, toastInstance, currentLanguage, mainAudioRef, setMainPlayerIsPlaying) => {\n  const defaultToastHook = useShadcnToast();\n  const { toast } = toastInstance || defaultToastHook;\n\n  const [readingMode, setReadingMode] = useState(false);\n\n  const toggleReadingMode = useCallback(() => {\n    setReadingMode(prev => {\n      const newMode = !prev;\n      if (newMode && mainAudioRef.current && mainPlayerIsPlaying) {\n        mainAudioRef.current.pause();\n        if(setMainPlayerIsPlaying) setMainPlayerIsPlaying(false);\n      } else if (!newMode && mainAudioRef.current && mainAudioRef.current.paused && mainPlayerIsPlaying) {\n        mainAudioRef.current.play().catch(e => console.error(\"Error resuming main player on RM exit:\", e));\n      }\n      return newMode;\n    });\n  }, [mainAudioRef, mainPlayerIsPlaying, setMainPlayerIsPlaying]);\n\n  const handleReadingModeSegmentClick = useCallback((time, segment, audioRefForReadingMode, setIsPlayingForReadingMode) => {\n    if (audioRefForReadingMode && audioRefForReadingMode.current && !isNaN(time)) {\n        audioRefForReadingMode.current.currentTime = time;\n        if (setIsPlayingForReadingMode) {\n            if (audioRefForReadingMode.current.paused) {\n                 audioRefForReadingMode.current.play().catch(e => console.error(\"RM segment click play error\", e));\n                 setIsPlayingForReadingMode(true);\n            }\n        }\n    }\n  }, []);\n  \n  return {\n    readingMode,\n    toggleReadingMode,\n    handleReadingModeSegmentClick,\n  };\n};\n\nexport default useReadingMode;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player/useSpeakerAssignment.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player_page/useEpisodeData.js","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":65,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":65,"endColumn":15,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2837,2837],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '@/lib/supabaseClient';\nimport { getLocaleString } from '@/lib/locales';\nimport r2Service from '@/lib/r2Service';\n\n// Utility function to check if a file exists on Archive.org\nexport const checkEpisodeFileExists = async (episode) => {\n  if (!episode.r2_object_key || !episode.audio_url) {\n    return { exists: false, error: 'No file key or URL' };\n  }\n  \n  try {\n    const fileExists = await r2Service.checkFileExists(episode.r2_object_key);\n    return { exists: fileExists.exists, error: null };\n  } catch (error) {\n    console.warn('Error checking file existence for episode:', episode.slug, error);\n    return { exists: false, error: error.message };\n  }\n};\n\nconst useEpisodeData = (episodeSlug, currentLanguage, toast) => {\n  const [episodeData, setEpisodeData] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [transcript, setTranscript] = useState(null);\n  const [loading, setLoading] = useState(true); // загрузка только базовых данных эпизода (аудио URL, метаданные)\n  const [questionsLoading, setQuestionsLoading] = useState(false);\n  const [transcriptLoading, setTranscriptLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [questionsUpdatedId, setQuestionsUpdatedId] = useState(Date.now());\n\n  // --- Transcript cache helpers (localStorage, stale-while-revalidate) ---\n  const TRANSCRIPT_CACHE_TTL_MS = 24 * 60 * 60 * 1000; // 24 hours\n\n  const getTranscriptCacheKey = useCallback((epSlug, lang) => `transcript:${epSlug}:${lang}`, []);\n\n  const computeTranscriptVersionKey = useCallback((payload) => {\n    if (!payload) return 'none';\n    const { id, status, data } = payload;\n    const utterancesLen = data?.utterances?.length || 0;\n    const wordsLen = data?.words?.length || 0;\n    const textLen = (data?.text || '').length || 0;\n    return `${id || 'noid'}:${status || 'nostatus'}:${utterancesLen}:${wordsLen}:${textLen}`;\n  }, []);\n\n  const readTranscriptCache = useCallback((epSlug, lang) => {\n    try {\n      if (typeof window === 'undefined') return null;\n      const raw = window.localStorage.getItem(getTranscriptCacheKey(epSlug, lang));\n      if (!raw) return null;\n      const parsed = JSON.parse(raw);\n      if (!parsed?.meta?.versionKey || !parsed?.data) return null;\n      const isFresh = Date.now() - (parsed.cachedAt || 0) < TRANSCRIPT_CACHE_TTL_MS;\n      return { value: parsed, isFresh };\n    } catch {\n      return null;\n    }\n  }, [getTranscriptCacheKey]);\n\n  const writeTranscriptCache = useCallback((epSlug, lang, cacheValue) => {\n    try {\n      if (typeof window === 'undefined') return;\n      const toStore = { ...cacheValue, cachedAt: Date.now() };\n      window.localStorage.setItem(getTranscriptCacheKey(epSlug, lang), JSON.stringify(toStore));\n    } catch {}\n  }, [getTranscriptCacheKey]);\n\n  const fetchTranscriptForEpisode = useCallback(async (epSlug, langForTranscript) => {\n    try {\n      // Prefill from cache if available and fresh\n      const cached = readTranscriptCache(epSlug, langForTranscript);\n      if (cached?.isFresh && cached.value?.data) {\n        setTranscript({\n          id: cached.value.meta?.id || null,\n          utterances: cached.value.data.utterances || [],\n          words: cached.value.data.words || [],\n          text: cached.value.data.text || '',\n          status: cached.value.meta?.status || null\n        });\n      }\n\n      const { data, error: transcriptError } = await supabase\n        .from('transcripts')\n        .select('id, transcript_data, edited_transcript_data, status')\n        .eq('episode_slug', epSlug)\n        .eq('lang', langForTranscript)\n        .maybeSingle();\n\n      if (transcriptError) throw transcriptError;\n      \n      if (data) {\n        const finalTranscriptData = data.edited_transcript_data || data.transcript_data;\n        const freshPayload = {\n          id: data.id,\n          status: data.status,\n          data: {\n            utterances: finalTranscriptData?.utterances || [],\n            words: finalTranscriptData?.words || [],\n            text: finalTranscriptData?.text || ''\n          }\n        };\n        const freshVersion = computeTranscriptVersionKey(freshPayload);\n        const cachedVersion = cached?.value?.meta?.versionKey || 'none';\n\n        if (freshVersion !== cachedVersion) {\n          // Update state and cache only if changed\n          setTranscript({ \n            id: freshPayload.id,\n            utterances: freshPayload.data.utterances,\n            words: freshPayload.data.words,\n            text: freshPayload.data.text,\n            status: freshPayload.status \n          });\n          writeTranscriptCache(epSlug, langForTranscript, {\n            meta: { id: freshPayload.id, status: freshPayload.status, versionKey: freshVersion },\n            data: freshPayload.data\n          });\n        }\n      } else {\n        setTranscript(null);\n      }\n    } catch (err) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: `Error fetching transcript: ${err.message}`, variant: 'destructive' });\n      setTranscript(null);\n    }\n  }, [currentLanguage, toast, readTranscriptCache, writeTranscriptCache, computeTranscriptVersionKey]);\n\n  const fetchQuestionsForEpisode = useCallback(async (epSlug, langForQuestions) => {\n    try {\n      const { data, error: questionsError } = await supabase\n        .from('questions')\n        .select('id, time, title, lang, created_at, episode_slug, is_intro, is_full_transcript')\n        .eq('episode_slug', epSlug)\n        .eq('lang', langForQuestions)\n        .order('time', { ascending: true });\n\n      if (questionsError) throw questionsError;\n      \n      let fetchedQuestions = data || [];\n      const hasIntro = fetchedQuestions.some(q => q.is_intro && q.time === 0);\n\n      if (!hasIntro) {\n        const introQuestion = {\n          id: 'intro-virtual', \n          time: 0,\n          title: getLocaleString('introduction', langForQuestions),\n          lang: langForQuestions,\n          is_intro: true,\n          is_full_transcript: false,\n          episode_slug: epSlug,\n          created_at: new Date().toISOString()\n        };\n        fetchedQuestions = [introQuestion, ...fetchedQuestions];\n      }\n      \n      setQuestions(fetchedQuestions);\n      setQuestionsUpdatedId(Date.now());\n    } catch (err) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('errorFetchingQuestions', currentLanguage, {errorMessage: err.message}), variant: 'destructive' });\n      setQuestions([]);\n    }\n  }, [currentLanguage, toast]);\n\n  const fetchEpisodeDetails = useCallback(async () => {\n    if (!episodeSlug) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const { data: episode, error: episodeError } = await supabase\n        .from('episodes')\n        .select('slug, title, lang, audio_url, duration, date, created_at, r2_object_key, r2_bucket_name')\n        .eq('slug', episodeSlug)\n        .maybeSingle();\n\n      if (episodeError) throw episodeError;\n      if (!episode) {\n        console.warn('Episode not found:', episodeSlug);\n        setError(getLocaleString('episodeNotFound', currentLanguage));\n        setLoading(false);\n        return;\n      }\n      \n\n      const finalAudioUrl = r2Service.getCompatibleUrl(\n        episode.audio_url,\n        episode.r2_object_key,\n        episode.r2_bucket_name\n      );\n      \n      // Сразу устанавливаем данные эпизода и снимаем основной лоадер\n      setEpisodeData({ ...episode, audio_url: finalAudioUrl });\n      setLoading(false);\n\n      // Подгружаем вопросы/транскрипт неблокирующе, с отдельными флагами загрузки\n      const langForContent = episode.lang === 'all' ? currentLanguage : episode.lang;\n      setQuestionsLoading(true);\n      setTranscriptLoading(true);\n      \n      (async () => {\n        try {\n          await fetchQuestionsForEpisode(episode.slug, langForContent);\n        } finally {\n          setQuestionsLoading(false);\n        }\n      })();\n      \n      (async () => {\n        try {\n          await fetchTranscriptForEpisode(episode.slug, langForContent);\n        } finally {\n          setTranscriptLoading(false);\n        }\n      })();\n\n    } catch (err) {\n      console.error('useEpisodeData: Error fetching episode', err);\n      setError(err.message);\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: err.message, variant: 'destructive' });\n      setLoading(false);\n    }\n  }, [episodeSlug, currentLanguage, toast, fetchQuestionsForEpisode, fetchTranscriptForEpisode]);\n\n  useEffect(() => {\n    fetchEpisodeDetails();\n  }, [fetchEpisodeDetails]);\n  \n  useEffect(() => {\n    if (episodeData && episodeData.lang === 'all') {\n      setQuestionsLoading(true);\n      setTranscriptLoading(true);\n      (async () => {\n        try {\n          await fetchQuestionsForEpisode(episodeData.slug, currentLanguage);\n        } finally {\n          setQuestionsLoading(false);\n        }\n      })();\n      (async () => {\n        try {\n          await fetchTranscriptForEpisode(episodeData.slug, currentLanguage);\n        } finally {\n          setTranscriptLoading(false);\n        }\n      })();\n    }\n  }, [currentLanguage, episodeData, fetchQuestionsForEpisode, fetchTranscriptForEpisode]);\n\n  // Keep cache in sync when transcript changes via editing or local updates\n  useEffect(() => {\n    if (!episodeData || !transcript) return;\n    const langForContent = episodeData.lang === 'all' ? currentLanguage : episodeData.lang;\n    const payload = {\n      id: transcript.id || episodeData.slug,\n      status: transcript.status || null,\n      data: {\n        utterances: transcript.utterances || [],\n        words: transcript.words || [],\n        text: transcript.text || ''\n      }\n    };\n    const version = computeTranscriptVersionKey(payload);\n    writeTranscriptCache(episodeData.slug, langForContent, {\n      meta: { id: payload.id, status: payload.status, versionKey: version },\n      data: payload.data\n    });\n  }, [transcript, episodeData, currentLanguage, computeTranscriptVersionKey, writeTranscriptCache]);\n\n  return {\n    episodeData,\n    questions,\n    transcript,\n    loading,\n    questionsLoading,\n    transcriptLoading,\n    error,\n    questionsUpdatedId,\n    fetchEpisodeDetails,\n    fetchQuestionsForEpisode,\n    fetchTranscriptForEpisode,\n    setTranscript,\n    setQuestions,\n    setQuestionsUpdatedId\n  };\n};\n\nexport default useEpisodeData;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player_page/usePlayerInteractions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/player_page/useSupabaseSubscriptions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/transcript/transcriptProcessingUtils.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'segmentEnd' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":195,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":17},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":213,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":213,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[7236,7236],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":231,"column":17,"nodeType":"BlockStatement","messageId":"unexpected","endLine":231,"endColumn":19,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[7884,7884],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":237,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":237,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[8082,8082],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nconst MAX_SEGMENT_DURATION_MS = 120000; \nconst PREFERRED_SPLIT_WINDOW_MS = 30000; \n\nconst findLastSentenceEndIndex = (textBlock, maxChars) => {\n  if (!textBlock || textBlock.length <= maxChars) return textBlock.length;\n\n  let searchEnd = maxChars;\n  let searchStart = Math.max(0, maxChars - (PREFERRED_SPLIT_WINDOW_MS / 1000 * 15)); \n\n  for (let i = searchEnd; i >= searchStart; i--) {\n    if (textBlock[i] === '.' || textBlock[i] === '?' || textBlock[i] === '!') {\n      if (i + 1 < textBlock.length && textBlock[i+1] === ' ') {\n        return i + 2; \n      }\n      return i + 1; \n    }\n  }\n  \n  let lastSpace = -1;\n  for (let i = searchEnd; i >= searchStart; i--) {\n    if (textBlock[i] === ' ') {\n      lastSpace = i;\n      break;\n    }\n  }\n  return lastSpace !== -1 ? lastSpace + 1 : maxChars;\n};\n\n\nexport const splitLongUtterance = (utterance) => {\n  const utteranceDuration = utterance.end - utterance.start;\n  if (utteranceDuration <= MAX_SEGMENT_DURATION_MS) {\n    return [utterance];\n  }\n\n  const newUtterances = [];\n  let currentStart = utterance.start;\n\n  if (utterance.words && utterance.words.length > 0) {\n    let currentWords = [];\n    let currentText = \"\";\n\n    for (let i = 0; i < utterance.words.length; i++) {\n      const word = utterance.words[i];\n      const potentialChunkEnd = word.end;\n\n      if (potentialChunkEnd - currentStart > MAX_SEGMENT_DURATION_MS && currentWords.length > 0) {\n        let splitAtWordIndex = currentWords.length -1; \n        let searchBackwardsFromIndex = currentWords.length -1;\n        \n        for (let j = searchBackwardsFromIndex; j >=0; j--) {\n            const prevWord = currentWords[j];\n            if (potentialChunkEnd - prevWord.start > PREFERRED_SPLIT_WINDOW_MS && j < searchBackwardsFromIndex) break; \n            if (/[.?!]$/.test(prevWord.text)) {\n                splitAtWordIndex = j;\n                break;\n            }\n        }\n        \n        const wordsForThisChunk = currentWords.slice(0, splitAtWordIndex + 1);\n        const textForThisChunk = wordsForThisChunk.map(w => w.text).join(\" \");\n        const endForThisChunk = wordsForThisChunk[wordsForThisChunk.length -1].end;\n\n        newUtterances.push({\n          ...utterance,\n          start: currentStart,\n          end: endForThisChunk,\n          text: textForThisChunk,\n          words: [...wordsForThisChunk],\n          id: `${utterance.id || utterance.start}-split-${newUtterances.length}-${Date.now()}`\n        });\n        \n        currentWords = currentWords.slice(splitAtWordIndex + 1);\n        currentText = currentWords.map(w => w.text).join(\" \");\n        currentStart = currentWords.length > 0 ? currentWords[0].start : potentialChunkEnd; \n        \n        if(currentWords.length === 0) { \n           if (i < utterance.words.length){ \n             currentWords.push(word);\n             currentText = word.text;\n             currentStart = word.start;\n           } else { \n             continue;\n           }\n        } else { \n          currentWords.push(word);\n          currentText = currentWords.map(w => w.text).join(\" \");\n        }\n\n      } else {\n        currentWords.push(word);\n        currentText = currentText ? `${currentText} ${word.text}` : word.text;\n      }\n    }\n\n    if (currentWords.length > 0) {\n      newUtterances.push({\n        ...utterance,\n        start: currentStart,\n        end: utterance.end, \n        text: currentText.trim(),\n        words: currentWords,\n        id: `${utterance.id || utterance.start}-split-${newUtterances.length}-${Date.now()}`\n      });\n    }\n  } else { \n    const numChunks = Math.ceil(utteranceDuration / MAX_SEGMENT_DURATION_MS);\n    let textOffset = 0;\n\n    for (let i = 0; i < numChunks; i++) {\n      const chunkStartMs = utterance.start + i * MAX_SEGMENT_DURATION_MS;\n      const chunkDurationMs = Math.min(MAX_SEGMENT_DURATION_MS, utterance.end - chunkStartMs);\n      const chunkEndMs = chunkStartMs + chunkDurationMs;\n      \n      const proportionOfDuration = chunkDurationMs / utteranceDuration;\n      let estimatedCharsForChunk = Math.floor(utterance.text.length * proportionOfDuration);\n      \n      let actualCharsForChunk;\n      if (i === numChunks - 1) {\n        actualCharsForChunk = utterance.text.length - textOffset;\n      } else {\n        actualCharsForChunk = findLastSentenceEndIndex(utterance.text.substring(textOffset), estimatedCharsForChunk);\n         if (textOffset + actualCharsForChunk > utterance.text.length) { \n            actualCharsForChunk = utterance.text.length - textOffset;\n        }\n      }\n      \n      const chunkText = utterance.text.substring(textOffset, textOffset + actualCharsForChunk);\n      textOffset += actualCharsForChunk;\n\n      if (chunkText.trim()) {\n        newUtterances.push({\n          ...utterance,\n          start: chunkStartMs,\n          end: chunkEndMs,\n          text: chunkText.trim(),\n          words: [], \n          id: `${utterance.id || utterance.start}-textsplit-${i}-${Date.now()}`\n        });\n      }\n    }\n  }\n  \n  return newUtterances.length > 0 ? newUtterances : [utterance];\n};\n\n\nexport const splitTranscriptToSegments = (utterances, maxSegmentDurationMs = 120000) => {\n  if (!Array.isArray(utterances) || utterances.length === 0) return [];\n  const segments = [];\n  let currentSegment = [];\n  let segmentStart = null;\n  let segmentEnd = null;\n\n  for (let i = 0; i < utterances.length; i++) {\n    const utt = utterances[i];\n    if (currentSegment.length === 0) {\n      segmentStart = utt.start;\n      segmentEnd = utt.end;\n      currentSegment.push(utt);\n      continue;\n    }\n    // Проверяем, не превысит ли добавление этого utterance лимит\n    if ((utt.end - segmentStart) > maxSegmentDurationMs) {\n      // Если текущее utterance само по себе длинное — разбить его\n      if ((utt.end - utt.start) > maxSegmentDurationMs) {\n        // Используем splitLongUtterance для этого utterance\n        const splitted = splitLongUtterance(utt);\n        // Первый кусок — завершает текущий сегмент, остальные — новые сегменты\n        if (splitted.length > 0) {\n          // Первый кусок — завершает текущий сегмент\n          segments.push([...currentSegment, splitted[0]]);\n          // Остальные куски — отдельные сегменты\n          for (let j = 1; j < splitted.length; j++) {\n            segments.push([splitted[j]]);\n          }\n        } else {\n          segments.push([...currentSegment, utt]);\n        }\n        currentSegment = [];\n        segmentStart = null;\n        segmentEnd = null;\n      } else {\n        // Завершаем текущий сегмент\n        segments.push([...currentSegment]);\n        // Начинаем новый сегмент с текущего utterance\n        currentSegment = [utt];\n        segmentStart = utt.start;\n        segmentEnd = utt.end;\n      }\n    } else {\n      // Добавляем utterance в текущий сегмент\n      currentSegment.push(utt);\n      segmentEnd = utt.end;\n    }\n  }\n  if (currentSegment.length > 0) {\n    segments.push([...currentSegment]);\n  }\n  return segments;\n};\n\n\nexport const processTranscriptData = (data) => {\n  if (!data || !Array.isArray(data.utterances)) {\n    return { ...data, utterances: [] };\n  }\n\n  // Debug: basic stats before processing\n  try {\n    console.log('[TranscriptProcessing] Incoming utterances:', data.utterances.length);\n  } catch (e) {}\n\n  const processedUtterances = data.utterances.flatMap(utt => {\n    const utteranceWithWords = {\n      ...utt,\n      words: data.words?.filter(w => w.start >= utt.start && w.end <= utt.end && w.confidence > 0) || utt.words || []\n    };\n    const splitted = splitLongUtterance(utteranceWithWords);\n    try {\n      if ((utt.end - utt.start) > 120000) {\n        console.log('[TranscriptProcessing] Long utterance detected:', {\n          start: utt.start,\n          end: utt.end,\n          durationMs: utt.end - utt.start,\n          originalTextLen: (utt.text || '').length,\n          splitCount: splitted.length\n        });\n      }\n    } catch (e) {}\n    return splitted;\n  }).filter(utt => utt.text && utt.text.trim() !== \"\");\n  \n  try {\n    console.log('[TranscriptProcessing] Processed utterances:', processedUtterances.length);\n  } catch (e) {}\n\n  return { ...data, utterances: processedUtterances, words: data.words };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/transcript/useTranscriptAssemblyAI.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'currentTranscriptState' is defined but never used. Allowed unused args must match /^_/u.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'currentTranscriptDbId' is defined but never used. Allowed unused args must match /^_/u.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { supabase } from '@/lib/supabaseClient';\nimport assemblyAIService from '@/lib/assemblyAIService.js';\nimport { getLocaleString } from '@/lib/locales';\nimport { processTranscriptData } from '@/hooks/transcript/transcriptProcessingUtils';\n\n\nconst useTranscriptAssemblyAI = (\n  episodeSlug, \n  episodeAudioUrl, \n  episodeLang, \n  currentLanguage, \n  toast, \n  setTranscriptState, \n  setTranscriptDbIdState, \n  setIsLoadingTranscriptState, \n  setTranscriptErrorState,\n  currentTranscriptState,\n  currentTranscriptDbId\n) => {\n  const [isPollingTranscript, setIsPollingTranscript] = useState(false);\n  const [transcriptionJobId, setTranscriptionJobId] = useState(null);\n  const pollingTimeoutRef = useRef(null);\n\n  const determineAssemblyLangForEpisode = useCallback(() => {\n    if (episodeLang === 'ru') return 'ru';\n    if (episodeLang === 'es') return 'es';\n    return currentLanguage === 'ru' ? 'ru' : 'es';\n  }, [episodeLang, currentLanguage]);\n\n  const pollTranscriptStatus = useCallback(async (assemblyId, dbTranscriptId, assemblyLang) => {\n    if (isPollingTranscript) return;\n    setIsPollingTranscript(true);\n    try {\n      const result = await assemblyAIService.getTranscriptionResult(assemblyId, currentLanguage);\n      if (result.status === 'completed') {\n        setTranscriptState(result); \n        toast({ title: getLocaleString('transcriptionCompletedTitle', currentLanguage), description: getLocaleString('transcriptionCompletedDescription', currentLanguage) });\n        \n        const { error: updateError } = await supabase\n          .from('transcripts')\n          .update({ status: 'completed', transcript_data: result, edited_transcript_data: processTranscriptData(result) })\n          .eq('id', dbTranscriptId);\n        if (updateError) {\n            console.error(\"Error updating transcript in DB after polling:\", updateError);\n        }\n      } else if (result.status === 'error') {\n        const errorMessage = result.error || getLocaleString('unknownAssemblyError', currentLanguage);\n        setTranscriptErrorState(getLocaleString('transcriptionErrorAssembly', currentLanguage) + `: ${errorMessage}`);\n        toast({ title: getLocaleString('transcriptionErrorTitle', currentLanguage), description: getLocaleString('transcriptionErrorAssembly', currentLanguage) + `: ${errorMessage}`, variant: 'destructive' });\n        await supabase.from('transcripts').update({ status: 'error', transcript_data: result }).eq('id', dbTranscriptId);\n      } else {\n        pollingTimeoutRef.current = setTimeout(() => pollTranscriptStatus(assemblyId, dbTranscriptId, assemblyLang), 15000);\n      }\n    } catch (err) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('errorPollingTranscript', currentLanguage), variant: 'destructive' });\n    } finally {\n      setIsPollingTranscript(false);\n    }\n  }, [isPollingTranscript, toast, currentLanguage, setTranscriptState, setTranscriptErrorState]);\n\n  const handleStartTranscription = useCallback(async (langCodeForAssembly = null, audioUrlForTranscription = null, existingDbTranscriptEntry = null) => {\n    if (!episodeSlug || (!episodeAudioUrl && !audioUrlForTranscription)) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('missingEpisodeOrUrl', currentLanguage), variant: 'destructive' });\n      return;\n    }\n    \n    if (transcriptionJobId && (existingDbTranscriptEntry?.status === 'processing' || existingDbTranscriptEntry?.status === 'queued')) {\n        console.log(\"Transcription request already sent and in progress. Skipping new request.\");\n        return;\n    }\n\n    const finalAudioUrl = audioUrlForTranscription || episodeAudioUrl;\n    setIsLoadingTranscriptState(true);\n    setTranscriptErrorState(null);\n    \n    const assemblyLangToUse = langCodeForAssembly || determineAssemblyLangForEpisode();\n    const transcriptLangForDb = episodeLang === 'all' ? currentLanguage : episodeLang;\n\n    try {\n      const job = await assemblyAIService.submitTranscription(finalAudioUrl, assemblyLangToUse, episodeSlug, currentLanguage, transcriptLangForDb);\n      setTranscriptionJobId(job.id);\n\n      let dbOp = existingDbTranscriptEntry?.id\n        ? supabase.from('transcripts').update({ assemblyai_transcript_id: job.id, status: job.status, lang: transcriptLangForDb, updated_at: new Date().toISOString(), edited_transcript_data: null }).eq('id', existingDbTranscriptEntry.id)\n        : supabase.from('transcripts').insert([{ episode_slug: episodeSlug, lang: transcriptLangForDb, assemblyai_transcript_id: job.id, status: job.status, edited_transcript_data: null }]);\n      \n      const { error: dbError, data: transcriptEntries } = await dbOp.select('id, edited_transcript_data').single();\n      if (dbError) throw dbError;\n      if (!transcriptEntries) throw new Error(\"Failed to get transcript entry ID from DB operation.\");\n      const newDbTranscriptId = transcriptEntries.id;\n      setTranscriptDbIdState(newDbTranscriptId);\n\n      if (job.status === 'queued' || job.status === 'processing') {\n        toast({ title: getLocaleString('transcriptionSubmittedTitle', currentLanguage), description: getLocaleString('transcriptionSubmittedDescription', currentLanguage, { lang: assemblyLangToUse }) });\n        if (pollingTimeoutRef.current) clearTimeout(pollingTimeoutRef.current);\n        pollTranscriptStatus(job.id, newDbTranscriptId, assemblyLangToUse);\n      } else if (job.status === 'error') {\n        const errorMessage = job.error || getLocaleString('unknownAssemblyError', currentLanguage);\n        setTranscriptErrorState(getLocaleString('transcriptionErrorAssembly', currentLanguage) + `: ${errorMessage}`);\n        await supabase.from('transcripts').update({ status: 'error', transcript_data: job }).eq('id', newDbTranscriptId);\n      }\n    } catch (err) {\n      setTranscriptErrorState(getLocaleString('errorStartingTranscription', currentLanguage, { errorMessage: err.message }));\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: err.message, variant: 'destructive' });\n    } finally {\n      setIsLoadingTranscriptState(false);\n    }\n  }, [\n      episodeSlug, \n      episodeAudioUrl, \n      toast, \n      currentLanguage, \n      determineAssemblyLangForEpisode, \n      pollTranscriptStatus, \n      episodeLang, \n      transcriptionJobId,\n      setIsLoadingTranscriptState,\n      setTranscriptErrorState,\n      setTranscriptDbIdState\n    ]);\n\n  useEffect(() => {\n    return () => {\n      if (pollingTimeoutRef.current) {\n        clearTimeout(pollingTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    isPollingTranscript,\n    setIsPollingTranscript,\n    transcriptionJobId,\n    setTranscriptionJobId,\n    pollingTimeoutRef,\n    determineAssemblyLangForEpisode,\n    pollTranscriptStatus,\n    handleStartTranscription,\n  };\n};\n\nexport default useTranscriptAssemblyAI;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/transcript/useTranscriptData.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/transcript/useTranscriptPlayerSync.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/useFileUploadManager.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'startPollingForItem' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":50,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect, useRef } from 'react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { getLocaleString } from '@/lib/locales';\nimport { getFileNameWithoutExtension } from '@/lib/utils';\nimport { generateInitialItemData } from '@/services/uploader/fileDetailsExtractor';\nimport { processSingleItem as processSingleItemService } from '@/services/uploader/fileProcessor';\nimport { startPollingForItem as startPollingForItemService } from '@/services/uploader/transcriptPoller';\nimport { translateTextOpenAI } from '@/lib/openAIService';\n\n\nconst useFileUploadManager = (currentLanguage) => {\n  const [filesToProcess, setFilesToProcess] = useState([]);\n  const [isProcessingAll, setIsProcessingAll] = useState(false);\n  const [showOverwriteDialog, setShowOverwriteDialog] = useState(false);\n  const [currentItemForOverwrite, setCurrentItemForOverwrite] = useState(null);\n  \n  const { toast } = useToast();\n  const pollingIntervals = useRef({});\n  const overwritePromiseResolve = useRef(null);\n  const isDialogOpen = useRef(false);\n\n  const updateItemState = useCallback((itemUniqueIdOrPredicate, updates) => {\n    setFilesToProcess(prev => {\n      if (typeof itemUniqueIdOrPredicate === 'function') {\n        return prev.map(item => {\n          const updateObject = itemUniqueIdOrPredicate(item.id);\n          return { ...item, ...(updateObject || {}) };\n        });\n      }\n      return prev.map(item => (item.id === itemUniqueIdOrPredicate ? { ...item, ...updates } : item));\n    });\n  }, []);\n\n  const openOverwriteDialog = useCallback((itemData) => {\n    isDialogOpen.current = true;\n    setCurrentItemForOverwrite(itemData);\n    setShowOverwriteDialog(true);\n    return new Promise((resolve) => {\n      overwritePromiseResolve.current = resolve;\n    });\n  }, []);\n\n  const closeOverwriteDialog = () => {\n    isDialogOpen.current = false;\n    setShowOverwriteDialog(false);\n    setCurrentItemForOverwrite(null);\n    overwritePromiseResolve.current = null;\n  };\n\n  const startPollingForItem = useCallback((itemData) => {\n    startPollingForItemService(itemData, updateItemState, currentLanguage, toast, pollingIntervals);\n  }, [updateItemState, currentLanguage, toast]);\n\n  const handleTranslateTimings = useCallback(async (esItemId) => {\n    console.log(\"🔄 Starting translation process for esItemId:\", esItemId);\n    \n    const currentFiles = filesToProcess;\n    const esItem = currentFiles.find(item => item.id === esItemId && item.lang === 'es');\n    \n    console.log(\"📝 ES Item found:\", esItem ? \"✅\" : \"❌\");\n    console.log(\"📄 ES timingsText length:\", esItem?.timingsText?.length || 0);\n    console.log(\"📄 ES timingsText preview:\", esItem?.timingsText?.substring(0, 100) || \"empty\");\n    \n    if (!esItem || !esItem.timingsText) {\n      console.error(\"❌ No ES item or timingsText found\");\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: \"Нет текста таймингов для перевода.\", variant: \"destructive\" });\n      return;\n    }\n\n    // Check if timingsText has meaningful content (not just whitespace or very short)\n    const trimmedText = esItem.timingsText.trim();\n    if (trimmedText.length < 3) {\n      console.warn(\"⚠️ TimingsText too short, skipping translation:\", trimmedText.length);\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: \"Текст таймингов слишком короткий для перевода.\", variant: \"destructive\" });\n      return;\n    }\n\n    // Check if text looks like it contains timing information (basic format check)\n    const hasTimingPattern = /\\d{1,2}:\\d{2}/.test(trimmedText) || /\\d{1,2}\\.\\d{2}/.test(trimmedText);\n    if (!hasTimingPattern) {\n      console.warn(\"⚠️ TimingsText doesn't appear to contain timing patterns\");\n      console.log(\"📄 Full timingsText for analysis:\", trimmedText);\n    }\n\n    const enItem = currentFiles.find(item => item.originalFileId === esItem.originalFileId && item.lang === 'en');\n    console.log(\"📝 EN Item found:\", enItem ? \"✅\" : \"❌\");\n    \n    if (!enItem) {\n      console.error(\"❌ No EN item found for originalFileId:\", esItem.originalFileId);\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: \"Не найден соответствующий английский элемент для сохранения перевода.\", variant: \"destructive\" });\n      return;\n    }\n    \n    updateItemState(enItem.id, { isTranslatingTimings: true, timingsText: getLocaleString('timingsTranslating', currentLanguage) });\n\n    try {\n      console.log(\"🤖 Calling translateTextOpenAI with text length:\", esItem.timingsText.length);\n      const translatedText = await translateTextOpenAI(esItem.timingsText, 'en', currentLanguage);\n      console.log(\"✅ Translation completed, result length:\", translatedText?.length || 0);\n      console.log(\"📄 Translated text preview:\", translatedText?.substring(0, 100) || \"empty\");\n      \n      if (translatedText && translatedText.trim() !== '') {\n        updateItemState(enItem.id, { timingsText: translatedText, isTranslatingTimings: false });\n        toast({ title: getLocaleString('translateTimingsSuccessTitle', currentLanguage), description: getLocaleString('translateTimingsSuccessDesc', currentLanguage) });\n        console.log(\"✅ Translation process completed successfully\");\n      } else {\n        throw new Error(\"Перевод вернул пустой текст.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error translating timings text:\", error);\n      console.error(\"❌ Error details:\", {\n        name: error.name,\n        message: error.message,\n        stack: error.stack?.substring(0, 300)\n      });\n      \n      // Determine error type and provide specific feedback\n      let errorTitle = getLocaleString('translateTimingsErrorTitle', currentLanguage);\n      let errorDescription = error.message;\n      \n      if (error.message.includes('API key')) {\n        errorTitle = \"🔑 Ошибка API Ключа\";\n        errorDescription = \"OpenAI API ключ недоступен или недействителен. Проверьте настройки сервера.\";\n      } else if (error.message.includes('quota') || error.message.includes('limit')) {\n        errorTitle = \"💳 Превышен Лимит\";\n        errorDescription = \"Превышен лимит использования OpenAI API. Попробуйте позже.\";\n      } else if (error.message.includes('network') || error.message.includes('fetch')) {\n        errorTitle = \"🌐 Сетевая Ошибка\";\n        errorDescription = \"Проблема с подключением к OpenAI. Проверьте интернет-соединение.\";\n      } else if (error.message.includes('timeout')) {\n        errorTitle = \"⏱️ Таймаут\";\n        errorDescription = \"Запрос к OpenAI занял слишком много времени. Попробуйте снова.\";\n      }\n      \n      updateItemState(enItem.id, { \n        timingsText: `❌ ${errorDescription}`, \n        isTranslatingTimings: false \n      });\n      \n      toast({ \n        title: errorTitle, \n        description: errorDescription, \n        variant: \"destructive\",\n        duration: 8000  // Show error longer\n      });\n    }\n  }, [filesToProcess, updateItemState, currentLanguage, toast]);\n\n  useEffect(() => {\n    filesToProcess.forEach(item => {\n      if (item.lang === 'es' && item.timingsText && !item.translationTriggered) {\n        const enItem = filesToProcess.find(i => i.originalFileId === item.originalFileId && i.lang === 'en');\n        if (enItem) {\n          updateItemState(item.id, { translationTriggered: true });\n          handleTranslateTimings(item.id);\n        }\n      }\n    });\n  }, [filesToProcess, handleTranslateTimings, updateItemState]);\n\n\n  useEffect(() => {\n    return () => {\n      Object.values(pollingIntervals.current).forEach(clearInterval);\n    };\n  }, []);\n\n  const addFilesToQueue = useCallback(async (acceptedFiles) => {\n    const newItemsPromises = acceptedFiles.flatMap(async (file) => {\n      const nameWithoutExt = getFileNameWithoutExtension(file.name);\n      const langSuffixMatch = nameWithoutExt.match(/_([RUruESesENen]{2})$/i);\n      \n      if (langSuffixMatch) {\n        const lang = langSuffixMatch[1].toLowerCase();\n        if (lang === 'es') {\n           return Promise.all([\n            generateInitialItemData(file, 'es', currentLanguage, toast),\n            generateInitialItemData(file, 'en', currentLanguage, toast, 'es') \n          ]);\n        }\n        return [await generateInitialItemData(file, lang, currentLanguage, toast)];\n      } else {\n        const esDataPromise = generateInitialItemData(file, 'es', currentLanguage, toast);\n        const ruDataPromise = generateInitialItemData(file, 'ru', currentLanguage, toast);\n        \n        const esData = await esDataPromise;\n        const enDataPromise = generateInitialItemData(file, 'en', currentLanguage, toast, 'es', esData?.timingsText);\n        \n        return Promise.all([ruDataPromise, esDataPromise, enDataPromise]);\n      }\n    });\n\n    const newItemsArrays = await Promise.all(newItemsPromises);\n    const newItemsFlat = newItemsArrays.flat();\n    setFilesToProcess(prev => [...prev, ...newItemsFlat.filter(item => item !== null)]);\n  }, [currentLanguage, toast]);\n\n  const processSingleItem = useCallback(async (itemData, forceOverwrite = false) => {\n    return processSingleItemService({\n        itemData,\n        forceOverwrite,\n        updateItemState,\n        currentLanguage,\n        toast,\n        openOverwriteDialog,\n        pollingIntervalsRef: pollingIntervals,\n        getAllItems: () => filesToProcess \n    });\n  }, [updateItemState, currentLanguage, toast, openOverwriteDialog, filesToProcess]);\n\n\n  const handleProcessAllFiles = useCallback(async () => {\n    if (isDialogOpen.current) return;\n    setIsProcessingAll(true);\n    \n    let encounteredDialogInThisRun = false;\n\n    for (const item of filesToProcess) {\n      if (isDialogOpen.current) {\n        encounteredDialogInThisRun = true;\n        break; \n      }\n      if (!item.uploadComplete && !item.uploadError && !item.isUploading) { \n        const result = await processSingleItem(item);\n        if (!result.success && result.requiresDialog) {\n            encounteredDialogInThisRun = true;\n            break; \n        }\n      }\n    }\n    \n    if (!encounteredDialogInThisRun) {\n        setIsProcessingAll(false);\n        const allProcessedSuccessfully = filesToProcess.every(f => f.uploadComplete || f.uploadError);\n        const someFailed = filesToProcess.some(f => f.uploadError);\n\n        if (filesToProcess.length > 0) {\n            if (allProcessedSuccessfully && !someFailed) {\n                 toast({ title: getLocaleString('allFilesProcessedTitle', currentLanguage), description: getLocaleString('allFilesProcessedDesc', currentLanguage), duration: 5000 });\n            } else if (someFailed) {\n                 toast({ title: getLocaleString('processingErrorsTitle', currentLanguage), description: getLocaleString('processingErrorsDesc', currentLanguage), variant: \"destructive\", duration: 7000 });\n            }\n        }\n    }\n  }, [filesToProcess, processSingleItem, currentLanguage, toast]);\n\n\n  const handleTimingsChange = (itemUniqueId, newText) => {\n    setFilesToProcess(prev => {\n        const updatedFiles = prev.map(item => item.id === itemUniqueId ? { ...item, timingsText: newText, translationTriggered: false } : item);\n        const changedItem = updatedFiles.find(item => item.id === itemUniqueId);\n\n        if (changedItem && changedItem.lang === 'es' && newText.trim()) {\n            const enItem = updatedFiles.find(item => item.originalFileId === changedItem.originalFileId && item.lang === 'en');\n            if (enItem) {\n                handleTranslateTimings(changedItem.id);\n            }\n        }\n        return updatedFiles;\n    });\n  };\n\n\n  const handleTitleChange = (itemUniqueId, newTitle) => {\n     setFilesToProcess(prev => prev.map(item => item.id === itemUniqueId ? { ...item, episodeTitle: newTitle } : item));\n  };\n  \n  const handleRemoveItem = (itemIdToRemove) => {\n     setFilesToProcess(prev => {\n        const itemToRemove = prev.find(item => item.id === itemIdToRemove);\n        if (itemToRemove && pollingIntervals.current[itemToRemove.id]) {\n            clearInterval(pollingIntervals.current[itemToRemove.id]);\n            delete pollingIntervals.current[itemToRemove.id];\n        }\n        return prev.filter(item => item.id !== itemIdToRemove);\n     });\n  };\n\n  const confirmOverwrite = async () => {\n    const itemToProcess = currentItemForOverwrite;\n    const resolvePromise = overwritePromiseResolve.current;\n    \n    closeOverwriteDialog();\n\n    if (itemToProcess && resolvePromise) {\n      updateItemState(itemToProcess.id, { uploadError: null, isUploading: true, uploadProgress: 0, uploadComplete: false, transcriptionStatus: null, transcriptionError: null }); \n      const result = await processSingleItem(itemToProcess, true);\n      if (typeof resolvePromise === 'function') {\n        resolvePromise(result.success);\n      }\n      \n      if (isProcessingAll) {\n         setIsProcessingAll(false); \n         handleProcessAllFiles(); \n      }\n    } else if (isProcessingAll) {\n        setIsProcessingAll(false); \n    }\n  };\n\n  const cancelOverwrite = () => {\n    const itemToCancel = currentItemForOverwrite;\n    const resolvePromise = overwritePromiseResolve.current;\n\n    closeOverwriteDialog();\n\n    if (itemToCancel) {\n      updateItemState(itemToCancel.id, { isUploading: false, uploadError: getLocaleString('uploadCancelledEpisodeExists', currentLanguage) });\n    }\n    if (resolvePromise && typeof resolvePromise === 'function') {\n        resolvePromise(false);\n    }\n    \n    if (isProcessingAll) {\n        setIsProcessingAll(false);\n    }\n  };\n\n  return {\n    filesToProcess,\n    isProcessingAll,\n    showOverwriteDialog,\n    currentItemForOverwrite,\n    addFilesToQueue,\n    handleProcessAllFiles,\n    handleTimingsChange,\n    handleTitleChange,\n    handleRemoveItem,\n    confirmOverwrite,\n    cancelOverwrite,\n  };\n};\n\nexport default useFileUploadManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/useOfflineEpisodeData.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/useOfflineSegmentEditing.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/useQuestionManagement.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'initialDialogTimeSet' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\n\nconst useQuestionManagement = (\n  currentTime,\n  currentLanguage,\n  audioRef,\n  mainPlayerSeekAudio,\n  duration,\n  episodeSlug, \n  episodeDate,\n  episodeLang // Added episodeLang\n) => {\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isBatchAddDialogOpen, setIsBatchAddDialogOpen] = useState(false);\n  const [currentQuestionData, setCurrentQuestionData] = useState(null);\n  const [isAddingQuestion, setIsAddingQuestion] = useState(false);\n  const [dialogTime, setDialogTime] = useState(0);\n  const [questionLang, setQuestionLang] = useState(currentLanguage);\n  const [batchQuestionsText, setBatchQuestionsText] = useState('');\n  const [initialDialogTimeSet, setInitialDialogTimeSet] = useState(false);\n  const [isAddQuestionFromSegmentDialogOpen, setIsAddQuestionFromSegmentDialogOpen] = useState(false);\n  const [segmentForQuestion, setSegmentForQuestion] = useState(null);\n\n\n  const openEditDialog = useCallback((question) => {\n    let langForDialog = question.lang || currentLanguage;\n    if (currentLanguage === 'en' && episodeLang === 'es' && question.lang !== 'en') {\n      langForDialog = 'en';\n    }\n\n    setCurrentQuestionData({ ...question, time: parseFloat(question.time.toFixed(2)) });\n    setDialogTime(parseFloat(question.time.toFixed(2)));\n    setQuestionLang(langForDialog);\n    setIsAddingQuestion(false);\n    setIsEditDialogOpen(true);\n    setInitialDialogTimeSet(true);\n  }, [currentLanguage, episodeLang]);\n\n  const openAddDialog = useCallback(() => {\n    const newTime = parseFloat(audioRef.current?.currentTime.toFixed(2) || currentTime.toFixed(2));\n    let langForNewQuestion = currentLanguage;\n    if (currentLanguage === 'en' && episodeLang === 'es') {\n      langForNewQuestion = 'en';\n    }\n    setCurrentQuestionData({ id: null, time: newTime, title: '', episode_slug: episodeSlug, lang: langForNewQuestion });\n    setDialogTime(newTime);\n    setQuestionLang(langForNewQuestion);\n    setIsAddingQuestion(true);\n    setIsEditDialogOpen(true);\n    setInitialDialogTimeSet(false);\n  }, [currentTime, currentLanguage, audioRef, episodeSlug, episodeLang]);\n\n  const openBatchAddDialog = useCallback(() => {\n    setIsBatchAddDialogOpen(true);\n  }, []);\n  \n  const openAddQuestionFromSegmentDialog = useCallback((segment) => {\n    setSegmentForQuestion(segment);\n    setIsAddQuestionFromSegmentDialogOpen(true);\n  }, []);\n\n  const closeDialog = useCallback(() => {\n    setIsEditDialogOpen(false);\n    setInitialDialogTimeSet(false);\n  }, []);\n\n  const closeBatchAddDialog = useCallback(() => {\n    setIsBatchAddDialogOpen(false);\n    setBatchQuestionsText('');\n  }, []);\n  \n  const closeAddQuestionFromSegmentDialog = useCallback(() => {\n    setIsAddQuestionFromSegmentDialogOpen(false);\n    setSegmentForQuestion(null);\n  }, []);\n\n  const handleDialogTimeInputChange = useCallback((e) => {\n    const parts = e.target.value.split(':').map(Number);\n    let newTimeValue = 0;\n    if (parts.length === 3) newTimeValue = parts[0] * 3600 + parts[1] * 60 + parts[2];\n    else if (parts.length === 2) newTimeValue = parts[0] * 60 + parts[1];\n    else if (parts.length === 1 && !isNaN(parts[0])) newTimeValue = parts[0];\n    else { setDialogTime(NaN); return; }\n\n    if (!isNaN(newTimeValue) && newTimeValue >= 0 && newTimeValue <= (duration || Infinity)) {\n      setDialogTime(newTimeValue);\n      setCurrentQuestionData(prev => ({ ...prev, time: newTimeValue }));\n      if (mainPlayerSeekAudio) mainPlayerSeekAudio(newTimeValue, false);\n    } else if (e.target.value === \"\") {\n      setDialogTime(0);\n      setCurrentQuestionData(prev => ({ ...prev, time: 0 }));\n    }\n  }, [duration, mainPlayerSeekAudio]);\n\n  const handleDialogTimeAdjust = useCallback((amount) => {\n    const newTime = Math.max(0, Math.min(duration || Infinity, dialogTime + amount));\n    setDialogTime(newTime);\n    setCurrentQuestionData(prev => ({ ...prev, time: newTime }));\n    if (mainPlayerSeekAudio) mainPlayerSeekAudio(newTime, true);\n  }, [dialogTime, duration, mainPlayerSeekAudio]);\n\n  return {\n    isEditDialogOpen,\n    isBatchAddDialogOpen,\n    currentQuestionData,\n    isAddingQuestion,\n    dialogTime,\n    questionLang,\n    batchQuestionsText,\n    isAddQuestionFromSegmentDialogOpen,\n    segmentForQuestion,\n    openEditDialog,\n    openAddDialog,\n    openBatchAddDialog,\n    closeDialog,\n    closeBatchAddDialog,\n    handleDialogTimeInputChange,\n    handleDialogTimeAdjust,\n    setCurrentQuestionData,\n    setBatchQuestionsText,\n    setDialogTime,\n    setQuestionLang,\n    openAddQuestionFromSegmentDialog,\n    closeAddQuestionFromSegmentDialog,\n  };\n};\n\nexport default useQuestionManagement;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/useSegmentEditing.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'logService' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'logEntityId' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":79,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":20}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback } from 'react';\nimport { useToast } from '@/components/ui/use-toast';\nimport { getLocaleString } from '@/lib/locales';\nimport logService from '@/lib/logService';\n\nconst useSegmentEditing = (\n  utterances, \n  onSaveEditedSegment, \n  audioRef, \n  currentLanguage,\n  user,\n  episodeSlug\n) => {\n  const [editingSegment, setEditingSegment] = useState(null);\n  const [editedText, setEditedText] = useState('');\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const [confirmDialogProps, setConfirmDialogProps] = useState({});\n  const [textareaRef, setTextareaRef] = useState(null);\n  const [isSaving, setIsSaving] = useState(false);\n  const initialAudioState = useRef({ isPlaying: false, currentTime: 0 });\n  const { toast } = useToast();\n\n  const handleEditSegment = useCallback((segmentToEdit) => {\n    if (audioRef?.current) {\n      initialAudioState.current = {\n        isPlaying: !audioRef.current.paused,\n        currentTime: audioRef.current.currentTime,\n      };\n    }\n    setEditingSegment(segmentToEdit);\n    setEditedText(segmentToEdit ? segmentToEdit.text : '');\n  }, [audioRef]);\n\n  const restoreAudioState = useCallback(() => {\n    if (audioRef?.current && initialAudioState.current.isPlaying && audioRef.current.paused) {\n      audioRef.current.currentTime = initialAudioState.current.currentTime;\n      audioRef.current.play().catch(e => console.error(\"Error restoring audio play state:\", e));\n    } else if (audioRef?.current) {\n      audioRef.current.currentTime = initialAudioState.current.currentTime;\n    }\n  }, [audioRef]);\n\n  const handleSaveCurrentSegmentEdit = useCallback(async () => {\n    if (!editingSegment || isSaving) return;\n    \n    setIsSaving(true);\n    try {\n      const updatedSegment = { ...editingSegment, text: editedText };\n      const newUtterances = utterances.map(utt =>\n        (utt.id || utt.start) === (editingSegment.id || editingSegment.start) ? updatedSegment : utt\n      );\n      const originalSegment = utterances.find(utt => (utt.id || utt.start) === (editingSegment.id || editingSegment.start));\n      \n      await onSaveEditedSegment(newUtterances, 'update', originalSegment, updatedSegment);\n      \n      setEditingSegment(null);\n      toast({\n        title: getLocaleString('transcriptSegmentUpdatedTitle', currentLanguage),\n        description: getLocaleString('transcriptSegmentUpdatedDesc', currentLanguage),\n        className: \"bg-green-600/80 border-green-500 text-white\"\n      });\n      restoreAudioState();\n    } catch (error) {\n      console.error(\"Failed to save segment:\", error);\n      toast({ title: \"Save Error\", description: error.message, variant: \"destructive\" });\n    } finally {\n      setIsSaving(false);\n    }\n  }, [editingSegment, isSaving, editedText, utterances, onSaveEditedSegment, toast, currentLanguage, restoreAudioState]);\n\n  const handleCancelEdit = useCallback(() => {\n    setEditingSegment(null);\n    restoreAudioState();\n  }, [restoreAudioState]);\n\n  const executeAction = useCallback(async (actionType, segmentToModify, textContent, cursorPos) => {\n    let newUtterances;\n    const originalUtterances = JSON.parse(JSON.stringify(utterances)); \n    let logEntityId = segmentToModify.id || segmentToModify.start;\n    let actionDetail = {};\n\n    switch (actionType) {\n      case 'Split': {\n        if (textareaRef?.current && textareaRef.current.selectionStart !== undefined) {\n          cursorPos = textareaRef.current.selectionStart;\n        } else if (cursorPos === undefined || cursorPos === null) {\n          toast({ title: getLocaleString('errorSplittingSegment', currentLanguage), description: getLocaleString('cursorPositionRequired', currentLanguage), variant: 'destructive' });\n          return;\n        }\n        const textBefore = textContent.substring(0, cursorPos).trim();\n        const textAfter = textContent.substring(cursorPos).trim();\n        if (!textBefore || !textAfter || !segmentToModify.words || segmentToModify.words.length === 0) {\n          toast({ title: getLocaleString('errorSplittingSegment', currentLanguage), description: getLocaleString('cannotSplitEmpty', currentLanguage), variant: 'destructive' });\n          return;\n        }\n        let splitWordIndex = -1;\n        let cumulativeLength = 0;\n        for (let i = 0; i < segmentToModify.words.length; i++) {\n          cumulativeLength += segmentToModify.words[i].text.length + (i > 0 ? 1 : 0);\n          if (cumulativeLength >= cursorPos) {\n            splitWordIndex = i;\n            break;\n          }\n        }\n        if (splitWordIndex === -1 || splitWordIndex >= segmentToModify.words.length - 1) {\n          toast({ title: getLocaleString('errorSplittingSegment', currentLanguage), description: getLocaleString('cannotSplitAtPosition', currentLanguage), variant: 'destructive' });\n          return;\n        }\n        const wordsBefore = segmentToModify.words.slice(0, splitWordIndex + 1);\n        const wordsAfter = segmentToModify.words.slice(splitWordIndex + 1);\n        if (wordsBefore.length === 0 || wordsAfter.length === 0) {\n          toast({ title: getLocaleString('errorSplittingSegment', currentLanguage), description: getLocaleString('cannotSplitIntoEmpty', currentLanguage), variant: 'destructive' });\n          return;\n        }\n        const newSegment1 = { ...segmentToModify, text: textBefore, end: wordsBefore[wordsBefore.length - 1].end, words: wordsBefore, id: segmentToModify.id || `${segmentToModify.start}-split1-${Date.now()}` };\n        const newSegment2 = { ...segmentToModify, start: wordsAfter[0].start, text: textAfter, words: wordsAfter, id: `${segmentToModify.start}-split2-${Date.now()}` };\n        const segmentIndexInAllUtterances = utterances.findIndex(utt => (utt.id || utt.start) === (segmentToModify.id || segmentToModify.start));\n        if (segmentIndexInAllUtterances === -1) return;\n        newUtterances = [...utterances.slice(0, segmentIndexInAllUtterances), newSegment1, newSegment2, ...utterances.slice(segmentIndexInAllUtterances + 1)];\n        actionDetail = { splitAt: cursorPos, segment1: newSegment1, segment2: newSegment2 };\n        break;\n      }\n      case 'Merge': {\n        const currentSegmentIndex = utterances.findIndex(utt => (utt.id || utt.start) === (segmentToModify.id || segmentToModify.start));\n        if (currentSegmentIndex <= 0) {\n          toast({ title: getLocaleString('errorMergingSegment', currentLanguage), description: getLocaleString('cannotMergeFirstSegment', currentLanguage), variant: 'destructive' });\n          return;\n        }\n        const previousSegment = utterances[currentSegmentIndex - 1];\n        const mergedText = `${previousSegment.text} ${segmentToModify.text}`.trim();\n        const mergedWords = [...(previousSegment.words || []), ...(segmentToModify.words || [])].sort((a, b) => a.start - b.start);\n        const mergedSegment = { ...previousSegment, text: mergedText, end: segmentToModify.end, words: mergedWords, id: previousSegment.id || `${previousSegment.start}-merged-${Date.now()}` };\n        newUtterances = [...utterances.slice(0, currentSegmentIndex - 1), mergedSegment, ...utterances.slice(currentSegmentIndex + 1)];\n        actionDetail = { mergedWith: previousSegment.id || previousSegment.start, resultingSegment: mergedSegment };\n        break;\n      }\n      case 'Delete': {\n        newUtterances = utterances.filter(utt => (utt.id || utt.start) !== (segmentToModify.id || segmentToModify.start));\n        actionDetail = { deletedSegment: segmentToModify };\n        break;\n      }\n      default:\n        return;\n    }\n    if (newUtterances) {\n      await onSaveEditedSegment(newUtterances, actionType.toLowerCase(), segmentToModify, newUtterances.find(utt => utt.id === (actionDetail.resultingSegment?.id || actionDetail.segment1?.id) ) || null, originalUtterances);\n      setEditingSegment(null);\n      restoreAudioState();\n    }\n  }, [utterances, onSaveEditedSegment, toast, currentLanguage, restoreAudioState, textareaRef, user, episodeSlug]);\n\n  const performActionWithConfirmation = useCallback((actionType, segmentToModify, textContent, cursorPos) => {\n    const dontAskAgainKey = `confirm${actionType}SegmentDisabled`;\n    const isDisabled = localStorage.getItem(dontAskAgainKey) === 'true';\n\n    if (isDisabled) {\n      executeAction(actionType, segmentToModify, textContent, cursorPos);\n      return;\n    }\n\n    let titleKey, descriptionKey;\n    switch (actionType) {\n      case 'Split': titleKey = 'confirmSplitTitle'; descriptionKey = 'confirmSplitDescription'; break;\n      case 'Merge': titleKey = 'confirmMergeTitle'; descriptionKey = 'confirmMergeDescription'; break;\n      case 'Delete': titleKey = 'confirmDeleteSegmentTitle'; descriptionKey = 'confirmDeleteSegmentDescription'; break;\n      default: return;\n    }\n\n    setConfirmDialogProps({\n      title: getLocaleString(titleKey, currentLanguage),\n      description: getLocaleString(descriptionKey, currentLanguage),\n      onConfirm: () => {\n        executeAction(actionType, segmentToModify, textContent, cursorPos);\n        setShowConfirmDialog(false);\n      },\n      onCancel: () => setShowConfirmDialog(false),\n      actionType\n    });\n    setShowConfirmDialog(true);\n  }, [executeAction, currentLanguage]);\n\n  return {\n    editingSegment,\n    setEditingSegment,\n    editedText,\n    setEditedText,\n    showConfirmDialog,\n    confirmDialogProps,\n    textareaRef, \n    setTextareaRef,\n    handleEditSegment,\n    handleSaveCurrentSegmentEdit,\n    handleCancelEdit,\n    performActionWithConfirmation,\n    setShowConfirmDialog,\n    isSaving,\n  };\n};\n\nexport default useSegmentEditing;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/hooks/useTranscript.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useState' is defined but never used. Allowed unused vars must match /^React$/u.","line":1,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'useRef' is defined but never used. Allowed unused vars must match /^React$/u.","line":1,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'setIsPollingTranscript' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":26,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":27},{"ruleId":"no-unused-vars","severity":1,"message":"'transcriptionJobId' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":27,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\nimport { useToast } from '@/components/ui/use-toast';\nimport useTranscriptData from '@/hooks/transcript/useTranscriptData';\nimport useTranscriptAssemblyAI from '@/hooks/transcript/useTranscriptAssemblyAI';\nimport useTranscriptPlayerSync from '@/hooks/transcript/useTranscriptPlayerSync';\nimport { supabase } from '@/lib/supabaseClient';\nimport { getLocaleString } from '@/lib/locales';\nimport { processTranscriptData } from './transcript/transcriptProcessingUtils';\n\nconst useTranscript = (episodeSlug, episodeAudioUrl, episodeLang, currentLanguage, audioRef, externalTranscriptUtterances) => {\n  const { toast } = useToast();\n  \n  const {\n    transcript,\n    setTranscript,\n    transcriptDbId,\n    setTranscriptDbId,\n    isLoadingTranscript,\n    setIsLoadingTranscript,\n    transcriptError,\n    setTranscriptError,\n  } = useTranscriptData(externalTranscriptUtterances);\n\n  const {\n    isPollingTranscript,\n    setIsPollingTranscript,\n    transcriptionJobId,\n    setTranscriptionJobId,\n    pollingTimeoutRef,\n    determineAssemblyLangForEpisode,\n    pollTranscriptStatus,\n    handleStartTranscription,\n  } = useTranscriptAssemblyAI(\n    episodeSlug, \n    episodeAudioUrl, \n    episodeLang, \n    currentLanguage, \n    toast, \n    setTranscript, \n    setTranscriptDbId, \n    setIsLoadingTranscript, \n    setTranscriptError,\n    transcript,\n    transcriptDbId\n  );\n\n  const {\n    activeSegmentTime,\n    setActiveSegmentTime,\n    segmentPlaying,\n    setSegmentPlaying,\n  } = useTranscriptPlayerSync(audioRef, transcript);\n\n  const fetchTranscript = useCallback(async () => {\n    if (!episodeSlug) return;\n    setIsLoadingTranscript(true);\n    setTranscriptError(null);\n    try {\n      const transcriptLangForQuery = episodeLang === 'all' ? currentLanguage : episodeLang;\n      \n      const { data, error: fetchError } = await supabase\n        .from('transcripts')\n        .select('id, episode_slug, lang, assemblyai_transcript_id, status, transcript_data, edited_transcript_data')\n        .eq('episode_slug', episodeSlug)\n        .eq('lang', transcriptLangForQuery)\n        .order('created_at', { ascending: false })\n        .limit(1)\n        .maybeSingle(); \n\n      if (fetchError && fetchError.code !== 'PGRST116') throw fetchError;\n      \n      if (data) {\n        setTranscriptDbId(data.id);\n        setTranscriptionJobId(data.assemblyai_transcript_id);\n        \n        const displayData = data.edited_transcript_data || data.transcript_data;\n        setTranscript(displayData); // processTranscriptData is now inside useTranscriptData's setTranscript\n\n        if (data.status === 'completed' && displayData) {\n          // Already set by setTranscript\n        } else if (data.status === 'processing' || data.status === 'queued') {\n          toast({ title: getLocaleString('transcriptionInProgressTitle', currentLanguage), description: getLocaleString('transcriptionInProgressDescription', currentLanguage) });\n          const assemblyLangForPolling = data.lang === 'ru' ? 'ru' : (data.lang === 'es' ? 'es' : determineAssemblyLangForEpisode());\n          if (pollingTimeoutRef.current) clearTimeout(pollingTimeoutRef.current);\n          pollTranscriptStatus(data.assemblyai_transcript_id, data.id, assemblyLangForPolling);\n        } else if (data.status === 'error') {\n            const errorMessage = data.transcript_data?.error || getLocaleString('unknownError', currentLanguage);\n            setTranscriptError(getLocaleString('transcriptionError', currentLanguage) + `: ${errorMessage}`);\n            toast({ title: getLocaleString('transcriptionErrorTitle', currentLanguage), description: getLocaleString('transcriptionError', currentLanguage) + `: ${errorMessage}`, variant: 'destructive' });\n            setTranscript(null);\n        } else {\n          setTranscript(null); \n          setTranscriptError(getLocaleString('noTranscriptAvailableYet', currentLanguage));\n        }\n      } else {\n        setTranscript(null);\n        setTranscriptError(getLocaleString('noTranscriptAvailableYet', currentLanguage));\n      }\n    } catch (err) {\n      if (err.code !== 'PGRST116') { \n        setTranscriptError(getLocaleString('errorFetchingTranscript', currentLanguage, { errorMessage: err.message }));\n        toast({ title: getLocaleString('errorGeneric', currentLanguage), description: err.message, variant: 'destructive' });\n      } else {\n         setTranscript(null);\n         setTranscriptError(getLocaleString('noTranscriptAvailableYet', currentLanguage));\n      }\n    } finally {\n      setIsLoadingTranscript(false);\n    }\n  }, [\n      episodeSlug, \n      episodeLang, \n      currentLanguage, \n      setIsLoadingTranscript, \n      setTranscriptError, \n      setTranscriptDbId, \n      setTranscriptionJobId, \n      setTranscript, \n      toast, \n      determineAssemblyLangForEpisode, \n      pollTranscriptStatus,\n      pollingTimeoutRef\n    ]);\n\n  useEffect(() => {\n    if (!externalTranscriptUtterances) { // Only fetch if not provided externally (e.g. from PlayerPage)\n        fetchTranscript();\n    }\n    return () => {\n        if (pollingTimeoutRef.current) {\n            clearTimeout(pollingTimeoutRef.current);\n        }\n    }\n  }, [fetchTranscript, externalTranscriptUtterances]);\n\n\n  const handleSaveEditedSegment = async (updatedUtterances) => {\n    if (!transcript) return;\n    // Автоматически разбиваем длинные сегменты\n    const processedTranscript = processTranscriptData({ ...transcript, utterances: updatedUtterances, words: transcript.words });\n    const newEditedTranscriptData = { \n      ...transcript, \n      utterances: processedTranscript.utterances,\n      text: processedTranscript.utterances.map(u => u.text).join(' '),\n      words: transcript.words || [] \n    };\n    setTranscript(newEditedTranscriptData);\n    try {\n      const { error: updateError } = await supabase\n        .from('transcripts')\n        .update({ edited_transcript_data: newEditedTranscriptData })\n        .eq('id', transcriptDbId);\n      if (updateError) {\n        console.error(\"Error updating segment in DB:\", updateError);\n        toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('errorUpdatingSegment', currentLanguage, { errorMessage: updateError.message }), variant: 'destructive' });\n        fetchTranscript(); \n      } else {\n        toast({ title: getLocaleString('transcriptSegmentUpdatedTitle', currentLanguage), description: getLocaleString('transcriptSegmentUpdatedDesc', currentLanguage), variant: \"default\" });\n      }\n    } catch (err) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('errorUpdatingSegment', currentLanguage, { errorMessage: err.message }), variant: 'destructive' });\n      fetchTranscript(); \n    }\n  };\n\n  return {\n    transcript,\n    isLoadingTranscript,\n    transcriptError,\n    isPollingTranscript,\n    fetchTranscript,\n    handleStartTranscription,\n    handleSaveEditedSegment,\n    determineAssemblyLangForEpisode,\n    activeSegmentTime,\n    setActiveSegmentTime,\n    segmentPlaying,\n    setSegmentPlaying,\n  };\n};\n\nexport default useTranscript;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/assemblyAIService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/audioCacheService.js","messages":[{"ruleId":"no-constant-condition","severity":2,"message":"Unexpected constant condition.","line":171,"column":12,"nodeType":"Literal","messageId":"unexpected","endLine":171,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import offlineDataService from './offlineDataService';\n\nclass AudioCacheService {\n  constructor() {\n    this.cacheInProgress = new Set();\n    this.maxCacheSize = 200 * 1024 * 1024; // 200MB максимум\n    this.downloadListeners = [];\n  }\n\n  // Подписка на события загрузки\n  onDownloadProgress(callback) {\n    this.downloadListeners.push(callback);\n    return () => {\n      this.downloadListeners = this.downloadListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Уведомление слушателей о прогрессе\n  notifyDownloadListeners(event, data = {}) {\n    this.downloadListeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('[AudioCache] Download listener error:', error);\n      }\n    });\n  }\n\n  // Проверка, есть ли аудио в кеше\n  async isAudioCached(url) {\n    try {\n      // Проверяем в Service Worker кеше\n      if ('caches' in window) {\n        const cache = await caches.open('audio-v1');\n        const response = await cache.match(url);\n        if (response) {\n          return true;\n        }\n      }\n\n      // Проверяем метаданные в IndexedDB\n      await offlineDataService.init();\n      const metadata = await offlineDataService.getAudioFileMetadata(url);\n      return !!metadata;\n    } catch (error) {\n      console.error('[AudioCache] Error checking cache:', error);\n      return false;\n    }\n  }\n\n  // Получение размера кешированного аудио\n  async getCachedAudioSize(url) {\n    try {\n      await offlineDataService.init();\n      const metadata = await offlineDataService.getAudioFileMetadata(url);\n      return metadata ? metadata.size : 0;\n    } catch (error) {\n      console.error('[AudioCache] Error getting cached audio size:', error);\n      return 0;\n    }\n  }\n\n  // Кеширование аудиофайла\n  async cacheAudio(url, episodeSlug, forceRedownload = false) {\n    // Предотвращаем множественные загрузки одного файла\n    if (this.cacheInProgress.has(url)) {\n      console.log('[AudioCache] Already caching:', url);\n      return false;\n    }\n\n    // Проверяем, есть ли уже в кеше\n    if (!forceRedownload && await this.isAudioCached(url)) {\n      console.log('[AudioCache] Already cached:', url);\n      await offlineDataService.updateAudioFileAccess(url);\n      return true;\n    }\n\n    this.cacheInProgress.add(url);\n    \n    try {\n      await offlineDataService.init();\n      \n      this.notifyDownloadListeners('download_start', { url, episodeSlug });\n      \n      // Проверяем доступное место\n      const storageEstimate = await offlineDataService.getStorageUsage();\n      const availableSpace = storageEstimate.quota - storageEstimate.usage;\n      \n      if (availableSpace < 50 * 1024 * 1024) { // Минимум 50MB свободного места\n        throw new Error('Insufficient storage space');\n      }\n\n      // Загружаем файл с отслеживанием прогресса\n      const response = await this.fetchWithProgress(url, (loaded, total) => {\n        const progress = total > 0 ? Math.round((loaded / total) * 100) : 0;\n        this.notifyDownloadListeners('download_progress', {\n          url,\n          episodeSlug,\n          loaded,\n          total,\n          progress\n        });\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const contentLength = response.headers.get('content-length');\n      const fileSize = contentLength ? parseInt(contentLength) : 0;\n\n      // Проверяем размер файла\n      if (fileSize > this.maxCacheSize * 0.5) { // Не более 50% от максимального размера кеша\n        throw new Error('File too large for caching');\n      }\n\n      // Кешируем в Service Worker\n      if ('caches' in window) {\n        const cache = await caches.open('audio-v1');\n        \n        // Управляем размером кеша\n        await this.manageCacheSize(cache, fileSize);\n        \n        // Сохраняем в кеш\n        await cache.put(url, response.clone());\n        console.log('[AudioCache] Cached in SW:', url);\n      }\n\n      // Сохраняем метаданные в IndexedDB\n      await offlineDataService.saveAudioFileMetadata(url, episodeSlug, fileSize);\n      \n      this.notifyDownloadListeners('download_complete', {\n        url,\n        episodeSlug,\n        size: fileSize\n      });\n      \n      console.log('[AudioCache] Successfully cached audio:', url);\n      return true;\n      \n    } catch (error) {\n      console.error('[AudioCache] Failed to cache audio:', error);\n      \n      this.notifyDownloadListeners('download_error', {\n        url,\n        episodeSlug,\n        error: error.message\n      });\n      \n      throw error;\n    } finally {\n      this.cacheInProgress.delete(url);\n    }\n  }\n\n  // Загрузка с отслеживанием прогресса\n  async fetchWithProgress(url, onProgress) {\n    const response = await fetch(url);\n    \n    if (!response.body) {\n      return response;\n    }\n\n    const contentLength = response.headers.get('content-length');\n    const total = contentLength ? parseInt(contentLength) : 0;\n    let loaded = 0;\n\n    const reader = response.body.getReader();\n    const chunks = [];\n\n    while (true) {\n      const { done, value } = await reader.read();\n      \n      if (done) break;\n      \n      chunks.push(value);\n      loaded += value.length;\n      \n      if (onProgress) {\n        onProgress(loaded, total);\n      }\n    }\n\n    // Создаем новый Response из собранных чанков\n    const allChunks = new Uint8Array(loaded);\n    let position = 0;\n    \n    for (const chunk of chunks) {\n      allChunks.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return new Response(allChunks, {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers\n    });\n  }\n\n  // Управление размером кеша\n  async manageCacheSize(cache, newFileSize) {\n    try {\n      const keys = await cache.keys();\n      let totalSize = newFileSize;\n      const filesWithSize = [];\n\n      // Подсчитываем текущий размер кеша\n      for (const request of keys) {\n        const response = await cache.match(request);\n        if (response) {\n          const size = await this.getResponseSize(response);\n          totalSize += size;\n          filesWithSize.push({\n            request,\n            size,\n            url: request.url\n          });\n        }\n      }\n\n      // Если превышаем лимит, удаляем старые файлы\n      if (totalSize > this.maxCacheSize) {\n        console.log('[AudioCache] Cache size exceeded, cleaning up...');\n        \n        // Сортируем по времени последнего доступа\n        await offlineDataService.init();\n        const sortedFiles = [];\n        \n        for (const file of filesWithSize) {\n          const metadata = await offlineDataService.getAudioFileMetadata(file.url);\n          sortedFiles.push({\n            ...file,\n            lastAccessed: metadata ? metadata.last_accessed : 0\n          });\n        }\n        \n        // Сортируем по времени последнего доступа (старые сначала)\n        sortedFiles.sort((a, b) => a.lastAccessed - b.lastAccessed);\n        \n        // Удаляем файлы пока не освободим достаточно места\n        let freedSpace = 0;\n        const targetSpace = this.maxCacheSize * 0.3; // Освобождаем 30% места\n        \n        for (const file of sortedFiles) {\n          if (freedSpace >= targetSpace) break;\n          \n          await cache.delete(file.request);\n          await offlineDataService.getTransaction(['audioFiles'], 'readwrite')\n            .objectStore('audioFiles')\n            .delete(file.url);\n          \n          freedSpace += file.size;\n          console.log('[AudioCache] Removed from cache:', file.url);\n        }\n      }\n    } catch (error) {\n      console.error('[AudioCache] Error managing cache size:', error);\n    }\n  }\n\n  // Получение размера ответа\n  async getResponseSize(response) {\n    try {\n      const contentLength = response.headers.get('content-length');\n      if (contentLength) {\n        return parseInt(contentLength);\n      }\n      \n      // Если нет заголовка content-length, клонируем и считаем\n      const cloned = response.clone();\n      const arrayBuffer = await cloned.arrayBuffer();\n      return arrayBuffer.byteLength;\n    } catch (error) {\n      console.error('[AudioCache] Error getting response size:', error);\n      return 0;\n    }\n  }\n\n  // Удаление аудио из кеша\n  async removeAudioFromCache(url) {\n    try {\n      // Удаляем из Service Worker кеша\n      if ('caches' in window) {\n        const cache = await caches.open('audio-v1');\n        await cache.delete(url);\n      }\n\n      // Удаляем метаданные из IndexedDB\n      await offlineDataService.init();\n      const transaction = offlineDataService.getTransaction(['audioFiles'], 'readwrite');\n      const store = transaction.objectStore('audioFiles');\n      await new Promise((resolve, reject) => {\n        const request = store.delete(url);\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n\n      console.log('[AudioCache] Removed audio from cache:', url);\n      return true;\n    } catch (error) {\n      console.error('[AudioCache] Error removing audio from cache:', error);\n      return false;\n    }\n  }\n\n  // Получение списка кешированных аудиофайлов\n  async getCachedAudioList() {\n    try {\n      await offlineDataService.init();\n      const transaction = offlineDataService.getTransaction(['audioFiles']);\n      const store = transaction.objectStore('audioFiles');\n      \n      return new Promise((resolve, reject) => {\n        const request = store.getAll();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n    } catch (error) {\n      console.error('[AudioCache] Error getting cached audio list:', error);\n      return [];\n    }\n  }\n\n  // Получение общего размера кеша\n  async getCacheSize() {\n    try {\n      const cachedFiles = await this.getCachedAudioList();\n      return cachedFiles.reduce((total, file) => total + (file.size || 0), 0);\n    } catch (error) {\n      console.error('[AudioCache] Error getting cache size:', error);\n      return 0;\n    }\n  }\n\n  // Очистка всего кеша\n  async clearCache() {\n    try {\n      // Очищаем Service Worker кеш\n      if ('caches' in window) {\n        await caches.delete('audio-v1');\n      }\n\n      // Очищаем метаданные из IndexedDB\n      await offlineDataService.init();\n      const transaction = offlineDataService.getTransaction(['audioFiles'], 'readwrite');\n      const store = transaction.objectStore('audioFiles');\n      \n      await new Promise((resolve, reject) => {\n        const request = store.clear();\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n      });\n\n      console.log('[AudioCache] Cache cleared');\n      return true;\n    } catch (error) {\n      console.error('[AudioCache] Error clearing cache:', error);\n      return false;\n    }\n  }\n\n  // Предварительное кеширование аудио для эпизода\n  async preloadAudio(episodeData) {\n    if (!episodeData.audio_url) {\n      console.log('[AudioCache] No audio URL for episode:', episodeData.slug);\n      return false;\n    }\n\n    try {\n      return await this.cacheAudio(episodeData.audio_url, episodeData.slug);\n    } catch (error) {\n      console.error('[AudioCache] Failed to preload audio for episode:', episodeData.slug, error);\n      return false;\n    }\n  }\n\n  // Обновление времени последнего доступа\n  async updateLastAccessed(url) {\n    try {\n      await offlineDataService.init();\n      await offlineDataService.updateAudioFileAccess(url);\n    } catch (error) {\n      console.error('[AudioCache] Error updating last accessed:', error);\n    }\n  }\n\n  // Получение статистики кеша\n  async getCacheStats() {\n    try {\n      const cachedFiles = await this.getCachedAudioList();\n      const totalSize = cachedFiles.reduce((sum, file) => sum + (file.size || 0), 0);\n      const storageEstimate = await offlineDataService.getStorageUsage();\n      \n      return {\n        fileCount: cachedFiles.length,\n        totalSize,\n        maxSize: this.maxCacheSize,\n        usagePercentage: Math.round((totalSize / this.maxCacheSize) * 100),\n        storageQuota: storageEstimate.quota,\n        storageUsage: storageEstimate.usage,\n        files: cachedFiles.map(file => ({\n          url: file.url,\n          episodeSlug: file.episode_slug,\n          size: file.size,\n          cachedAt: file.cached_at,\n          lastAccessed: file.last_accessed\n        }))\n      };\n    } catch (error) {\n      console.error('[AudioCache] Error getting cache stats:', error);\n      return {\n        fileCount: 0,\n        totalSize: 0,\n        maxSize: this.maxCacheSize,\n        usagePercentage: 0,\n        storageQuota: 0,\n        storageUsage: 0,\n        files: []\n      };\n    }\n  }\n}\n\n// Создаем единственный экземпляр сервиса\nconst audioCacheService = new AudioCacheService();\n\nexport default audioCacheService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/locales.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/logService.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":17,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from './supabaseClient';\n\nconst logService = {\n  log: async (logData) => {\n    let userToLog = logData.user;\n\n    if (!userToLog) {\n      const { data: { user: currentUserFromAuth } } = await supabase.auth.getUser();\n      userToLog = currentUserFromAuth;\n    }\n    \n    if (!userToLog) {\n      console.warn(\"Log attempt without a user session. Skipping.\");\n      return { error: new Error(\"User not available for logging.\") };\n    }\n    \n    const { user, ...restOfLogData } = logData; \n    \n    const payloadToInsert = {\n      user_id: userToLog.id,\n      user_email: userToLog.email,\n      ...restOfLogData,\n    };\n    \n    delete payloadToInsert.user;\n\n    const { error } = await supabase.from('edit_logs').insert([payloadToInsert]);\n\n    if (error) {\n      console.error('Error logging edit:', error);\n      return { error };\n    }\n    return { error: null };\n  },\n  \n  revert: async (logEntry, user) => {\n    if (!logEntry || !user) {\n        console.error(\"Revert call missing log entry or user\");\n        return { error: new Error(\"Missing data for revert.\") };\n    }\n\n    let revertError = null;\n    let beforeRevertValue = null;\n    let afterRevertValue = logEntry.before_value;\n\n    if (logEntry.entity_type === 'question') {\n        const { data: currentData, error: fetchError } = await supabase.from('questions').select('*').eq('id', logEntry.entity_id).single();\n        if (fetchError && fetchError.code !== 'PGRST116') { \n          return { error: new Error(`Failed to fetch current question state for revert: ${fetchError.message}`) };\n        }\n        beforeRevertValue = currentData;\n\n        if (logEntry.action_type === 'create') {\n            const { error } = await supabase.from('questions').delete().eq('id', logEntry.entity_id);\n            revertError = error;\n        } else if (logEntry.action_type === 'update') {\n            const { error } = await supabase.from('questions').update(logEntry.before_value).eq('id', logEntry.entity_id);\n            revertError = error;\n        } else if (logEntry.action_type === 'delete') {\n            const { error } = await supabase.from('questions').insert(logEntry.before_value);\n            revertError = error;\n        }\n    } else if (logEntry.entity_type === 'transcript') {\n        const { data: currentData, error: fetchError } = await supabase.from('transcripts').select('edited_transcript_data').eq('id', logEntry.entity_id).single();\n         if (fetchError) {\n          return { error: new Error(`Failed to fetch current transcript state for revert: ${fetchError.message}`) };\n        }\n        beforeRevertValue = currentData.edited_transcript_data;\n\n        const { error } = await supabase.from('transcripts').update({\n            edited_transcript_data: logEntry.before_value\n        }).eq('id', logEntry.entity_id);\n        revertError = error;\n    }\n\n    if (revertError) {\n        return { error: revertError };\n    }\n\n    const { error: logUpdateError } = await supabase.from('edit_logs').update({\n        is_reverted: true,\n        reverted_by: user.id,\n        reverted_at: new Date().toISOString()\n    }).eq('id', logEntry.id);\n\n    if(!logUpdateError) {\n        await logService.log({\n            user,\n            episode_slug: logEntry.episode_slug,\n            entity_type: logEntry.entity_type,\n            entity_id: logEntry.entity_id,\n            action_type: `revert_${logEntry.action_type}`,\n            before_value: beforeRevertValue,\n            after_value: afterRevertValue,\n            is_reverted: false, \n        });\n    }\n    \n    return { error: logUpdateError };\n  }\n};\n\nexport default logService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/offlineDataService.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'settingsStore' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":57,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Сервис для управления офлайн данными с IndexedDB\nclass OfflineDataService {\n  constructor() {\n    this.dbName = 'PodcastAppDB';\n    this.version = 1;\n    this.db = null;\n  }\n\n  // Инициализация базы данных\n  async init() {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n\n      request.onupgradeneeded = (event) => {\n        const db = event.target.result;\n\n        // Хранилище эпизодов\n        if (!db.objectStoreNames.contains('episodes')) {\n          const episodeStore = db.createObjectStore('episodes', { keyPath: 'slug' });\n          episodeStore.createIndex('date', 'date');\n          episodeStore.createIndex('lang', 'lang');\n        }\n\n        // Хранилище транскриптов\n        if (!db.objectStoreNames.contains('transcripts')) {\n          const transcriptStore = db.createObjectStore('transcripts', { keyPath: 'id', autoIncrement: true });\n          transcriptStore.createIndex('episode_slug', 'episode_slug');\n          transcriptStore.createIndex('lang', 'lang');\n        }\n\n        // Хранилище вопросов\n        if (!db.objectStoreNames.contains('questions')) {\n          const questionStore = db.createObjectStore('questions', { keyPath: 'id', autoIncrement: true });\n          questionStore.createIndex('episode_slug', 'episode_slug');\n          questionStore.createIndex('lang', 'lang');\n          questionStore.createIndex('time', 'time');\n        }\n\n        // Хранилище аудиофайлов (метаданные)\n        if (!db.objectStoreNames.contains('audioFiles')) {\n          const audioStore = db.createObjectStore('audioFiles', { keyPath: 'url' });\n          audioStore.createIndex('episode_slug', 'episode_slug');\n          audioStore.createIndex('cached_at', 'cached_at');\n        }\n\n        // Очередь синхронизации\n        if (!db.objectStoreNames.contains('syncQueue')) {\n          const syncStore = db.createObjectStore('syncQueue', { keyPath: 'id', autoIncrement: true });\n          syncStore.createIndex('type', 'type');\n          syncStore.createIndex('timestamp', 'timestamp');\n        }\n\n        // Настройки кеша\n        if (!db.objectStoreNames.contains('cacheSettings')) {\n          const settingsStore = db.createObjectStore('cacheSettings', { keyPath: 'key' });\n        }\n      };\n\n      request.onsuccess = (event) => {\n        this.db = event.target.result;\n        resolve(this.db);\n      };\n    });\n  }\n\n  // Получение транзакции\n  getTransaction(storeNames, mode = 'readonly') {\n    if (!this.db) throw new Error('Database not initialized');\n    return this.db.transaction(storeNames, mode);\n  }\n\n  // --- ЭПИЗОДЫ ---\n  \n  async saveEpisode(episode) {\n    const transaction = this.getTransaction(['episodes'], 'readwrite');\n    const store = transaction.objectStore('episodes');\n    \n    const episodeData = {\n      ...episode,\n      cached_at: Date.now(),\n      last_updated: Date.now()\n    };\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put(episodeData);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getEpisode(slug) {\n    const transaction = this.getTransaction(['episodes']);\n    const store = transaction.objectStore('episodes');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.get(slug);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAllEpisodes() {\n    const transaction = this.getTransaction(['episodes']);\n    const store = transaction.objectStore('episodes');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // --- ТРАНСКРИПТЫ ---\n  \n  async saveTranscript(transcript) {\n    const transaction = this.getTransaction(['transcripts'], 'readwrite');\n    const store = transaction.objectStore('transcripts');\n    \n    const transcriptData = {\n      ...transcript,\n      cached_at: Date.now(),\n      last_updated: Date.now()\n    };\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put(transcriptData);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getTranscript(episodeSlug, lang) {\n    const transaction = this.getTransaction(['transcripts']);\n    const store = transaction.objectStore('transcripts');\n    const index = store.index('episode_slug');\n    \n    return new Promise((resolve, reject) => {\n      const request = index.getAll(episodeSlug);\n      request.onsuccess = () => {\n        const transcripts = request.result.filter(t => t.lang === lang);\n        resolve(transcripts.length > 0 ? transcripts[0] : null);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // --- ВОПРОСЫ ---\n  \n  async saveQuestions(questions, episodeSlug, lang) {\n    const transaction = this.getTransaction(['questions'], 'readwrite');\n    const store = transaction.objectStore('questions');\n    \n    // Сначала удаляем существующие вопросы для этого эпизода и языка\n    await this.deleteQuestions(episodeSlug, lang);\n    \n    const promises = questions.map(question => {\n      const questionData = {\n        ...question,\n        episode_slug: episodeSlug,\n        lang: lang,\n        cached_at: Date.now(),\n        last_updated: Date.now()\n      };\n      \n      return new Promise((resolve, reject) => {\n        const request = store.add(questionData);\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n    });\n    \n    return Promise.all(promises);\n  }\n\n  async getQuestions(episodeSlug, lang) {\n    const transaction = this.getTransaction(['questions']);\n    const store = transaction.objectStore('questions');\n    const index = store.index('episode_slug');\n    \n    return new Promise((resolve, reject) => {\n      const request = index.getAll(episodeSlug);\n      request.onsuccess = () => {\n        const questions = request.result\n          .filter(q => q.lang === lang)\n          .sort((a, b) => a.time - b.time);\n        resolve(questions);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async deleteQuestions(episodeSlug, lang) {\n    const transaction = this.getTransaction(['questions'], 'readwrite');\n    const store = transaction.objectStore('questions');\n    const index = store.index('episode_slug');\n    \n    return new Promise((resolve, reject) => {\n      const request = index.getAll(episodeSlug);\n      request.onsuccess = () => {\n        const questions = request.result.filter(q => q.lang === lang);\n        const deletePromises = questions.map(q => {\n          return new Promise((deleteResolve, deleteReject) => {\n            const deleteRequest = store.delete(q.id);\n            deleteRequest.onsuccess = () => deleteResolve();\n            deleteRequest.onerror = () => deleteReject(deleteRequest.error);\n          });\n        });\n        Promise.all(deletePromises).then(resolve).catch(reject);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // --- АУДИОФАЙЛЫ ---\n  \n  async saveAudioFileMetadata(url, episodeSlug, size = null) {\n    const transaction = this.getTransaction(['audioFiles'], 'readwrite');\n    const store = transaction.objectStore('audioFiles');\n    \n    const audioData = {\n      url,\n      episode_slug: episodeSlug,\n      size,\n      cached_at: Date.now(),\n      last_accessed: Date.now()\n    };\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put(audioData);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getAudioFileMetadata(url) {\n    const transaction = this.getTransaction(['audioFiles']);\n    const store = transaction.objectStore('audioFiles');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.get(url);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async updateAudioFileAccess(url) {\n    const transaction = this.getTransaction(['audioFiles'], 'readwrite');\n    const store = transaction.objectStore('audioFiles');\n    \n    return new Promise((resolve, reject) => {\n      const getRequest = store.get(url);\n      getRequest.onsuccess = () => {\n        const audioData = getRequest.result;\n        if (audioData) {\n          audioData.last_accessed = Date.now();\n          const putRequest = store.put(audioData);\n          putRequest.onsuccess = () => resolve();\n          putRequest.onerror = () => reject(putRequest.error);\n        } else {\n          resolve();\n        }\n      };\n      getRequest.onerror = () => reject(getRequest.error);\n    });\n  }\n\n  // --- ОЧЕРЕДЬ СИНХРОНИЗАЦИИ ---\n  \n  async addToSyncQueue(type, data, operation = 'update') {\n    const transaction = this.getTransaction(['syncQueue'], 'readwrite');\n    const store = transaction.objectStore('syncQueue');\n    \n    const syncItem = {\n      type, // 'transcript', 'question', 'episode'\n      operation, // 'create', 'update', 'delete'\n      data,\n      timestamp: Date.now(),\n      attempts: 0,\n      max_attempts: 3\n    };\n    \n    return new Promise((resolve, reject) => {\n      const request = store.add(syncItem);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getSyncQueue() {\n    const transaction = this.getTransaction(['syncQueue']);\n    const store = transaction.objectStore('syncQueue');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async removeSyncItem(id) {\n    const transaction = this.getTransaction(['syncQueue'], 'readwrite');\n    const store = transaction.objectStore('syncQueue');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.delete(id);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async incrementSyncAttempts(id) {\n    const transaction = this.getTransaction(['syncQueue'], 'readwrite');\n    const store = transaction.objectStore('syncQueue');\n    \n    return new Promise((resolve, reject) => {\n      const getRequest = store.get(id);\n      getRequest.onsuccess = () => {\n        const item = getRequest.result;\n        if (item) {\n          item.attempts += 1;\n          item.last_attempt = Date.now();\n          const putRequest = store.put(item);\n          putRequest.onsuccess = () => resolve(item);\n          putRequest.onerror = () => reject(putRequest.error);\n        } else {\n          resolve(null);\n        }\n      };\n      getRequest.onerror = () => reject(getRequest.error);\n    });\n  }\n\n  // --- НАСТРОЙКИ КЕША ---\n  \n  async saveCacheSetting(key, value) {\n    const transaction = this.getTransaction(['cacheSettings'], 'readwrite');\n    const store = transaction.objectStore('cacheSettings');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.put({ key, value, updated_at: Date.now() });\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  async getCacheSetting(key, defaultValue = null) {\n    const transaction = this.getTransaction(['cacheSettings']);\n    const store = transaction.objectStore('cacheSettings');\n    \n    return new Promise((resolve, reject) => {\n      const request = store.get(key);\n      request.onsuccess = () => {\n        const result = request.result;\n        resolve(result ? result.value : defaultValue);\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // --- ОЧИСТКА ДАННЫХ ---\n  \n  async clearExpiredData(maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 дней по умолчанию\n    const cutoffTime = Date.now() - maxAge;\n    const stores = ['episodes', 'transcripts', 'questions', 'audioFiles'];\n    \n    for (const storeName of stores) {\n      const transaction = this.getTransaction([storeName], 'readwrite');\n      const store = transaction.objectStore('store');\n      \n      await new Promise((resolve, reject) => {\n        const request = store.getAll();\n        request.onsuccess = () => {\n          const items = request.result;\n          const expiredItems = items.filter(item => \n            item.cached_at && item.cached_at < cutoffTime\n          );\n          \n          const deletePromises = expiredItems.map(item => {\n            return new Promise((deleteResolve, deleteReject) => {\n              const deleteRequest = store.delete(item.id || item.slug || item.url);\n              deleteRequest.onsuccess = () => deleteResolve();\n              deleteRequest.onerror = () => deleteReject(deleteRequest.error);\n            });\n          });\n          \n          Promise.all(deletePromises).then(resolve).catch(reject);\n        };\n        request.onerror = () => reject(request.error);\n      });\n    }\n  }\n\n  async getStorageUsage() {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      return await navigator.storage.estimate();\n    }\n    return { usage: 0, quota: 0 };\n  }\n\n  // Закрытие соединения с базой данных\n  close() {\n    if (this.db) {\n      this.db.close();\n      this.db = null;\n    }\n  }\n}\n\n// Создаем единственный экземпляр сервиса\nconst offlineDataService = new OfflineDataService();\n\nexport default offlineDataService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/openAIService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/podcastService.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/r2Service.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'CreateMultipartUploadCommand' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'UploadPartCommand' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'CompleteMultipartUploadCommand' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'AbortMultipartUploadCommand' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":30},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":20,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":20,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[600,600],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":25,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":25,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[750,750],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":1,"message":"'R2_SECONDARY_CONFIG' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":46,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'secondaryS3Client' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":75,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'bucketName' is defined but never used. Allowed unused args must match /^_/u.","line":232,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":37},{"ruleId":"no-unused-vars","severity":1,"message":"'r2BucketName' is defined but never used. Allowed unused args must match /^_/u.","line":238,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":238,"endColumn":57},{"ruleId":"no-unused-vars","severity":1,"message":"'bucketName' is defined but never used. Allowed unused args must match /^_/u.","line":337,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":337,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  S3Client, \n  PutObjectCommand, \n  HeadObjectCommand, \n  DeleteObjectCommand,\n  CreateMultipartUploadCommand,\n  UploadPartCommand,\n  CompleteMultipartUploadCommand,\n  AbortMultipartUploadCommand\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { getLocaleString } from '@/lib/locales'; \n\n// Helpers to get env from Vite or fallback to localStorage (dev only)\nconst getEnv = (key) => {\n  try {\n    if (typeof import.meta !== 'undefined' && import.meta.env && key in import.meta.env) {\n      return import.meta.env[key];\n    }\n  } catch (_) {}\n  try {\n    if (typeof window !== 'undefined' && window.localStorage) {\n      return window.localStorage.getItem(key) || null;\n    }\n  } catch (_) {}\n  return null;\n};\n\n// Primary storage: Selectel S3\nconst buildPublicBase = (bucket, endpoint) => {\n  const ep = (endpoint || '').replace(/^https?:\\/\\//, '');\n  return `https://${bucket}.${ep}`;\n};\n\nconst R2_PRIMARY_CONFIG = {\n  ACCESS_KEY_ID: getEnv('VITE_S3_ACCESS_KEY') || '',\n  SECRET_ACCESS_KEY: getEnv('VITE_S3_SECRET_KEY') || '',\n  BUCKET: getEnv('VITE_S3_BUCKET') || 'dosmundos-audio',\n  ENDPOINT: getEnv('VITE_S3_ENDPOINT') || 'https://s3.kz-1.srvstorage.kz',\n  REGION: getEnv('VITE_S3_REGION') || 'kz-1',\n  FORCE_PATH_STYLE: false,\n  WORKER_PUBLIC_URL: getEnv('VITE_S3_PUBLIC_BASE') || buildPublicBase(getEnv('VITE_S3_BUCKET') || 'dosmundos-audio', getEnv('VITE_S3_ENDPOINT') || 'https://s3.kz-1.srvstorage.kz')\n};\n\n// Secondary config disabled\nconst R2_SECONDARY_CONFIG = null;\n\n\nconst createS3Client = (config) => {\n  const endpoint = config.ENDPOINT\n    ? config.ENDPOINT\n    : `https://${config.ACCOUNT_ID}.${config.ENDPOINT_SUFFIX}`;\n\n  return new S3Client({\n    region: config.REGION || \"auto\",\n    endpoint,\n    forcePathStyle: Boolean(config.FORCE_PATH_STYLE),\n    credentials: {\n      accessKeyId: config.ACCESS_KEY_ID,\n      secretAccessKey: config.SECRET_ACCESS_KEY,\n    },\n    // DNS обход и улучшенная конфигурация для России\n    maxAttempts: 3,\n    requestHandler: {\n      httpOptions: {\n        timeout: 30000,\n        connectTimeout: 10000,\n      }\n    },\n    customUserAgent: 'DosMundosPodcast/1.0',\n  });\n};\n\nlet primaryS3Client = createS3Client(R2_PRIMARY_CONFIG);\nlet secondaryS3Client = null;\n\nconst r2Service = {\n  checkFileExists: async (originalFilename) => {\n    const fileKey = originalFilename.replace(/\\s+/g, '_');\n    \n    const attemptCheck = async (client, config) => {\n      try {\n        const command = new HeadObjectCommand({ Bucket: config.BUCKET, Key: fileKey });\n        await client.send(command);\n        const fileUrl = `${config.WORKER_PUBLIC_URL}/${fileKey}`;\n        return { exists: true, fileUrl, bucketName: config.BUCKET };\n      } catch (error) {\n        if (error.name === 'NoSuchKey' || (error.$metadata && error.$metadata.httpStatusCode === 404)) {\n          return { exists: false };\n        }\n        console.warn(`Error checking file in R2 bucket ${config.BUCKET}:`, error);\n        return { exists: false, error: error }; \n      }\n    };\n\n    const primaryCheck = await attemptCheck(primaryS3Client, R2_PRIMARY_CONFIG);\n    if (primaryCheck.exists) return primaryCheck;\n    return { exists: false };\n  },\n\n  uploadFile: async (file, onProgress, currentLanguage, originalFilename) => {\n    const fileKey = originalFilename ? originalFilename.replace(/\\s+/g, '_') : `${Date.now()}_${file.name.replace(/\\s+/g, '_')}`;\n    const totalBytes = file.size || 0;\n    const totalMB = totalBytes ? (totalBytes / (1024 * 1024)).toFixed(2) : '0.00';\n\n    const attemptUpload = async (client, config, isPrimaryAttempt) => {\n      try {\n        if (onProgress) onProgress(0, { stage: 'init', message: 'Инициализация загрузки…', uploadedMB: '0.00', totalMB });\n\n        const isIA = !!config.ENDPOINT && config.ENDPOINT.includes('s3.us.archive.org');\n\n        // Route IA uploads via our API for reliable progress + compatibility\n        if (isIA && typeof window !== 'undefined') {\n          const proxyBaseEnv = getEnv('VITE_IA_PROXY_BASE');\n          const isProd = (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.PROD) || /vercel\\.app$/.test(window.location.hostname);\n          const base = proxyBaseEnv || (isProd ? '' : null);\n          const proxyUrl = base !== null ? `${base}/api/ia-upload?key=${encodeURIComponent(fileKey)}&contentType=${encodeURIComponent(file.type || 'application/octet-stream')}` : null;\n          if (proxyUrl) {\n            console.log(`[Upload] ${fileKey}: uploading via proxy ${proxyUrl}`);\n            let proxyStatus = 0;\n            let proxyErrorText = '';\n            try {\n              await new Promise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                xhr.open('POST', proxyUrl);\n                xhr.responseType = 'json';\n                const timeoutMs = 5 * 60 * 1000;\n                xhr.timeout = timeoutMs;\n                xhr.upload.onprogress = (e) => {\n                  if (!e.lengthComputable) return;\n                  const percent = Math.floor((e.loaded / Math.max(e.total || totalBytes || 1, 1)) * 100);\n                  const uploadedMBNow = ((e.loaded) / (1024 * 1024)).toFixed(2);\n                  if (onProgress) onProgress(percent, { stage: 'client-upload', message: 'Загрузка файла…', uploadedMB: uploadedMBNow, totalMB });\n                };\n                xhr.onload = () => {\n                  proxyStatus = xhr.status;\n                  if (xhr.status >= 200 && xhr.status < 300) return resolve();\n                  proxyErrorText = (xhr.response && xhr.response.error) || xhr.statusText || '';\n                  reject(new Error(`Proxy upload failed: ${xhr.status}`));\n                };\n                xhr.onerror = () => reject(new Error('Network error while uploading to proxy'));\n                xhr.ontimeout = () => reject(new Error('Proxy upload timeout'));\n                xhr.send(file);\n              });\n              if (onProgress) onProgress(100, { stage: 'finalizing', message: 'Отправка на archive.org…', uploadedMB: totalMB, totalMB });\n              const fileUrl = `${config.WORKER_PUBLIC_URL}/${fileKey}`;\n              console.log(`[Upload] ${fileKey}: completed via proxy. URL: ${fileUrl}`);\n              return { fileUrl, fileKey, bucketName: config.BUCKET };\n            } catch (proxyErr) {\n              console.warn(`[Upload] ${fileKey}: proxy failed (${proxyStatus}) ${proxyErrorText || proxyErr.message}. Falling back to direct upload.`);\n              // continue to direct upload below\n            }\n          }\n        }\n\n        // Use browser PUT to pre-signed URL to avoid ReadableStream issues\n        let presignedUrl = null;\n        const isProd = (typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.PROD);\n        if (isProd) {\n          const presignResp = await fetch(`/api/s3-presign?key=${encodeURIComponent(fileKey)}&contentType=${encodeURIComponent(file.type || 'application/octet-stream')}`);\n          if (!presignResp.ok) throw new Error(`Presign failed: ${presignResp.status}`);\n          const json = await presignResp.json();\n          presignedUrl = json?.url || null;\n        } else {\n          // Dev: подписываем прямо в браузере (ключи уже в VITE_*)\n          const localClient = new S3Client({\n            region: R2_PRIMARY_CONFIG.REGION,\n            endpoint: R2_PRIMARY_CONFIG.ENDPOINT,\n            forcePathStyle: Boolean(R2_PRIMARY_CONFIG.FORCE_PATH_STYLE) === true,\n            credentials: {\n              accessKeyId: R2_PRIMARY_CONFIG.ACCESS_KEY_ID,\n              secretAccessKey: R2_PRIMARY_CONFIG.SECRET_ACCESS_KEY,\n            },\n          });\n          presignedUrl = await getSignedUrl(localClient, new PutObjectCommand({\n            Bucket: R2_PRIMARY_CONFIG.BUCKET,\n            Key: fileKey,\n            ContentType: file.type || 'application/octet-stream',\n          }), { expiresIn: 3600 });\n        }\n        if (!presignedUrl) throw new Error('Empty presigned URL');\n        // Use XHR to report progress during upload\n        await new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          xhr.open('PUT', presignedUrl);\n          xhr.setRequestHeader('Content-Type', file.type || 'application/octet-stream');\n          xhr.upload.onprogress = (e) => {\n            const loaded = e.lengthComputable ? e.loaded : 0;\n            const percent = Math.floor((loaded / Math.max(totalBytes || 1, 1)) * 100);\n            const uploadedMBNow = (loaded / (1024 * 1024)).toFixed(2);\n            if (onProgress) onProgress(percent, { stage: 'uploading', message: 'Загрузка файла…', uploadedMB: uploadedMBNow, totalMB });\n          };\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) return resolve();\n            reject(new Error(`PUT failed: ${xhr.status}`));\n          };\n          xhr.onerror = () => reject(new Error('Network error during PUT'));\n          xhr.send(file);\n        });\n        if (onProgress) onProgress(100, { stage: 'done', message: 'Готово', uploadedMB: totalMB, totalMB });\n        const fileUrl = `${config.WORKER_PUBLIC_URL}/${fileKey}`;\n        console.log(`[Upload] ${fileKey}: completed via presigned PUT. URL: ${fileUrl}`);\n        return { fileUrl, fileKey, bucketName: config.BUCKET };\n\n      } catch (error) {\n        console.error(`Error uploading to bucket ${config.BUCKET}:`, error);\n        if (isPrimaryAttempt) {\n          console.warn(`Primary upload failed for ${fileKey}. Disabling secondary R2 fallback.`);\n          // Вместо перехода на R2 secondary, пробросим ошибку — в РФ он недоступен\n        }\n        throw new Error(getLocaleString('errorUploadingToR2', currentLanguage, {errorMessage: `Bucket ${config.BUCKET}: ${error.message}`}));\n      }\n    };\n\n    return attemptUpload(primaryS3Client, R2_PRIMARY_CONFIG, true);\n  },\n\n  deleteFile: async (fileKey, bucketName, currentLanguage) => {\n    const client = primaryS3Client;\n    const config = R2_PRIMARY_CONFIG;\n\n    try {\n      const command = new DeleteObjectCommand({ Bucket: config.BUCKET, Key: fileKey });\n      await client.send(command);\n      return { success: true };\n    } catch (error) {\n      console.error(`Error deleting file ${fileKey} from R2 bucket ${config.BUCKET}:`, error);\n      return { success: false, error: getLocaleString('errorDeletingR2File', currentLanguage, { fileName: fileKey, errorMessage: error.message }) };\n    }\n  },\n\n  getPublicUrl: (fileKey, bucketName) => {\n    const base = R2_PRIMARY_CONFIG.WORKER_PUBLIC_URL;\n    return `${base}/${fileKey}`;\n  },\n\n  // Совместимая функция для генерации URL\n  getCompatibleUrl: (audioUrl, r2ObjectKey, r2BucketName) => {\n\n    \n    // Если есть прямой URL, используем его как есть\n    if (audioUrl) {\n      return audioUrl;\n    }\n    \n    // Если есть ключ, генерируем прямой URL к воркеру\n    if (r2ObjectKey) {\n      const base = R2_PRIMARY_CONFIG.WORKER_PUBLIC_URL;\n      return `${base}/${r2ObjectKey}`;\n    }\n    \n    \n    return null;\n  },\n\n  // Тестирование подключения с DNS обходом\n  testConnection: async () => {\n\n    \n    try {\n      // Тест 1: Проверка основного клиента\n\n      const primaryCommand = new HeadObjectCommand({ \n        Bucket: R2_PRIMARY_CONFIG.BUCKET, \n        Key: 'test-connection' \n      });\n      \n      try {\n        await primaryS3Client.send(primaryCommand);\n\n      } catch (error) {\n        if (!(error.name === 'NoSuchKey' || error.$metadata?.httpStatusCode === 404)) {\n          console.warn('R2: Primary client test failed:', error.name, error.message);\n        }\n      }\n\n      // Secondary client removed\n\n      // Тест 3: Проверка DNS резолвинга\n\n      try {\n        const testUrl = R2_PRIMARY_CONFIG.ENDPOINT\n          ? R2_PRIMARY_CONFIG.ENDPOINT\n          : `https://${R2_PRIMARY_CONFIG.ACCOUNT_ID}.${R2_PRIMARY_CONFIG.ENDPOINT_SUFFIX}`;\n        await fetch(testUrl, { method: 'HEAD', mode: 'no-cors' });\n      } catch (error) {\n        console.warn('R2: DNS resolution failed:', error.message);\n      }\n\n      return { success: true, message: 'R2 connection test completed' };\n      \n    } catch (error) {\n      console.error('R2: Connection test failed:', error);\n      return { success: false, error: error.message };\n    }\n  },\n\n  // Пересоздание клиентов с новыми настройками\n  refreshClients: () => {\n\n    primaryS3Client = createS3Client(R2_PRIMARY_CONFIG);\n    secondaryS3Client = null;\n\n  },\n\n  // Диагностика R2\n  runDiagnostics: async () => {\n\n    \n    try {\n      const connectionTest = await r2Service.testConnection();\n      \n      if (connectionTest.success) {\n        return { \n          success: true, \n          workingBucket: R2_PRIMARY_CONFIG.BUCKET,\n          message: 'R2 diagnostics completed successfully'\n        };\n      } else {\n        return { \n          success: false, \n          error: connectionTest.error,\n          message: 'R2 diagnostics failed'\n        };\n      }\n    } catch (error) {\n      console.error('R2: Diagnostics failed:', error);\n      return { \n        success: false, \n        error: error.message,\n        message: 'R2 diagnostics failed with exception'\n      };\n    }\n  },\n\n  // Тест создания bucket (для совместимости с тестовой страницей)\n  testBucketCreation: async (bucketName) => {\n\n    \n    try {\n      // R2 buckets создаются автоматически при первой загрузке\n      // Просто проверяем подключение\n      const connectionTest = await r2Service.testConnection();\n      \n      if (connectionTest.success) {\n        return { \n          success: true, \n          bucketName: R2_PRIMARY_CONFIG.BUCKET,\n          testFileKey: 'test-connection',\n          message: 'R2 bucket test successful'\n        };\n      } else {\n        return { \n          success: false, \n          error: connectionTest.error,\n          message: 'R2 bucket test failed'\n        };\n      }\n    } catch (error) {\n      console.error('R2: Bucket creation test failed:', error);\n      return { \n        success: false, \n        error: error.message,\n        message: 'R2 bucket test failed with exception'\n      };\n    }\n  },\n\n  // Упрощенная загрузка файла (для совместимости с тестовой страницей)\n  uploadFileSimple: async (file, onProgress, currentLanguage, originalFilename) => {\n\n    \n    // Используем обычную функцию загрузки\n    return r2Service.uploadFile(file, onProgress, currentLanguage, originalFilename);\n  }\n};\n\nexport default r2Service;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/supabaseClient.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/syncService.js","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":246,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":250,"endColumn":21},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":256,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":263,"endColumn":26},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":269,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":274,"endColumn":47},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":280,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":283,"endColumn":48},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":297,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":306,"endColumn":30},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":312,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":314,"endColumn":25},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":330,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":334,"endColumn":34},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":356,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":359,"endColumn":34},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":365,"column":9,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":367,"endColumn":25}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from './supabaseClient';\nimport offlineDataService from './offlineDataService';\n\nclass SyncService {\n  constructor() {\n    this.isOnline = navigator.onLine;\n    this.syncInProgress = false;\n    this.syncListeners = [];\n    this.networkListeners = [];\n    \n    // Инициализация слушателей сетевых событий\n    this.initNetworkListeners();\n    \n    // Автоматическая синхронизация при восстановлении соединения\n    this.setupAutoSync();\n  }\n\n  // Инициализация слушателей сетевых событий\n  initNetworkListeners() {\n    window.addEventListener('online', () => {\n      console.log('[Sync] Network connection restored');\n      this.isOnline = true;\n      this.notifyNetworkListeners(true);\n      this.syncOfflineChanges();\n    });\n\n    window.addEventListener('offline', () => {\n      console.log('[Sync] Network connection lost');\n      this.isOnline = false;\n      this.notifyNetworkListeners(false);\n    });\n\n    // Проверка соединения каждые 30 секунд\n    setInterval(() => {\n      this.checkConnection();\n    }, 30000);\n  }\n\n  // Настройка автоматической синхронизации\n  setupAutoSync() {\n    // Синхронизация при загрузке страницы, если онлайн\n    if (this.isOnline) {\n      setTimeout(() => this.syncOfflineChanges(), 1000);\n    }\n\n    // Периодическая синхронизация каждые 5 минут\n    setInterval(() => {\n      if (this.isOnline && !this.syncInProgress) {\n        this.syncOfflineChanges();\n      }\n    }, 5 * 60 * 1000);\n  }\n\n  // Проверка соединения\n  async checkConnection() {\n    try {\n      const response = await fetch('/ping', { \n        method: 'HEAD', \n        cache: 'no-cache',\n        timeout: 5000 \n      });\n      \n      const wasOnline = this.isOnline;\n      this.isOnline = response.ok;\n      \n      if (!wasOnline && this.isOnline) {\n        console.log('[Sync] Connection restored via ping');\n        this.notifyNetworkListeners(true);\n        this.syncOfflineChanges();\n      } else if (wasOnline && !this.isOnline) {\n        console.log('[Sync] Connection lost via ping');\n        this.notifyNetworkListeners(false);\n      }\n    } catch (error) {\n      if (this.isOnline) {\n        console.log('[Sync] Connection lost via ping error');\n        this.isOnline = false;\n        this.notifyNetworkListeners(false);\n      }\n    }\n  }\n\n  // Подписка на изменения сетевого состояния\n  onNetworkChange(callback) {\n    this.networkListeners.push(callback);\n    return () => {\n      this.networkListeners = this.networkListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Подписка на события синхронизации\n  onSyncChange(callback) {\n    this.syncListeners.push(callback);\n    return () => {\n      this.syncListeners = this.syncListeners.filter(cb => cb !== callback);\n    };\n  }\n\n  // Уведомление слушателей о изменении сети\n  notifyNetworkListeners(isOnline) {\n    this.networkListeners.forEach(callback => {\n      try {\n        callback(isOnline);\n      } catch (error) {\n        console.error('[Sync] Network listener error:', error);\n      }\n    });\n  }\n\n  // Уведомление слушателей о синхронизации\n  notifySyncListeners(event, data = {}) {\n    this.syncListeners.forEach(callback => {\n      try {\n        callback(event, data);\n      } catch (error) {\n        console.error('[Sync] Sync listener error:', error);\n      }\n    });\n  }\n\n  // Получение статуса сети\n  getNetworkStatus() {\n    return {\n      isOnline: this.isOnline,\n      syncInProgress: this.syncInProgress\n    };\n  }\n\n  // Сохранение данных с автоматической синхронизацией\n  async saveData(type, data, operation = 'update') {\n    await offlineDataService.init();\n\n    try {\n      // Сохраняем локально\n      switch (type) {\n        case 'episode':\n          await offlineDataService.saveEpisode(data);\n          break;\n        case 'transcript':\n          await offlineDataService.saveTranscript(data);\n          break;\n        case 'questions':\n          await offlineDataService.saveQuestions(data.questions, data.episodeSlug, data.lang);\n          break;\n      }\n\n      // Если онлайн, пытаемся синхронизировать сразу\n      if (this.isOnline) {\n        try {\n          await this.syncDataToServer(type, data, operation);\n        } catch (error) {\n          console.log('[Sync] Immediate sync failed, adding to queue:', error);\n          await offlineDataService.addToSyncQueue(type, data, operation);\n        }\n      } else {\n        // Если офлайн, добавляем в очередь синхронизации\n        await offlineDataService.addToSyncQueue(type, data, operation);\n      }\n\n      return { success: true, offline: !this.isOnline };\n    } catch (error) {\n      console.error('[Sync] Failed to save data:', error);\n      throw error;\n    }\n  }\n\n  // Загрузка данных с поддержкой офлайн\n  async loadData(type, params) {\n    await offlineDataService.init();\n\n    try {\n      // Если онлайн, пытаемся загрузить с сервера\n      if (this.isOnline) {\n        try {\n          const serverData = await this.loadDataFromServer(type, params);\n          \n          // Сохраняем в локальный кеш\n          switch (type) {\n            case 'episode':\n              await offlineDataService.saveEpisode(serverData);\n              break;\n            case 'transcript':\n              await offlineDataService.saveTranscript(serverData);\n              break;\n            case 'questions':\n              await offlineDataService.saveQuestions(\n                serverData, \n                params.episodeSlug, \n                params.lang\n              );\n              break;\n          }\n          \n          return { data: serverData, source: 'server' };\n        } catch (error) {\n          console.log('[Sync] Server load failed, trying cache:', error);\n        }\n      }\n\n      // Загружаем из локального кеша\n      let cachedData;\n      switch (type) {\n        case 'episode':\n          cachedData = await offlineDataService.getEpisode(params.slug);\n          break;\n        case 'transcript':\n          cachedData = await offlineDataService.getTranscript(params.episodeSlug, params.lang);\n          break;\n        case 'questions':\n          cachedData = await offlineDataService.getQuestions(params.episodeSlug, params.lang);\n          break;\n        case 'episodes':\n          cachedData = await offlineDataService.getAllEpisodes();\n          break;\n      }\n\n      if (cachedData) {\n        return { data: cachedData, source: 'cache' };\n      }\n\n      throw new Error(`No ${type} data available offline`);\n    } catch (error) {\n      console.error(`[Sync] Failed to load ${type}:`, error);\n      throw error;\n    }\n  }\n\n  // Синхронизация данных с сервером\n  async syncDataToServer(type, data, operation) {\n    switch (type) {\n      case 'transcript':\n        return await this.syncTranscriptToServer(data, operation);\n      case 'questions':\n        return await this.syncQuestionsToServer(data, operation);\n      case 'episode':\n        return await this.syncEpisodeToServer(data, operation);\n      default:\n        throw new Error(`Unknown sync type: ${type}`);\n    }\n  }\n\n  // Загрузка данных с сервера\n  async loadDataFromServer(type, params) {\n    switch (type) {\n      case 'episode':\n        const { data: episodeData, error: episodeError } = await supabase\n          .from('episodes')\n          .select('*')\n          .eq('slug', params.slug)\n          .single();\n        \n        if (episodeError) throw episodeError;\n        return episodeData;\n\n      case 'transcript':\n        const { data: transcriptData, error: transcriptError } = await supabase\n          .from('transcripts')\n          .select('*')\n          .eq('episode_slug', params.episodeSlug)\n          .eq('lang', params.lang)\n          .order('created_at', { ascending: false })\n          .limit(1)\n          .maybeSingle();\n        \n        if (transcriptError) throw transcriptError;\n        return transcriptData;\n\n      case 'questions':\n        const { data: questionsData, error: questionsError } = await supabase\n          .from('questions')\n          .select('*')\n          .eq('episode_slug', params.episodeSlug)\n          .eq('lang', params.lang)\n          .order('time', { ascending: true });\n        \n        if (questionsError) throw questionsError;\n        return questionsData;\n\n      case 'episodes':\n        const { data: episodesData, error: episodesError } = await supabase\n          .from('episodes')\n          .select('*')\n          .order('date', { ascending: false });\n        \n        if (episodesError) throw episodesError;\n        return episodesData;\n\n      default:\n        throw new Error(`Unknown load type: ${type}`);\n    }\n  }\n\n  // Синхронизация транскрипта с сервером\n  async syncTranscriptToServer(data, operation) {\n    switch (operation) {\n      case 'update':\n        const { error: updateError } = await supabase\n          .from('transcripts')\n          .update({\n            edited_transcript_data: {\n              utterances: data.utterances,\n              words: data.words,\n              text: data.text\n            }\n          })\n          .eq('id', data.id);\n        \n        if (updateError) throw updateError;\n        break;\n\n      case 'create':\n        const { error: createError } = await supabase\n          .from('transcripts')\n          .insert(data);\n        \n        if (createError) throw createError;\n        break;\n\n      default:\n        throw new Error(`Unknown transcript operation: ${operation}`);\n    }\n  }\n\n  // Синхронизация вопросов с сервером\n  async syncQuestionsToServer(data, operation) {\n    switch (operation) {\n      case 'update':\n      case 'create':\n        // Удаляем существующие вопросы и создаем новые\n        const { error: deleteError } = await supabase\n          .from('questions')\n          .delete()\n          .eq('episode_slug', data.episodeSlug)\n          .eq('lang', data.lang);\n        \n        if (deleteError) throw deleteError;\n\n        if (data.questions && data.questions.length > 0) {\n          const { error: insertError } = await supabase\n            .from('questions')\n            .insert(data.questions);\n          \n          if (insertError) throw insertError;\n        }\n        break;\n\n      default:\n        throw new Error(`Unknown questions operation: ${operation}`);\n    }\n  }\n\n  // Синхронизация эпизода с сервером\n  async syncEpisodeToServer(data, operation) {\n    switch (operation) {\n      case 'update':\n        const { error: updateError } = await supabase\n          .from('episodes')\n          .update(data)\n          .eq('slug', data.slug);\n        \n        if (updateError) throw updateError;\n        break;\n\n      case 'create':\n        const { error: createError } = await supabase\n          .from('episodes')\n          .insert(data);\n        \n        if (createError) throw createError;\n        break;\n\n      default:\n        throw new Error(`Unknown episode operation: ${operation}`);\n    }\n  }\n\n  // Синхронизация всех офлайн изменений\n  async syncOfflineChanges() {\n    if (this.syncInProgress || !this.isOnline) {\n      return;\n    }\n\n    this.syncInProgress = true;\n    this.notifySyncListeners('sync_start');\n\n    try {\n      await offlineDataService.init();\n      const syncQueue = await offlineDataService.getSyncQueue();\n      \n      console.log(`[Sync] Processing ${syncQueue.length} offline changes`);\n\n      let successCount = 0;\n      let errorCount = 0;\n\n      for (const item of syncQueue) {\n        try {\n          await this.syncDataToServer(item.type, item.data, item.operation);\n          await offlineDataService.removeSyncItem(item.id);\n          successCount++;\n          \n          this.notifySyncListeners('sync_item_success', {\n            type: item.type,\n            operation: item.operation\n          });\n        } catch (error) {\n          console.error(`[Sync] Failed to sync ${item.type}:`, error);\n          \n          const updatedItem = await offlineDataService.incrementSyncAttempts(item.id);\n          \n          if (updatedItem && updatedItem.attempts >= updatedItem.max_attempts) {\n            console.log(`[Sync] Max attempts reached for ${item.type}, removing from queue`);\n            await offlineDataService.removeSyncItem(item.id);\n          }\n          \n          errorCount++;\n          \n          this.notifySyncListeners('sync_item_error', {\n            type: item.type,\n            operation: item.operation,\n            error: error.message\n          });\n        }\n      }\n\n      console.log(`[Sync] Completed: ${successCount} success, ${errorCount} errors`);\n      \n      this.notifySyncListeners('sync_complete', {\n        successCount,\n        errorCount,\n        totalCount: syncQueue.length\n      });\n    } catch (error) {\n      console.error('[Sync] Sync process failed:', error);\n      this.notifySyncListeners('sync_error', { error: error.message });\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  // Принудительная синхронизация\n  async forcSync() {\n    if (!this.isOnline) {\n      throw new Error('Cannot sync while offline');\n    }\n    \n    return this.syncOfflineChanges();\n  }\n\n  // Очистка старых данных\n  async cleanupOldData(maxAge = 7 * 24 * 60 * 60 * 1000) {\n    await offlineDataService.init();\n    await offlineDataService.clearExpiredData(maxAge);\n    \n    // Уведомляем Service Worker об очистке кеша\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage({\n        type: 'CLEAR_OLD_CACHE',\n        maxAge\n      });\n    }\n  }\n\n  // Получение статистики использования хранилища\n  async getStorageStats() {\n    await offlineDataService.init();\n    return await offlineDataService.getStorageUsage();\n  }\n}\n\n// Создаем единственный экземпляр сервиса\nconst syncService = new SyncService();\n\nexport default syncService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/lib/utils.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'language' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":34,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":53}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n \nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n\nexport const formatTime = (seconds, showHours = false) => {\n  if (isNaN(seconds) || seconds < 0) return '0:00';\n  \n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  if (showHours || hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n};\n\nexport const formatFullTime = (seconds, showHours = false) => {\n  return formatTime(seconds, showHours);\n};\n\nexport function getFileExtension(filename) {\n  if (!filename || typeof filename !== 'string') return '';\n  return filename.slice(((filename.lastIndexOf(\".\") - 1) >>> 0) + 2);\n}\n\nexport const getFileNameWithoutExtension = (filename) => {\n  return filename.replace(/\\.[^/.]+$/, '');\n};\n\nexport const formatShortDate = (dateString, language = 'ru') => {\n  if (!dateString) return '';\n\n  const date = new Date(dateString);\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = String(date.getFullYear()).slice(-2);\n  return `${day}.${month}.${year}`;\n};\n\n// Функция для преобразования аудио URL через прокси (для обхода CORS)\nexport const getProxiedAudioUrl = (originalUrl) => originalUrl;\n\n// Функция для проверки доступности прокси\nexport const testProxyAvailability = async () => true;\n\n// Функция для получения URL с fallback\nexport const getAudioUrlWithFallback = async (originalUrl) => originalUrl;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/main.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'App' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":11}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from '@/App';\nimport '@/index.css';\n\n// Регистрация Service Worker для офлайн поддержки\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/sw.js')\n      .then((registration) => {\n        console.log('[SW] Service Worker registered successfully:', registration);\n        \n        // Проверяем обновления Service Worker\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                console.log('[SW] New Service Worker available');\n                // Можно показать уведомление пользователю об обновлении\n              }\n            });\n          }\n        });\n      })\n      .catch((error) => {\n        console.error('[SW] Service Worker registration failed:', error);\n      });\n  });\n\n  // Обработка сообщений от Service Worker\n  navigator.serviceWorker.addEventListener('message', (event) => {\n    const { type, data } = event.data;\n    \n    switch (type) {\n      case 'SYNC_COMPLETE':\n        console.log('[SW] Background sync completed:', data);\n        break;\n      case 'CACHE_UPDATE':\n        console.log('[SW] Cache updated:', data);\n        break;\n      default:\n        console.log('[SW] Unknown message type:', type, data);\n    }\n  });\n}\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/DeepSearchPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useMemo' is defined but never used. Allowed unused vars must match /^React$/u.","line":1,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":58},{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'SearchIcon' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":50},{"ruleId":"no-unused-vars","severity":1,"message":"'motion' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'HighlightedText' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'SearchResultItem' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":34,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'Icon' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":35,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":13},{"ruleId":"no-unused-vars","severity":1,"message":"'textToHighlight' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":51,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useSearchParams, Link, useNavigate } from 'react-router-dom';\nimport { supabase } from '@/lib/supabaseClient';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, Search as SearchIcon, ArrowLeft, FileText, MessageSquare } from 'lucide-react';\nimport { getLocaleString, getPluralizedLocaleString } from '@/lib/locales';\nimport { formatShortDate } from '@/lib/utils';\nimport { motion } from 'framer-motion';\nimport Fuse from 'fuse.js';\n\nconst HighlightedText = ({ text, highlightParts }) => {\n  if (!highlightParts || highlightParts.length === 0 || !text) return text;\n\n  const regex = new RegExp(`(${highlightParts.map(part => part.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|')})`, 'gi');\n  const parts = text.split(regex);\n\n  return (\n    <>\n      {parts.map((part, i) => {\n        const isMatch = highlightParts.some(hp => part.toLowerCase() === hp.toLowerCase());\n        return isMatch ? (\n          <span key={i} className=\"bg-yellow-400/70 text-slate-900 px-0.5 rounded-sm\">\n            {part}\n          </span>\n        ) : (\n          part\n        );\n      })}\n    </>\n  );\n};\n\nconst SearchResultItem = ({ item, searchTerm, type, episodeTitle }) => {\n  const Icon = type === 'question' ? MessageSquare : FileText;\n  let displayTitle = '';\n  let linkTarget = '';\n\n  if (type === 'question') {\n    displayTitle = `${item.questionTitle} (${episodeTitle})`;\n    linkTarget = `/episode/${item.episodeSlug}#question-${item.questionId}&play=true`;\n  } else { // textInEpisode\n    if (item.questionContext) {\n      displayTitle = `${getLocaleString('question', item.currentLanguage)}: ${item.questionContext} (${episodeTitle})`;\n    } else {\n      displayTitle = `(${episodeTitle})`; \n    }\n    linkTarget = `/episode/${item.episodeSlug}#segment-${item.segmentStart}&play=true`;\n  }\n  \n  const textToHighlight = type === 'question' ? item.questionTitle : item.segmentText;\n\n  return (\n     <motion.li\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -10 }}\n      transition={{ duration: 0.2 }}\n      className=\"p-3 bg-slate-700/60 rounded-lg hover:bg-slate-600/70 transition-colors\"\n    >\n      <Link \n        to={linkTarget}\n        className=\"block group\"\n      >\n        <div className=\"text-sm text-slate-200 flex items-start mb-1\">\n          <Icon className=\"inline h-4 w-4 mr-2 text-purple-400 flex-shrink-0 mt-0.5\" />\n          <span className=\"flex-grow font-semibold\">\n             <HighlightedText text={displayTitle} highlightParts={searchTerm.toLowerCase().split(/\\s+/).filter(Boolean)} />\n          </span>\n        </div>\n        {type === 'textInEpisode' && (\n          <div className=\"text-xs text-slate-300 max-h-20 overflow-y-auto custom-scrollbar pl-6\">\n            <HighlightedText text={item.segmentText} highlightParts={searchTerm.toLowerCase().split(/\\s+/).filter(Boolean)} />\n          </div>\n        )}\n      </Link>\n    </motion.li>\n  )\n}\n\nconst DeepSearchPage = ({ currentLanguage }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const initialQuery = searchParams.get('query') || '';\n  \n  const [searchTerm, setSearchTerm] = useState(initialQuery);\n  const [inputTerm, setInputTerm] = useState(initialQuery);\n  \n  const [allResults, setAllResults] = useState([]);\n  \n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searched, setSearched] = useState(false);\n  const [episodeTitlesMap, setEpisodeTitlesMap] = useState({});\n\n\n  const formatEpisodeTitleForDisplay = (title, episodeDate, episodeLang, langForDisplay) => {\n    const effectiveLang = episodeLang === 'all' ? langForDisplay : episodeLang;\n    const prefix = getLocaleString('meditationTitlePrefix', effectiveLang);\n    let datePart = '';\n    if (episodeDate) {\n      datePart = formatShortDate(episodeDate, effectiveLang);\n    }\n    return datePart ? `${prefix} ${datePart}` : title || prefix;\n  };\n\n  const fetchDeepSearchResults = useCallback(async (query) => {\n    if (!query || query.trim().length < 2) {\n      setAllResults([]);\n      setError(getLocaleString('deepSearchMinChars', currentLanguage));\n      setLoading(false);\n      setSearched(true);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setSearched(true);\n\n    try {\n      const { data: dbEpisodes, error: episodesError } = await supabase\n        .from('episodes')\n        .select('slug, title, date, lang')\n        .or(`lang.eq.${currentLanguage},lang.eq.all`);\n      if (episodesError) throw episodesError;\n\n      const tempEpisodeTitlesMap = dbEpisodes.reduce((acc, ep) => {\n        acc[ep.slug] = formatEpisodeTitleForDisplay(ep.title, ep.date, ep.lang, currentLanguage);\n        return acc;\n      }, {});\n      setEpisodeTitlesMap(tempEpisodeTitlesMap);\n      \n      const { data: dbQuestions, error: questionsError } = await supabase\n        .from('questions')\n        .select('id, episode_slug, title, lang, time')\n        .or(`lang.eq.${currentLanguage},lang.eq.all`);\n      if (questionsError) throw questionsError;\n\n      const { data: dbTranscripts, error: transcriptsError } = await supabase\n        .from('transcripts')\n        .select('episode_slug, lang, edited_transcript_data, transcript_data')\n        .or(`lang.eq.${currentLanguage},lang.eq.all`);\n      if (transcriptsError) throw transcriptsError;\n\n      let combinedResults = [];\n\n      const fuseOptionsQuestions = {\n        keys: ['title'],\n        includeScore: true,\n        threshold: 0.4,\n      };\n      const fuseQuestions = new Fuse(dbQuestions.filter(q => {\n          const episode = dbEpisodes.find(ep => ep.slug === q.episode_slug);\n          return episode && (episode.lang === 'all' ? q.lang === currentLanguage : q.lang === episode.lang);\n      }), fuseOptionsQuestions);\n      \n      const questionResults = fuseQuestions.search(query);\n\n      questionResults.forEach(result => {\n        const question = result.item;\n        const episode = dbEpisodes.find(ep => ep.slug === question.episode_slug);\n        if (!episode) return;\n\n        combinedResults.push({\n          type: 'question',\n          id: `q-${question.id}`,\n          episodeSlug: question.episode_slug,\n          questionId: question.id,\n          questionTitle: question.title,\n          segmentStart: question.time * 1000,\n          currentLanguage: currentLanguage,\n          score: result.score \n        });\n      });\n      \n      const allUtterancesForSearch = [];\n      dbTranscripts.forEach(transcript => {\n        const episode = dbEpisodes.find(ep => ep.slug === transcript.episode_slug);\n        if (!episode || (episode.lang !== 'all' && episode.lang !== currentLanguage)) return;\n\n        const utterances = transcript.edited_transcript_data?.utterances || transcript.transcript_data?.utterances || [];\n        utterances.forEach(utt => {\n            allUtterancesForSearch.push({\n                text: utt.text,\n                start: utt.start,\n                episodeSlug: transcript.episode_slug,\n                episodeLang: episode.lang,\n                id: `${transcript.episode_slug}-${utt.start}-${Math.random().toString(36).substring(7)}`\n            });\n        });\n      });\n\n      const fuseOptionsText = {\n        keys: ['text'],\n        includeScore: true,\n        threshold: 0.4, \n        minMatchCharLength: Math.max(1, Math.floor(query.length / 2)),\n      };\n      const fuseText = new Fuse(allUtterancesForSearch, fuseOptionsText);\n      const textResults = fuseText.search(query);\n\n      textResults.forEach(result => {\n        const segment = result.item;\n        const episode = dbEpisodes.find(ep => ep.slug === segment.episodeSlug);\n        if (!episode) return;\n        \n        const questionContext = dbQuestions.find(q => \n            q.episode_slug === segment.episodeSlug &&\n            (episode.lang === 'all' ? q.lang === currentLanguage : q.lang === episode.lang) &&\n            segment.start >= (q.time * 1000) &&\n            (dbQuestions.filter(nq => nq.episode_slug === segment.episodeSlug && (episode.lang === 'all' ? nq.lang === currentLanguage : nq.lang === episode.lang) && nq.time > q.time).sort((a,b) => a.time - b.time)[0]?.time * 1000 || Infinity) > segment.start\n        )?.title;\n\n        combinedResults.push({\n          type: 'textInEpisode',\n          episodeSlug: segment.episodeSlug,\n          segmentStart: segment.start,\n          segmentText: segment.text,\n          id: segment.id,\n          questionContext: questionContext,\n          currentLanguage: currentLanguage,\n          score: result.score\n        });\n      });\n      \n      combinedResults.sort((a, b) => (a.score ?? 1) - (b.score ?? 1));\n      setAllResults(combinedResults);\n\n    } catch (err) {\n      console.error(\"Deep search error:\", err);\n      setError(getLocaleString('errorPerformingSearch', currentLanguage, { errorMessage: err.message }));\n      setAllResults([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [currentLanguage]);\n\n  useEffect(() => {\n    if (initialQuery) {\n      fetchDeepSearchResults(initialQuery);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); \n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    setSearchParams({ query: inputTerm });\n    setSearchTerm(inputTerm); \n    fetchDeepSearchResults(inputTerm);\n  };\n  \n  const totalResultCount = allResults.length;\n\n  return (\n    <div className=\"container mx-auto p-2 sm:p-4 max-w-2xl\">\n      <Button \n        variant=\"outline\" \n        onClick={() => navigate('/episodes')} \n        className=\"mb-6 bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300\"\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backToEpisodes', currentLanguage)}\n      </Button>\n      <div className=\"flex items-center mb-6\">\n        <h1 className=\"text-3xl font-bold text-purple-300\">{getLocaleString('search', currentLanguage)}</h1>\n      </div>\n      <form onSubmit={handleSearch} className=\"mb-8\">\n        <div className=\"relative flex items-center gap-2\">\n          <Input\n            type=\"search\"\n            value={inputTerm}\n            onChange={(e) => setInputTerm(e.target.value)}\n            placeholder={getLocaleString('deepSearchPlaceholder', currentLanguage)}\n            className=\"pl-10 flex-grow bg-slate-800/70 border-slate-700 focus:border-purple-500 text-white placeholder-slate-400 h-11\"\n          />\n          <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400\" />\n          <Button type=\"submit\" className=\"bg-purple-600 hover:bg-purple-700 h-11\" disabled={loading}>\n            {loading ? <Loader2 className=\"h-5 w-5 animate-spin\" /> : <SearchIcon className=\"h-5 w-5\" />}\n            <span className=\"ml-2 hidden sm:inline\">{getLocaleString('search', currentLanguage)}</span>\n          </Button>\n        </div>\n      </form>\n\n      {loading && (\n        <div className=\"flex justify-center items-center py-10\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" />\n          <p className=\"ml-4 text-lg\">{getLocaleString('searching', currentLanguage)}...</p>\n        </div>\n      )}\n\n      {!loading && error && (\n        <div className=\"text-center p-6 bg-red-700/20 rounded-lg\">\n          <p className=\"text-red-400\">{error}</p>\n        </div>\n      )}\n      \n      {!loading && !error && searched && totalResultCount === 0 && (\n         <div className=\"text-center py-10\">\n            <SearchIcon className=\"mx-auto h-16 w-16 text-gray-500\" />\n            <p className=\"mt-4 text-lg text-gray-400\">\n                {getLocaleString('noResultsFoundForQuery', currentLanguage, { query: searchTerm })}\n            </p>\n         </div>\n      )}\n\n      {!loading && !error && totalResultCount > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold text-slate-200 mb-6\">\n            {getPluralizedLocaleString('searchResultsCount', currentLanguage, totalResultCount, { count: totalResultCount, query: searchTerm })}\n          </h2>\n          \n          <motion.ul\n            initial=\"hidden\"\n            animate=\"visible\"\n            variants={{\n              visible: { opacity: 1, transition: { staggerChildren: 0.07 } },\n              hidden: { opacity: 0 },\n            }}\n            className=\"space-y-3\"\n          >\n            {allResults.map((item) => (\n              <SearchResultItem \n                key={item.id} \n                item={item} \n                searchTerm={searchTerm} \n                type={item.type}\n                episodeTitle={episodeTitlesMap[item.episodeSlug] || item.episodeSlug}\n              />\n            ))}\n          </motion.ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DeepSearchPage;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/EditLogPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'RotateCcw' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":39},{"ruleId":"no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":52},{"ruleId":"no-unused-vars","severity":1,"message":"'DiffViewer' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":14,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { supabase } from '@/lib/supabaseClient';\nimport { useToast } from '@/components/ui/use-toast';\nimport { getLocaleString } from '@/lib/locales';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, ArrowLeft, RotateCcw, CheckCircle } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { ru, es, enUS } from 'date-fns/locale';\nimport { useNavigate } from 'react-router-dom';\nimport logService from '@/lib/logService';\n\nconst dateLocales = { ru, es, en: enUS };\n\nconst DiffViewer = ({ before, after, currentLanguage }) => {\n  const renderValue = (value) => {\n    if (value === null || value === undefined) {\n      return <span className=\"text-slate-500\">null</span>;\n    }\n    return <pre className=\"text-xs whitespace-pre-wrap\">{JSON.stringify(value, null, 2)}</pre>;\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 mt-2 font-mono\">\n      <div>\n        <h4 className=\"text-sm font-semibold text-red-400 mb-1\">{getLocaleString('beforeLabel', currentLanguage)}</h4>\n        <div className=\"bg-red-900/20 p-2 rounded-md\">{renderValue(before)}</div>\n      </div>\n      <div>\n        <h4 className=\"text-sm font-semibold text-green-400 mb-1\">{getLocaleString('afterLabel', currentLanguage)}</h4>\n        <div className=\"bg-green-900/20 p-2 rounded-md\">{renderValue(after)}</div>\n      </div>\n    </div>\n  );\n};\n\nconst EditLogPage = ({ currentLanguage, user }) => {\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [revertingId, setRevertingId] = useState(null);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  const fetchLogs = useCallback(async () => {\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('edit_logs')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (error) {\n      toast({ title: getLocaleString('errorFetchingLogs', currentLanguage), description: error.message, variant: 'destructive' });\n    } else {\n      setLogs(data);\n    }\n    setLoading(false);\n  }, [toast, currentLanguage]);\n\n  useEffect(() => {\n    fetchLogs();\n  }, [fetchLogs]);\n\n  const handleRevert = async (logEntry) => {\n    if (!user) {\n      toast({ title: \"Authentication Error\", description: \"You must be logged in to revert changes.\", variant: \"destructive\"});\n      return;\n    }\n    setRevertingId(logEntry.id);\n    const { error } = await logService.revert(logEntry, user);\n    if (error) {\n      toast({ title: getLocaleString(\"revertFailed\", currentLanguage), description: error.message, variant: 'destructive' });\n    } else {\n      toast({ title: getLocaleString(\"revertSuccessful\", currentLanguage), description: getLocaleString(\"revertDescription\", currentLanguage, {logId: logEntry.id}) });\n      fetchLogs();\n    }\n    setRevertingId(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[calc(100vh-200px)]\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h1 className=\"text-2xl font-bold text-white\">{getLocaleString('editLogPageTitle', currentLanguage)}</h1>\n        <Button onClick={() => navigate(-1)} variant=\"outline\" className=\"bg-slate-700/50 hover:bg-slate-600/70 border-slate-600\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backButton', currentLanguage)}\n        </Button>\n      </div>\n\n      <div className=\"space-y-4\">\n        {logs.map((log) => (\n          <div key={log.id} className={`p-3 rounded-lg shadow-md transition-all ${log.is_reverted ? 'bg-slate-800/50 opacity-60' : 'bg-slate-800/80'}`}>\n            <div className=\"flex flex-wrap justify-between items-start gap-2\">\n              <div>\n                <p className=\"font-semibold text-white\">\n                  <span className=\"text-purple-300 font-bold\">{log.action_type.toUpperCase()}</span> on {log.entity_type}\n                </p>\n                <p className=\"text-xs text-slate-400\">\n                  <span className=\"font-medium text-slate-300\">{log.user_email || 'N/A'}</span> at {format(new Date(log.created_at), 'Pp', { locale: dateLocales[currentLanguage] || enUS })}\n                </p>\n                 <p className=\"text-xs text-slate-400\">{getLocaleString('episodeTitle', currentLanguage)}: <span className=\"font-mono text-slate-300\">{log.episode_slug}</span> | ID: <span className=\"font-mono text-slate-300\">{log.entity_id}</span></p>\n              </div>\n              <div>\n                {log.is_reverted ? (\n                  <div className=\"flex items-center gap-2 text-green-400 px-3 py-1.5 rounded-md bg-green-900/30\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    <span className=\"font-semibold\">{getLocaleString('actionReverted', currentLanguage)}</span>\n                  </div>\n                ) : (\n                  <Button \n                    size=\"sm\"\n                    onClick={() => handleRevert(log)} \n                    disabled={revertingId === log.id || !user}\n                    variant=\"destructive\"\n                    className=\"bg-red-600/80 hover:bg-red-600\"\n                    title={!user ? \"Login to revert\" : \"\"}\n                  >\n                    {revertingId === log.id ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <RotateCcw className=\"mr-2 h-4 w-4\" />}\n                    {getLocaleString('revertButton', currentLanguage)}\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            <DiffViewer before={log.before_value} after={log.after_value} currentLanguage={currentLanguage} />\n            \n            {log.reverted_at && (\n              <p className=\"text-xs text-slate-500 mt-2 border-t border-slate-700 pt-2\">\n                {getLocaleString('revertedAtLabel', currentLanguage, { date: format(new Date(log.reverted_at), 'Pp', { locale: dateLocales[currentLanguage] || enUS }) })}\n              </p>\n            )}\n          </div>\n        ))}\n        {logs.length === 0 && (\n          <p className=\"text-center text-slate-400 py-8\">{getLocaleString('noEditHistory', currentLanguage) || \"No edit history found.\"}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditLogPage;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/EpisodesPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":17},{"ruleId":"no-unused-vars","severity":1,"message":"'EpisodesList' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"no-unused-vars","severity":1,"message":"'EpisodesPageHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26},{"ruleId":"no-unused-vars","severity":1,"message":"'FilterAndSearchControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'EmptyState' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { supabase } from '@/lib/supabaseClient';\nimport { Button } from '@/components/ui/button';\nimport { Loader2 } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport EpisodesList from '@/components/episodes/EpisodesList';\nimport EpisodesPageHeader from '@/components/episodes/EpisodesPageHeader';\nimport FilterAndSearchControls from '@/components/episodes/FilterAndSearchControls';\nimport EmptyState from '@/components/episodes/EmptyState';\n\nconst EpisodesPage = ({ currentLanguage }) => {\n  const [episodes, setEpisodes] = useState([]);\n  const [allQuestions, setAllQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [episodeQuestionsCount, setEpisodeQuestionsCount] = useState({});\n\n  const [availableYears, setAvailableYears] = useState([]);\n  const [availableMonths, setAvailableMonths] = useState([]);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [selectedMonth, setSelectedMonth] = useState(null);\n\n  const monthLabels = [\n    \"january\", \"february\", \"march\", \"april\", \"may\", \"june\", \n    \"july\", \"august\", \"september\", \"october\", \"november\", \"december\"\n  ];\n\n\n  const fetchEpisodesAndData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const { data: episodesData, error: episodesError } = await supabase\n        .from('episodes')\n        .select('slug, title, lang, audio_url, duration, date, created_at, file_has_lang_suffix, r2_object_key, r2_bucket_name')\n        .order('date', { ascending: false });\n\n      if (episodesError) throw episodesError;\n      \n      const { data: questionsData, error: questionsError } = await supabase\n        .from('questions')\n        .select('episode_slug, id, title, lang'); \n      \n      if (questionsError) throw questionsError;\n      setAllQuestions(questionsData || []);\n      \n      const langFilteredEpisodes = episodesData.filter(ep => \n        ep.lang === currentLanguage || ep.lang === 'all'\n      );\n      \n      const counts = {};\n      const years = new Set();\n      langFilteredEpisodes.forEach(ep => {\n        if (ep.date) {\n          years.add(new Date(ep.date).getFullYear().toString());\n        }\n        counts[ep.slug] = counts[ep.slug] || {};\n        ['ru', 'es', 'en'].forEach(lang => {\n           counts[ep.slug][lang] = (questionsData || []).filter(q => q.episode_slug === ep.slug && q.lang === lang).length;\n        });\n      });\n      \n      setAvailableYears(Array.from(years).sort((a,b) => Number(b) - Number(a)));\n      setEpisodeQuestionsCount(counts);\n      setEpisodes(langFilteredEpisodes);\n\n    } catch (err) {\n      setError(getLocaleString('errorFetchingEpisodes', currentLanguage, { errorMessage: err.message }));\n    } finally {\n      setLoading(false);\n    }\n  }, [currentLanguage]);\n\n  useEffect(() => {\n    fetchEpisodesAndData();\n    const channel = supabase\n      .channel('episodes-changes')\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'episodes' }, fetchEpisodesAndData)\n      .on('postgres_changes', { event: '*', schema: 'public', table: 'questions' }, fetchEpisodesAndData)\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n\n  }, [fetchEpisodesAndData]);\n\n  useEffect(() => {\n    if (selectedYear) {\n      const months = new Set();\n      episodes.forEach(ep => {\n        if (ep.date && new Date(ep.date).getFullYear().toString() === selectedYear) {\n          months.add(new Date(ep.date).getMonth());\n        }\n      });\n      const sortedMonths = Array.from(months).sort((a,b) => a - b);\n      setAvailableMonths(sortedMonths.map(m => ({ value: (m + 1).toString(), labelKey: monthLabels[m] })));\n    } else {\n      setAvailableMonths([]);\n      setSelectedMonth(null);\n    }\n  }, [selectedYear, episodes, monthLabels]);\n  \n  const handleResetFilters = () => {\n    setSelectedYear(null);\n    setSelectedMonth(null);\n  };\n\n  const filteredEpisodes = useMemo(() => {\n    let tempEpisodes = episodes;\n\n    if (selectedYear) {\n      tempEpisodes = tempEpisodes.filter(ep => ep.date && new Date(ep.date).getFullYear().toString() === selectedYear);\n      if (selectedMonth) {\n        tempEpisodes = tempEpisodes.filter(ep => ep.date && (new Date(ep.date).getMonth() + 1).toString() === selectedMonth);\n      }\n    }\n    \n    return tempEpisodes;\n  }, [episodes, selectedYear, selectedMonth]);\n\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[calc(100vh-200px)]\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" />\n        <p className=\"mt-4 text-lg\">{getLocaleString('loadingEpisodes', currentLanguage)}</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center p-8 bg-red-700/30 rounded-lg shadow-xl max-w-2xl mx-auto\">\n        <h2 className=\"text-xl font-bold mb-2\">{getLocaleString('errorLoadingData', currentLanguage)}</h2>\n        <p className=\"max-w-md mx-auto\">{error}</p>\n        <Button onClick={fetchEpisodesAndData} className=\"mt-4 bg-blue-500 hover:bg-blue-600\">\n          {getLocaleString('tryAgain', currentLanguage)}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-2 sm:p-4 max-w-2xl\">\n      <EpisodesPageHeader \n        currentLanguage={currentLanguage}\n      />\n      <FilterAndSearchControls\n        years={availableYears}\n        months={availableMonths}\n        selectedYear={selectedYear}\n        setSelectedYear={setSelectedYear}\n        selectedMonth={selectedMonth}\n        setSelectedMonth={setSelectedMonth}\n        currentLanguage={currentLanguage}\n        onResetFilters={handleResetFilters}\n      />\n\n      {filteredEpisodes.length === 0 ? (\n        <EmptyState currentLanguage={currentLanguage} />\n      ) : (\n        <EpisodesList \n          episodes={filteredEpisodes} \n          currentLanguage={currentLanguage} \n          episodeQuestionsCount={episodeQuestionsCount}\n          allQuestions={allQuestions}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default EpisodesPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/ManageEpisodesPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogCancel' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":103},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":105,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":122},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":124,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":141},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":143,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":159},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":33},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"no-unused-vars","severity":1,"message":"'ShieldAlert' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":57}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '@/lib/supabaseClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Trash2, Loader2, Search, ArrowLeft, ShieldAlert } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport { formatShortDate } from '@/lib/utils';\nimport { useToast } from '@/components/ui/use-toast';\nimport r2Service from '@/lib/r2Service';\n\nconst ManageEpisodesPage = ({ currentLanguage }) => {\n  const [episodes, setEpisodes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [episodeToDelete, setEpisodeToDelete] = useState(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [episodesWithMissingFiles, setEpisodesWithMissingFiles] = useState([]);\n  const [checkingMissingFiles, setCheckingMissingFiles] = useState(false);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const fetchEpisodes = useCallback(async () => {\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('episodes')\n      .select('slug, title, lang, date, r2_object_key, r2_bucket_name, file_has_lang_suffix')\n      .order('date', { ascending: false });\n\n    if (error) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('errorFetchingEpisodes', currentLanguage, { errorMessage: error.message }), variant: 'destructive' });\n      setEpisodes([]);\n    } else {\n      setEpisodes(data || []);\n    }\n    setLoading(false);\n  }, [currentLanguage, toast]);\n\n  const checkMissingFiles = useCallback(async () => {\n    if (!episodes || episodes.length === 0) return;\n    \n    setCheckingMissingFiles(true);\n    const missingFiles = [];\n    \n    // Check files in batches\n    const batchSize = 3;\n    for (let i = 0; i < episodes.length; i += batchSize) {\n      const batch = episodes.slice(i, i + batchSize);\n      const batchPromises = batch.map(async (episode) => {\n        if (!episode.r2_object_key) return null;\n        \n        try {\n          const { exists } = await r2Service.checkFileExists(episode.r2_object_key);\n          if (!exists) {\n            return episode;\n          }\n        } catch (error) {\n          console.warn('Error checking file for episode:', episode.slug, error);\n        }\n        return null;\n      });\n      \n      const batchResults = await Promise.all(batchPromises);\n      batchResults.forEach(result => {\n        if (result) missingFiles.push(result);\n      });\n      \n      // Small delay between batches\n      if (i + batchSize < episodes.length) {\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n    }\n    \n    setEpisodesWithMissingFiles(missingFiles);\n    setCheckingMissingFiles(false);\n  }, [episodes]);\n\n  useEffect(() => {\n    fetchEpisodes();\n  }, [fetchEpisodes]);\n\n  useEffect(() => {\n    if (episodes.length > 0) {\n      checkMissingFiles();\n    }\n  }, [episodes, checkMissingFiles]);\n\n  const handleDeleteClick = (episode) => {\n    setEpisodeToDelete(episode);\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDelete = async () => {\n    if (!episodeToDelete) return;\n    setIsDeleting(true);\n\n    try {\n      const { slug, lang, r2_object_key, r2_bucket_name } = episodeToDelete;\n\n      const { error: questionsError } = await supabase\n        .from('questions')\n        .delete()\n        .eq('episode_slug', slug)\n        .eq('lang', lang);\n      if (questionsError) throw new Error(getLocaleString('errorDeletingQuestions', currentLanguage, { errorMessage: questionsError.message }));\n\n      const { error: transcriptsError } = await supabase\n        .from('transcripts')\n        .delete()\n        .eq('episode_slug', slug)\n        .eq('lang', lang);\n      if (transcriptsError) throw new Error(getLocaleString('errorDeletingTranscripts', currentLanguage, { errorMessage: transcriptsError.message }));\n      \n      if (r2_object_key && r2_bucket_name) {\n        const deleteArchiveResult = await r2Service.deleteFile(r2_object_key, r2_bucket_name, currentLanguage);\n        if (!deleteArchiveResult.success) {\n           toast({ title: getLocaleString('warning', currentLanguage), description: getLocaleString('errorDeletingR2FilePartial', currentLanguage, {fileName: r2_object_key, errorMessage: deleteArchiveResult.error}), variant: 'destructive' });\n        } else {\n           toast({ title: getLocaleString('fileDeletedFromR2Title', currentLanguage), description: getLocaleString('fileDeletedFromR2Desc', currentLanguage, {fileName: r2_object_key}) });\n        }\n      }\n\n      const { error: episodeError } = await supabase\n        .from('episodes')\n        .delete()\n        .eq('slug', slug);\n      if (episodeError) throw new Error(getLocaleString('errorDeletingEpisodeDB', currentLanguage, { errorMessage: episodeError.message }));\n\n      toast({ title: getLocaleString('episodeDeletedTitle', currentLanguage), description: getLocaleString('episodeDeletedSuccess', currentLanguage, { episodeTitle: episodeToDelete.title || episodeToDelete.slug }) });\n      fetchEpisodes();\n    } catch (error) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: error.message, variant: 'destructive' });\n    } finally {\n      setIsDeleting(false);\n      setShowDeleteDialog(false);\n      setEpisodeToDelete(null);\n    }\n  };\n\n  const filteredEpisodes = episodes.filter(ep => {\n    const prefix = getLocaleString('meditationTitlePrefix', currentLanguage);\n    let datePart = '';\n    if (ep.date) {\n        datePart = formatShortDate(ep.date, currentLanguage);\n    }\n    const episodeComputedTitle = datePart ? `${prefix} ${datePart}` : ep.title || prefix;\n    return episodeComputedTitle.toLowerCase().includes(searchTerm.toLowerCase()) || ep.slug.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  const formatEpisodeTitle = (title, episodeDate, lang) => {\n    const prefix = getLocaleString('meditationTitlePrefix', lang);\n    let datePart = '';\n    if (episodeDate) {\n      datePart = formatShortDate(episodeDate, lang);\n    }\n    return datePart ? `${prefix} ${datePart}` : title || prefix;\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl bg-slate-800/70 rounded-xl shadow-2xl border border-slate-700/50\">\n      <Button \n        variant=\"outline\" \n        onClick={() => navigate('/episodes')} \n        className=\"mb-6 bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300\"\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backToEpisodes', currentLanguage)}\n      </Button>\n      <h1 className=\"text-3xl font-bold text-purple-300 mb-2\">{getLocaleString('manageEpisodesTitle', currentLanguage)}</h1>\n      <p className=\"text-sm text-slate-400 mb-6\">{getLocaleString('manageEpisodesDescription', currentLanguage)}</p>\n\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Input \n            type=\"text\"\n            placeholder={getLocaleString('searchEpisodes', currentLanguage)}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-slate-700/80 border-slate-600 focus:border-purple-500 text-white placeholder-slate-400\"\n          />\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400\" />\n        </div>\n      </div>\n\n      {/* Missing Files Section */}\n      {episodesWithMissingFiles.length > 0 && (\n        <div className=\"mb-8 p-4 bg-red-500/20 border border-red-500/40 rounded-lg\">\n          <h2 className=\"text-lg font-semibold text-red-300 mb-3 flex items-center\">\n            <ShieldAlert className=\"h-5 w-5 mr-2\" />\n            {getLocaleString('episodesWithMissingFiles', currentLanguage)} ({episodesWithMissingFiles.length})\n          </h2>\n          <p className=\"text-sm text-red-200 mb-4\">\n            {getLocaleString('missingFilesDescription', currentLanguage)}\n          </p>\n          <ul className=\"space-y-2\">\n            {episodesWithMissingFiles.map(episode => (\n              <li key={episode.slug} className=\"p-3 bg-red-500/10 border border-red-500/30 rounded-lg flex justify-between items-center\">\n                <div>\n                  <h3 className=\"text-sm font-medium text-red-200\">\n                    {formatEpisodeTitle(episode.title, episode.date, episode.lang === 'all' ? currentLanguage : episode.lang)}\n                  </h3>\n                  <p className=\"text-xs text-red-300\">{episode.slug} - {episode.r2_object_key}</p>\n                </div>\n                <Button \n                  variant=\"destructive\" \n                  size=\"sm\" \n                  onClick={() => handleDeleteClick(episode)}\n                  className=\"bg-red-700 hover:bg-red-800 text-white\"\n                  disabled={isDeleting}\n                >\n                  <Trash2 className=\"h-4 w-4 mr-1.5\" />\n                  {getLocaleString('delete', currentLanguage)}\n                </Button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {checkingMissingFiles && (\n        <div className=\"mb-6 p-4 bg-yellow-500/20 border border-yellow-500/40 rounded-lg\">\n          <div className=\"flex items-center\">\n            <Loader2 className=\"h-5 w-5 animate-spin text-yellow-400 mr-2\" />\n            <span className=\"text-yellow-200\">{getLocaleString('checkingMissingFiles', currentLanguage)}</span>\n          </div>\n        </div>\n      )}\n\n      {loading ? (\n        <div className=\"flex justify-center items-center py-10\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" />\n        </div>\n      ) : filteredEpisodes.length === 0 ? (\n        <p className=\"text-center text-slate-400 py-10\">{getLocaleString('noEpisodesFound', currentLanguage)}</p>\n      ) : (\n        <ul className=\"space-y-3\">\n          {filteredEpisodes.map(episode => (\n            <li key={episode.slug} className=\"p-4 bg-slate-700/60 rounded-lg border border-slate-600 flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-md font-semibold text-purple-200 truncate\" title={formatEpisodeTitle(episode.title, episode.date, episode.lang === 'all' ? currentLanguage : episode.lang)}>\n                  {formatEpisodeTitle(episode.title, episode.date, episode.lang === 'all' ? currentLanguage : episode.lang)}\n                </h2>\n                <p className=\"text-xs text-slate-400\">{episode.slug} \n                {episode.file_has_lang_suffix && episode.lang !== 'all' && (\n                  <span className={`ml-2 text-xs font-medium px-1.5 py-0.5 rounded-full ${\n                    episode.lang === 'ru' ? 'bg-blue-600/70 text-blue-100' : 'bg-yellow-600/70 text-yellow-100'\n                  }`}>\n                    {episode.lang.toUpperCase()}\n                  </span>\n                )}\n                </p>\n              </div>\n              <Button \n                variant=\"destructive\" \n                size=\"sm\" \n                onClick={() => handleDeleteClick(episode)}\n                className=\"bg-red-700 hover:bg-red-800 text-white\"\n                disabled={isDeleting}\n              >\n                <Trash2 className=\"h-4 w-4 mr-1.5\" />\n                {getLocaleString('delete', currentLanguage)}\n              </Button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {episodeToDelete && (\n        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n          <AlertDialogContent className=\"bg-slate-800 border-slate-700 text-white\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"text-red-400 flex items-center\">\n                <ShieldAlert className=\"h-6 w-6 mr-2\" />\n                {getLocaleString('confirmDeleteTitle', currentLanguage)}\n              </AlertDialogTitle>\n              <AlertDialogDescription className=\"text-slate-300\">\n                {getLocaleString('confirmDeleteEpisodeMessage', currentLanguage, { episodeTitle: formatEpisodeTitle(episodeToDelete.title, episodeToDelete.date, episodeToDelete.lang === 'all' ? currentLanguage : episodeToDelete.lang) })}\n                <br/>\n                <span className=\"font-semibold text-yellow-400 mt-2 block\">{getLocaleString('actionIrreversible', currentLanguage)}</span>\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel onClick={() => setShowDeleteDialog(false)} className=\"bg-slate-600 hover:bg-slate-500 border-slate-500\" disabled={isDeleting}>\n                {getLocaleString('cancel', currentLanguage)}\n              </AlertDialogCancel>\n              <AlertDialogAction onClick={confirmDelete} className=\"bg-red-600 hover:bg-red-700\" disabled={isDeleting}>\n                {isDeleting ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : <Trash2 className=\"h-4 w-4 mr-2\" />}\n                {isDeleting ? getLocaleString('deleting', currentLanguage) : getLocaleString('deleteConfirm', currentLanguage)}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n    </div>\n  );\n};\n\nexport default ManageEpisodesPage;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/ManagePage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'Checkbox' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":18},{"ruleId":"no-unused-vars","severity":1,"message":"'UploadCloud' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'PlusCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'Settings2' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":64},{"ruleId":"no-unused-vars","severity":1,"message":"'Trash2' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":72},{"ruleId":"no-unused-vars","severity":1,"message":"'Search' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":80},{"ruleId":"no-unused-vars","severity":1,"message":"'ShieldAlert' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":82,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":93},{"ruleId":"no-unused-vars","severity":1,"message":"'ListChecks' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":95,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":105},{"ruleId":"no-unused-vars","severity":1,"message":"'FileUploadItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":12,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'OverwriteDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":13,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":23},{"ruleId":"no-unused-vars","severity":1,"message":"'Input' is defined but never used. Allowed unused vars must match /^React$/u.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogAction' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":40},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogCancel' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":59},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogContent' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":79},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogDescription' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":81,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":103},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogFooter' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":105,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":122},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogHeader' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":124,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":141},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertDialogTitle' is defined but never used. Allowed unused vars must match /^React$/u.","line":15,"column":143,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":159},{"ruleId":"no-unused-vars","severity":1,"message":"'ManageEpisodesList' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":18,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":25},{"ruleId":"no-unused-vars","severity":1,"message":"'title' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":92,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":65},{"ruleId":"no-unused-vars","severity":1,"message":"'errorCount' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":114,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDropzone } from 'react-dropzone';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { UploadCloud, Loader2, PlusCircle, ArrowLeft, Settings2, Trash2, Search, ShieldAlert, ListChecks } from 'lucide-react';\nimport { getLocaleString, getPluralizedLocaleString } from '@/lib/locales';\nimport { useToast } from '@/components/ui/use-toast';\nimport { supabase } from '@/lib/supabaseClient';\nimport r2Service from '@/lib/r2Service';\nimport useFileUploadManager from '@/hooks/useFileUploadManager';\nimport FileUploadItem from '@/components/uploader/FileUploadItem';\nimport OverwriteDialog from '@/components/uploader/OverwriteDialog';\nimport { Input } from '@/components/ui/input';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { formatShortDate } from '@/lib/utils';\n\nconst ManageEpisodesList = ({ currentLanguage }) => {\n  const [episodes, setEpisodes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedEpisodes, setSelectedEpisodes] = useState({});\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [episodesToDelete, setEpisodesToDelete] = useState([]);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const { toast } = useToast();\n\n  const fetchEpisodes = useCallback(async () => {\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('episodes')\n      .select('slug, title, lang, date, r2_object_key, r2_bucket_name, file_has_lang_suffix')\n      .order('date', { ascending: false });\n\n    if (error) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: getLocaleString('errorFetchingEpisodes', currentLanguage, { errorMessage: error.message }), variant: 'destructive' });\n      setEpisodes([]);\n    } else {\n      setEpisodes(data || []);\n    }\n    setLoading(false);\n  }, [currentLanguage, toast]);\n\n  useEffect(() => {\n    fetchEpisodes();\n  }, [fetchEpisodes]);\n\n  const handleSelectEpisode = (slug, lang) => {\n    const id = `${slug}-${lang}`;\n    setSelectedEpisodes(prev => ({\n      ...prev,\n      [id]: !prev[id]\n    }));\n  };\n\n  const handleSelectAll = () => {\n    const allSelected = Object.values(selectedEpisodes).every(Boolean) && Object.keys(selectedEpisodes).length === filteredEpisodes.length && filteredEpisodes.length > 0;\n    const newSelectedEpisodes = {};\n    if (!allSelected) {\n      filteredEpisodes.forEach(ep => {\n        newSelectedEpisodes[`${ep.slug}-${ep.lang}`] = true;\n      });\n    }\n    setSelectedEpisodes(newSelectedEpisodes);\n  };\n  \n\n  const numSelected = Object.values(selectedEpisodes).filter(Boolean).length;\n\n  const handleDeleteClick = (episode) => {\n    setEpisodesToDelete([episode]);\n    setShowDeleteDialog(true);\n  };\n  \n  const handleDeleteSelectedClick = () => {\n    const toDelete = episodes.filter(ep => selectedEpisodes[`${ep.slug}-${ep.lang}`]);\n    if (toDelete.length > 0) {\n      setEpisodesToDelete(toDelete);\n      setShowDeleteDialog(true);\n    }\n  };\n\n  const confirmDelete = async () => {\n    if (episodesToDelete.length === 0) return;\n    setIsDeleting(true);\n\n    let successCount = 0;\n    let errorCount = 0;\n\n    for (const episode of episodesToDelete) {\n      try {\n        const { slug, lang, r2_object_key, r2_bucket_name, title } = episode;\n        \n        const { error: questionsError } = await supabase.from('questions').delete().eq('episode_slug', slug).eq('lang', lang);\n        if (questionsError) throw new Error(getLocaleString('errorDeletingQuestions', currentLanguage, { errorMessage: questionsError.message }));\n\n        const { error: transcriptsError } = await supabase.from('transcripts').delete().eq('episode_slug', slug).eq('lang', lang);\n        if (transcriptsError) throw new Error(getLocaleString('errorDeletingTranscripts', currentLanguage, { errorMessage: transcriptsError.message }));\n        \n        if (r2_object_key && r2_bucket_name) {\n          const deleteArchiveResult = await r2Service.deleteFile(r2_object_key, r2_bucket_name, currentLanguage);\n          if (!deleteArchiveResult.success) {\n             toast({ title: getLocaleString('warning', currentLanguage), description: getLocaleString('errorDeletingR2FilePartial', currentLanguage, {fileName: r2_object_key, errorMessage: deleteArchiveResult.error}), variant: 'destructive' });\n          } else {\n             toast({ title: getLocaleString('fileDeletedFromR2Title', currentLanguage), description: getLocaleString('fileDeletedFromR2Desc', currentLanguage, {fileName: r2_object_key}) });\n          }\n        }\n\n        const { error: episodeError } = await supabase.from('episodes').delete().eq('slug', slug);\n        if (episodeError) throw new Error(getLocaleString('errorDeletingEpisodeDB', currentLanguage, { errorMessage: episodeError.message }));\n        successCount++;\n      } catch (error) {\n        toast({ title: getLocaleString('errorGeneric', currentLanguage), description: `${getLocaleString('errorDeletingEpisodeDB', currentLanguage, {errorMessage: error.message})} (Episode: ${episode.title || episode.slug})`, variant: 'destructive' });\n        errorCount++;\n      }\n    }\n    \n    if (successCount > 0) {\n        toast({ title: getLocaleString('episodeDeletedTitle', currentLanguage), \n                description: `${successCount} ${getPluralizedLocaleString('episodeCount', currentLanguage, successCount, {count: successCount})} ${getLocaleString('deletedSuccessfully', currentLanguage) || 'deleted successfully'}.`\n              });\n    }\n\n\n    fetchEpisodes();\n    setSelectedEpisodes({});\n    setIsDeleting(false);\n    setShowDeleteDialog(false);\n    setEpisodesToDelete([]);\n  };\n\n  const filteredEpisodes = episodes.filter(ep => {\n    const prefix = getLocaleString('meditationTitlePrefix', currentLanguage);\n    let datePart = '';\n    if (ep.date) datePart = formatShortDate(ep.date, currentLanguage);\n    const episodeComputedTitle = datePart ? `${prefix} ${datePart}` : ep.title || prefix;\n    return episodeComputedTitle.toLowerCase().includes(searchTerm.toLowerCase()) || ep.slug.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n  \n  const formatEpisodeTitle = (title, episodeDate, lang) => {\n    const prefix = getLocaleString('meditationTitlePrefix', lang);\n    let datePart = '';\n    if (episodeDate) datePart = formatShortDate(episodeDate, lang);\n    return datePart ? `${prefix} ${datePart}` : title || prefix;\n  };\n\n  return (\n    <div className=\"mt-10\">\n      <h2 className=\"text-2xl font-bold text-purple-300 mb-2 flex items-center\">\n        <Settings2 className=\"mr-2 h-6 w-6\"/>\n        {getLocaleString('manageExistingEpisodes', currentLanguage)}\n      </h2>\n      <p className=\"text-sm text-slate-400 mb-6\">{getLocaleString('manageEpisodesDescription', currentLanguage)}</p>\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-3\">\n        <div className=\"relative flex-grow\">\n          <Input \n            type=\"text\"\n            placeholder={getLocaleString('searchEpisodes', currentLanguage)}\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 bg-slate-700/80 border-slate-600 focus:border-purple-500 text-white placeholder-slate-400 h-10\"\n          />\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-slate-400\" />\n        </div>\n        <Button onClick={handleSelectAll} variant=\"outline\" className=\"h-10 border-slate-500 bg-slate-600/50 hover:bg-slate-600 text-slate-300 hover:text-white\" disabled={filteredEpisodes.length === 0}>\n           <ListChecks className=\"mr-2 h-4 w-4\"/> {numSelected === filteredEpisodes.length && filteredEpisodes.length > 0 ? getLocaleString('deselectAll', currentLanguage) : getLocaleString('selectAll', currentLanguage)} ({numSelected})\n        </Button>\n        <Button onClick={handleDeleteSelectedClick} variant=\"destructive\" className=\"h-10\" disabled={numSelected === 0 || isDeleting}>\n          <Trash2 className=\"mr-2 h-4 w-4\"/> {getLocaleString('deleteSelected', currentLanguage)} ({numSelected})\n        </Button>\n      </div>\n      {loading ? (\n        <div className=\"flex justify-center items-center py-10\"><Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" /></div>\n      ) : filteredEpisodes.length === 0 ? (\n        <p className=\"text-center text-slate-400 py-10\">{getLocaleString('noEpisodesFound', currentLanguage)}</p>\n      ) : (\n        <ul className=\"space-y-3\">\n          {filteredEpisodes.map(episode => (\n            <li key={`${episode.slug}-${episode.lang}`} className=\"p-3 sm:p-4 bg-slate-700/60 rounded-lg border border-slate-600 flex items-center gap-3\">\n              <Checkbox\n                id={`select-${episode.slug}-${episode.lang}`}\n                checked={!!selectedEpisodes[`${episode.slug}-${episode.lang}`]}\n                onCheckedChange={() => handleSelectEpisode(episode.slug, episode.lang)}\n                className=\"border-slate-500 data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500\"\n              />\n              <div className=\"flex-grow min-w-0\">\n                <label htmlFor={`select-${episode.slug}-${episode.lang}`} className=\"cursor-pointer\">\n                    <h3 className=\"text-sm sm:text-md font-semibold text-purple-200 truncate\" title={formatEpisodeTitle(episode.title, episode.date, episode.lang === 'all' ? currentLanguage : episode.lang)}>\n                    {formatEpisodeTitle(episode.title, episode.date, episode.lang === 'all' ? currentLanguage : episode.lang)}\n                    </h3>\n                </label>\n                <p className=\"text-xs text-slate-400\">{episode.slug} \n                {episode.file_has_lang_suffix && episode.lang !== 'all' && (\n                  <span className={`ml-2 text-xs font-medium px-1.5 py-0.5 rounded-full ${\n                    episode.lang === 'ru' ? 'bg-blue-600/70 text-blue-100' : \n                    episode.lang === 'es' ? 'bg-yellow-600/70 text-yellow-100' :\n                    'bg-green-600/70 text-green-100' \n                  }`}>\n                    {episode.lang.toUpperCase()}\n                  </span>\n                )}</p>\n              </div>\n              <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDeleteClick(episode)} className=\"bg-red-700 hover:bg-red-800 text-white shrink-0\" disabled={isDeleting}>\n                <Trash2 className=\"h-4 w-4 sm:mr-1.5\" />\n                <span className=\"hidden sm:inline\">{getLocaleString('delete', currentLanguage)}</span>\n              </Button>\n            </li>\n          ))}\n        </ul>\n      )}\n      {showDeleteDialog && (\n        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n          <AlertDialogContent className=\"bg-slate-800 border-slate-700 text-white\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"text-red-400 flex items-center\"><ShieldAlert className=\"h-6 w-6 mr-2\" />{getLocaleString('confirmDeleteTitle', currentLanguage)}</AlertDialogTitle>\n              <AlertDialogDescription className=\"text-slate-300\">\n                { episodesToDelete.length === 1 \n                    ? getLocaleString('confirmDeleteEpisodeMessage', currentLanguage, { episodeTitle: formatEpisodeTitle(episodesToDelete[0].title, episodesToDelete[0].date, episodesToDelete[0].lang === 'all' ? currentLanguage : episodesToDelete[0].lang) })\n                    : getLocaleString('confirmDeleteMultipleEpisodesMessage', currentLanguage, { count: episodesToDelete.length })\n                }\n                <br/><span className=\"font-semibold text-yellow-400 mt-2 block\">{getLocaleString('actionIrreversible', currentLanguage)}</span>\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel onClick={() => setShowDeleteDialog(false)} className=\"bg-slate-600 hover:bg-slate-500 border-slate-500\" disabled={isDeleting}>{getLocaleString('cancel', currentLanguage)}</AlertDialogCancel>\n              <AlertDialogAction onClick={confirmDelete} className=\"bg-red-600 hover:bg-red-700\" disabled={isDeleting}>\n                {isDeleting ? <Loader2 className=\"h-4 w-4 animate-spin mr-2\" /> : <Trash2 className=\"h-4 w-4 mr-2\" />}\n                {isDeleting ? getLocaleString('deleting', currentLanguage) : getLocaleString('deleteConfirm', currentLanguage)}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n    </div>\n  );\n};\n\n\nconst ManagePage = ({ currentLanguage }) => {\n  const navigate = useNavigate();\n  const {\n    filesToProcess,\n    isProcessingAll,\n    showOverwriteDialog,\n    currentItemForOverwrite,\n    addFilesToQueue,\n    handleProcessAllFiles,\n    handleTimingsChange,\n    handleTitleChange,\n    handleRemoveItem,\n    confirmOverwrite,\n    cancelOverwrite,\n  } = useFileUploadManager(currentLanguage);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    addFilesToQueue(acceptedFiles);\n  }, [addFilesToQueue]);\n\n  const { getRootProps, getInputProps, isDragActive, open } = useDropzone({\n    onDrop,\n    accept: { 'audio/*': ['.mp3', '.wav', '.m4a', '.aac', '.ogg', '.flac'] },\n    multiple: true,\n    noClick: true,\n    noKeyboard: true,\n  });\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl bg-slate-800/70 rounded-xl shadow-2xl border border-slate-700/50\">\n      <Button \n        variant=\"outline\" \n        onClick={() => navigate('/episodes')} \n        className=\"mb-6 bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300\"\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backToEpisodes', currentLanguage)}\n      </Button>\n      <h1 className=\"text-3xl font-bold text-purple-300 mb-2\">{getLocaleString('manageAndUploadTitle', currentLanguage)}</h1>\n      <p className=\"text-sm text-slate-400 mb-6\">{getLocaleString('manageAndUploadDescription', currentLanguage)}</p>\n\n      <div {...getRootProps({ className: `p-6 border-2 border-dashed rounded-lg text-center cursor-pointer mb-6 ${isDragActive ? 'border-purple-500 bg-purple-500/10' : 'border-slate-600 hover:border-slate-500'}` })}>\n        <input {...getInputProps()} style={{ display: 'none' }} />\n        <UploadCloud className=\"mx-auto h-12 w-12 text-slate-400 mb-2\" />\n        {isDragActive ? (\n          <p className=\"text-purple-300 text-md\">{getLocaleString('dropFilesHere', currentLanguage)}</p>\n        ) : (\n          <p className=\"text-slate-300 text-md\">{getLocaleString('dragOrClickUpload', currentLanguage)}</p>\n        )}\n         <Button type=\"button\" onClick={open} variant=\"ghost\" className=\"mt-2 text-purple-400 hover:text-purple-300 focus-visible:ring-purple-400 bg-purple-500/10 hover:bg-purple-500/20\">\n            {getLocaleString('selectFiles', currentLanguage)}\n        </Button>\n        <p className=\"text-xs text-slate-500 mt-1\">{getLocaleString('supportedFormats', currentLanguage)}</p>\n      </div>\n\n      {filesToProcess.length > 0 && (\n        <div className=\"space-y-4 mb-6\">\n          {filesToProcess.map((itemData) => (\n            <FileUploadItem \n              key={itemData.id}\n              itemData={itemData}\n              onTimingsChange={handleTimingsChange}\n              onTitleChange={handleTitleChange}\n              onRemove={handleRemoveItem}\n              currentLanguage={currentLanguage}\n            />\n          ))}\n        </div>\n      )}\n      \n      <div className=\"flex items-center justify-between mt-8\">\n        <Button \n            onClick={open} \n            variant=\"outline\"\n            className=\"border-purple-500 text-purple-300 hover:bg-purple-500/10 hover:text-purple-200 focus-visible:ring-purple-500\"\n            disabled={isProcessingAll}\n        >\n            <PlusCircle className=\"mr-2 h-5 w-5\" />\n            {getLocaleString('addAnotherFile', currentLanguage)}\n        </Button>\n        <Button \n          onClick={handleProcessAllFiles} \n          disabled={isProcessingAll || filesToProcess.length === 0 || filesToProcess.every(fd => fd.isUploading || fd.uploadComplete || fd.uploadError)} \n          className=\"bg-green-600 hover:bg-green-700 text-lg px-8 py-3 text-white\"\n        >\n          {isProcessingAll ? (\n            <>\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              {getLocaleString('processing', currentLanguage)}...\n            </>\n          ) : (\n            <>{getLocaleString('startAllUploads', currentLanguage)}</>\n          )}\n        </Button>\n      </div>\n\n      <OverwriteDialog \n        isOpen={showOverwriteDialog}\n        onOpenChange={cancelOverwrite} \n        onConfirm={confirmOverwrite}\n        onCancel={cancelOverwrite}\n        slug={currentItemForOverwrite?.episodeSlug || ''}\n        currentLanguage={currentLanguage}\n      />\n      \n      <ManageEpisodesList currentLanguage={currentLanguage} />\n    </div>\n  );\n};\n\nexport default ManagePage;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/NotFoundPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Link' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'AlertTriangle' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\n\nconst NotFoundPage = ({ currentLanguage }) => {\n  return (\n    <div className=\"min-h-[calc(100vh-150px)] flex flex-col items-center justify-center text-center p-4\">\n      <AlertTriangle className=\"w-16 h-16 text-yellow-400 mb-6\" />\n      <h1 className=\"text-4xl font-bold text-white mb-3\">{getLocaleString('pageNotFoundTitle', currentLanguage)}</h1>\n      <p className=\"text-lg text-slate-300 mb-8 max-w-md\">\n        {getLocaleString('pageNotFoundDescription', currentLanguage)}\n      </p>\n      <Link to=\"/episodes\">\n        <Button className=\"bg-purple-600 hover:bg-purple-700 text-lg px-8 py-6\">\n          {getLocaleString('backToEpisodes', currentLanguage)}\n        </Button>\n      </Link>\n    </div>\n  );\n};\n\nexport default NotFoundPage;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/PlayerPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'useLocation' is defined but never used. Allowed unused vars must match /^React$/u.","line":2,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":45},{"ruleId":"no-unused-vars","severity":1,"message":"'PodcastPlayer' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'QuestionsManager' is defined but never used. Allowed unused vars must match /^React$/u.","line":6,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'FloatingPlayerControls' is defined but never used. Allowed unused vars must match /^React$/u.","line":7,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":10,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":28},{"ruleId":"no-unused-vars","severity":1,"message":"'SpeakerAssignmentDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":16,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":31},{"ruleId":"no-unused-vars","severity":1,"message":"'fetchEpisodeDetails' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":36,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":24},{"ruleId":"no-unused-vars","severity":1,"message":"'playerShowFloatingControls' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":44,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'setPlayerShowFloatingControls' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":52,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":59}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { supabase } from '@/lib/supabaseClient';\nimport { useToast } from '@/components/ui/use-toast';\nimport PodcastPlayer from '@/components/PodcastPlayer'; \nimport QuestionsManager from '@/components/player/QuestionsManager';\nimport FloatingPlayerControls from '@/components/player/FloatingPlayerControls';\nimport { getLocaleString } from '@/lib/locales';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Loader2 } from 'lucide-react';\nimport { formatShortDate } from '@/lib/utils';\nimport useEpisodeData from '@/hooks/player_page/useEpisodeData';\nimport usePlayerInteractions from '@/hooks/player_page/usePlayerInteractions';\nimport useSupabaseSubscriptions from '@/hooks/player_page/useSupabaseSubscriptions';\nimport useSpeakerAssignment from '@/hooks/player/useSpeakerAssignment'; \nimport SpeakerAssignmentDialog from '@/components/transcript/SpeakerAssignmentDialog';\n\nconst PlayerPage = ({ currentLanguage, user }) => {\n  const { episodeSlug } = useParams(); \n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const audioRef = useRef(null); \n  const [showFloatingControls, setShowFloatingControls] = useState(false);\n  const playerControlsContainerRef = useRef(null);\n\n  const {\n    episodeData,\n    questions,\n    transcript,\n    loading,\n    questionsLoading,\n    transcriptLoading,\n    error,\n    questionsUpdatedId,\n    fetchEpisodeDetails,\n    fetchQuestionsForEpisode,\n    fetchTranscriptForEpisode,\n    setTranscript,\n  } = useEpisodeData(episodeSlug, currentLanguage, toast);\n\n  const {\n    jumpDetails,\n    showFloatingControls: playerShowFloatingControls,\n    playerState,\n    showTranscriptUI,\n    handleSeekToTime,\n    handlePlayerStateChange,\n    handleToggleShowTranscript,\n    handleFloatingPlayerSkip,\n    handleFloatingPlayPause,\n    setShowFloatingControls: setPlayerShowFloatingControls\n  } = usePlayerInteractions(audioRef, playerControlsContainerRef, episodeSlug, questions, true); \n\n  useSupabaseSubscriptions(\n    episodeSlug,\n    episodeData,\n    currentLanguage,\n    fetchQuestionsForEpisode,\n    fetchTranscriptForEpisode\n  );\n  \n  useEffect(() => {\n    const handleScroll = () => {\n      const ref = playerControlsContainerRef.current;\n      if (ref) {\n        const rect = ref.getBoundingClientRect();\n        if (rect.bottom < 0) {\n          setShowFloatingControls(true);\n        } else {\n          setShowFloatingControls(false);\n        }\n      } else {\n        setShowFloatingControls(false);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    handleScroll();\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const handleQuestionUpdate = useCallback(async (action, questionData) => {\n    if (!episodeData || !episodeData.slug) return;\n    \n    let dbError;\n    const langForQuestions = episodeData.lang === 'all' ? currentLanguage : episodeData.lang;\n\n    if (action === 'add') {\n      const questionPayload = { \n        episode_slug: episodeData.slug, \n        time: questionData.time, \n        title: questionData.title, \n        lang: questionData.lang || langForQuestions,\n        is_intro: questionData.isIntro || false,\n        is_full_transcript: questionData.isFullTranscript || false\n      };\n      const { error } = await supabase.from('questions').insert(questionPayload).select().single();\n      dbError = error;\n    } else if (action === 'update') {\n      const questionPayload = { \n        title: questionData.title, \n        time: questionData.time, \n        lang: questionData.lang || langForQuestions,\n        is_intro: questionData.isIntro || false,\n        is_full_transcript: questionData.isFullTranscript || false\n      };\n      const { error } = await supabase.from('questions').update(questionPayload).eq('id', questionData.id).select().single();\n      dbError = error;\n    } else if (action === 'delete') {\n      const { error } = await supabase.from('questions').delete().eq('id', questionData.id);\n      dbError = error;\n    }\n\n    if (dbError) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: dbError.message, variant: 'destructive' });\n    } else {\n      fetchQuestionsForEpisode(episodeData.slug, langForQuestions);\n    }\n  }, [episodeData, currentLanguage, toast, fetchQuestionsForEpisode]);\n\n  const handleTranscriptUpdate = useCallback(async (newTranscriptData) => {\n    if (!episodeData || !episodeData.slug) return;\n    const langForContent = episodeData.lang === 'all' ? currentLanguage : episodeData.lang;\n\n    const { error: updateError } = await supabase\n      .from('transcripts')\n      .update({ edited_transcript_data: newTranscriptData, status: 'completed' })\n      .eq('episode_slug', episodeData.slug)\n      .eq('lang', langForContent);\n\n    if (updateError) {\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: `Failed to update transcript: ${updateError.message}`, variant: \"destructive\" });\n    } else {\n      setTranscript(newTranscriptData); \n    }\n  }, [episodeData, currentLanguage, toast, setTranscript]);\n\n  const playerEpisodeDataMemo = useMemo(() => {\n    if (!episodeData) return null;\n    \n    const langForDisplay = episodeData.lang === 'all' ? currentLanguage : episodeData.lang;\n    const prefix = getLocaleString('meditationTitlePrefix', langForDisplay);\n    let datePart = '';\n\n    if (episodeData.date) {\n        datePart = formatShortDate(episodeData.date, langForDisplay);\n    } else if (episodeData.created_at) {\n        datePart = formatShortDate(episodeData.created_at, langForDisplay);\n    }\n    const displayTitle = datePart ? `${prefix} ${datePart}` : episodeData.title || prefix;\n\n    const playerData = {\n      ...episodeData,\n      displayTitle: displayTitle,\n      questions: questions,\n      transcript: transcript,\n      jumpToTime: jumpDetails.time,\n      jumpId: jumpDetails.id,\n      jumpToQuestionId: jumpDetails.questionId,\n      playAfterJump: jumpDetails.playAfterJump,\n      segmentToHighlight: jumpDetails.segmentToHighlight,\n      questionsUpdatedId: questionsUpdatedId,\n      lang: langForDisplay,\n      onTranscriptUpdate: handleTranscriptUpdate \n    };\n\n\n\n    return playerData;\n  }, [episodeData, questions, transcript, jumpDetails, questionsUpdatedId, currentLanguage, handleTranscriptUpdate]);\n  \n  const {\n    isSpeakerAssignmentDialogOpen,\n    segmentForSpeakerAssignment,\n    handleOpenSpeakerAssignmentDialog,\n    handleSaveSpeakerAssignment,\n    handleCloseSpeakerAssignmentDialog,\n  } = useSpeakerAssignment(\n    playerEpisodeDataMemo, \n    handleTranscriptUpdate, \n    toast, \n    currentLanguage, \n    fetchTranscriptForEpisode, \n    playerEpisodeDataMemo?.slug, \n    playerEpisodeDataMemo?.lang\n  );\n\n  // Пока не получили базовые данные эпизода — показываем простой лоадер\n  if (loading && !episodeData) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-[calc(100vh-200px)]\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-purple-400\" />\n        <p className=\"mt-4 text-lg\">{getLocaleString('loadingEpisode', currentLanguage)}</p>\n      </div>\n    );\n  }\n\n  // Не блокируем рендер плеера: если грузится только текст/вопросы — покажем их спиннеры ниже\n  if (!episodeData && !loading) {\n    return (\n      <div className=\"text-center p-8 bg-red-700/30 rounded-lg shadow-xl\">\n        <h2 className=\"text-xl font-bold mb-2\">{getLocaleString('errorLoadingData', currentLanguage)}</h2>\n        <p className=\"max-w-md mx-auto\">{getLocaleString('episodeNotFound', currentLanguage)}</p>\n        <Button onClick={() => navigate('/episodes')} variant=\"outline\" className=\"mt-4 bg-slate-700/50 hover:bg-slate-600/70 border-slate-600 text-slate-300 hover:text-white\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backToEpisodesShort', currentLanguage)}\n        </Button>\n      </div>\n    );\n  }\n\n  if (error && !playerEpisodeDataMemo) {\n    return (\n      <div className=\"text-center p-8 bg-red-700/30 rounded-lg shadow-xl\">\n        <h2 className=\"text-xl font-bold mb-2\">{getLocaleString('errorLoadingData', currentLanguage)}</h2>\n        <p className=\"max-w-md mx-auto\">{error}</p>\n        <Button onClick={() => navigate('/episodes')} variant=\"outline\" className=\"mt-4 bg-slate-700/50 hover:bg-slate-600/70 border-slate-600 text-slate-300 hover:text-white\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backToEpisodesShort', currentLanguage)}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      {showFloatingControls && (\n        <FloatingPlayerControls\n          episodeTitle={playerEpisodeDataMemo?.displayTitle || ''}\n          isPlaying={playerState.isPlaying}\n          activeQuestionTitle={playerState.activeQuestionTitle}\n          onPlayPause={handleFloatingPlayPause}\n          onSkipSeconds={handleFloatingPlayerSkip}\n          currentLanguage={currentLanguage}\n        />\n      )}\n      <div className=\"w-full max-w-3xl\">\n        <div ref={playerControlsContainerRef} className=\"mb-4\">\n          {playerEpisodeDataMemo && (\n            <PodcastPlayer\n                key={playerEpisodeDataMemo.slug + '-' + playerEpisodeDataMemo.lang}\n                episodeData={playerEpisodeDataMemo}\n                onQuestionUpdate={handleQuestionUpdate}\n                currentLanguage={currentLanguage}\n                onQuestionSelectJump={handleSeekToTime}\n                audioRef={audioRef} \n                episodeSlug={playerEpisodeDataMemo.slug}\n                episodeAudioUrl={playerEpisodeDataMemo.audio_url}\n                episodeLang={playerEpisodeDataMemo.lang}\n                episodeDate={playerEpisodeDataMemo.date}\n                navigateBack={() => navigate('/episodes')}\n                onPlayerStateChange={handlePlayerStateChange}\n                playerControlsContainerRef={playerControlsContainerRef}\n                showTranscript={showTranscriptUI}\n                onToggleShowTranscript={handleToggleShowTranscript}\n                user={user}\n                onTranscriptUpdate={handleTranscriptUpdate}\n                fetchTranscriptForEpisode={fetchTranscriptForEpisode}\n            />\n          )}\n        </div>\n        <div className=\"w-full relative\">\n          {(questionsLoading || transcriptLoading) && (\n            <div className=\"absolute top-2 left-1/2 -translate-x-1/2 z-10 px-2 py-1 rounded-md bg-slate-800/70 backdrop-blur border border-slate-700/70 text-slate-300 text-xs flex items-center gap-1.5 shadow-md\">\n              <Loader2 className=\"h-3.5 w-3.5 animate-spin text-purple-400\" />\n              <span>{getLocaleString('loadingTranscriptAndQuestions', currentLanguage) || 'Loading transcript and questions...'}</span>\n            </div>\n          )}\n           <QuestionsManager\n            questions={playerEpisodeDataMemo.questions || []}\n            currentTime={playerState.currentTime}\n            duration={playerState.duration}\n            onQuestionsChange={handleQuestionUpdate}\n            onQuestionJump={(time, id, playAfterJumpParam) => handleSeekToTime(time, id, playAfterJumpParam)}\n            episodeSlug={playerEpisodeDataMemo.slug}\n            episodeDate={playerEpisodeDataMemo.date}\n            audioRef={audioRef}\n            mainPlayerIsPlaying={playerState.isPlaying}\n            mainPlayerTogglePlayPause={handleFloatingPlayPause} \n            mainPlayerSeekAudio={(time, play) => handleSeekToTime(time, null, play)}\n            currentLanguage={currentLanguage}\n            episodeLang={playerEpisodeDataMemo.lang || 'all'}\n            episodeAudioUrl={playerEpisodeDataMemo.audio_url}\n            jumpToQuestionId={playerEpisodeDataMemo.jumpToQuestionId}\n            isBatchAddDisabled={true}\n            showTranscript={showTranscriptUI}\n            user={user}\n            disableAutomaticCollapse={true}\n            onOpenSpeakerAssignmentDialog={handleOpenSpeakerAssignmentDialog}\n            transcriptUtterances={playerEpisodeDataMemo.transcript?.utterances || []}\n            transcriptId={playerEpisodeDataMemo.transcript?.id || null}\n            transcriptWords={playerEpisodeDataMemo.transcript?.words || []}\n            segmentToHighlight={playerEpisodeDataMemo.segmentToHighlight}\n            isLoading={Boolean(questionsLoading)}\n            transcriptLoading={Boolean(transcriptLoading)}\n            onTranscriptLocalUpdate={setTranscript}\n          />\n        </div>\n      </div>\n      {segmentForSpeakerAssignment && (\n        <SpeakerAssignmentDialog\n          isOpen={isSpeakerAssignmentDialogOpen}\n          onClose={handleCloseSpeakerAssignmentDialog}\n          segment={segmentForSpeakerAssignment}\n          allUtterances={playerEpisodeDataMemo.transcript?.utterances || []}\n          onSave={handleSaveSpeakerAssignment}\n          currentLanguage={currentLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default PlayerPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/pages/UploadPage.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Button' is defined but never used. Allowed unused vars must match /^React$/u.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"no-unused-vars","severity":1,"message":"'UploadCloud' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"no-unused-vars","severity":1,"message":"'Loader2' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"no-unused-vars","severity":1,"message":"'PlusCircle' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":42},{"ruleId":"no-unused-vars","severity":1,"message":"'ArrowLeft' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":53},{"ruleId":"no-unused-vars","severity":1,"message":"'TestTube' is defined but never used. Allowed unused vars must match /^React$/u.","line":5,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":5,"endColumn":63},{"ruleId":"no-unused-vars","severity":1,"message":"'FileUploadItem' is defined but never used. Allowed unused vars must match /^React$/u.","line":8,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":22},{"ruleId":"no-unused-vars","severity":1,"message":"'OverwriteDialog' is defined but never used. Allowed unused vars must match /^React$/u.","line":9,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDropzone } from 'react-dropzone';\nimport { Button } from '@/components/ui/button';\nimport { UploadCloud, Loader2, PlusCircle, ArrowLeft, TestTube } from 'lucide-react';\nimport { getLocaleString } from '@/lib/locales';\nimport useFileUploadManager from '@/hooks/useFileUploadManager';\nimport FileUploadItem from '@/components/uploader/FileUploadItem';\nimport OverwriteDialog from '@/components/uploader/OverwriteDialog';\nimport { testOpenAIConnection } from '@/lib/openAIService';\nimport { useToast } from '@/hooks/use-toast';\n\nconst UploadPage = ({ currentLanguage }) => {\n  const navigate = useNavigate();\n  const { toast } = useToast();\n  const [isTestingOpenAI, setIsTestingOpenAI] = useState(false);\n  \n  const {\n    filesToProcess,\n    isProcessingAll,\n    showOverwriteDialog,\n    currentItemForOverwrite,\n    addFilesToQueue,\n    handleProcessAllFiles,\n    handleTimingsChange,\n    handleTitleChange,\n    handleRemoveItem,\n    confirmOverwrite,\n    cancelOverwrite,\n    handleTranslateTimings,\n  } = useFileUploadManager(currentLanguage);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    addFilesToQueue(acceptedFiles);\n  }, [addFilesToQueue]);\n\n  const handleTestOpenAI = async () => {\n    setIsTestingOpenAI(true);\n    try {\n      const result = await testOpenAIConnection();\n      if (result.success) {\n        toast({\n          title: \"✅ OpenAI Тест Успешен\",\n          description: `Все работает! Перевод: \"${result.result}\"`,\n          duration: 5000\n        });\n      } else {\n        let title = \"❌ OpenAI Тест Неудачен\";\n        let description = result.error;\n        \n        // Provide specific guidance based on error step\n        switch (result.step) {\n          case \"edge_function\":\n            title = \"🌐 Проблема с Сервером\";\n            description = `${result.error}\\n\\nПроверьте подключение к интернету и статус сервера.`;\n            break;\n          case \"api_key_missing\":\n            title = \"🔑 API Ключ Отсутствует\";\n            description = `${result.error}\\n\\nОбратитесь к администратору для настройки API ключа.`;\n            break;\n          case \"connection\":\n            title = \"🌐 Сетевая Ошибка\";\n            description = `${result.error}\\n\\nПроверьте интернет-соединение и попробуйте позже.`;\n            break;\n          case \"timeout\":\n            title = \"⏱️ Таймаут\";\n            description = `${result.error}\\n\\nСервер не отвечает. Попробуйте позже.`;\n            break;\n        }\n        \n        toast({\n          title,\n          description,\n          variant: \"destructive\",\n          duration: 8000\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"❌ Неожиданная Ошибка\",\n        description: `Произошла неожиданная ошибка: ${error.message}`,\n        variant: \"destructive\",\n        duration: 8000\n      });\n    } finally {\n      setIsTestingOpenAI(false);\n    }\n  };\n\n  const { getRootProps, getInputProps, isDragActive, open } = useDropzone({\n    onDrop,\n    accept: { 'audio/*': ['.mp3', '.wav', '.m4a', '.aac', '.ogg', '.flac'] },\n    multiple: true,\n    noClick: true,\n    noKeyboard: true,\n  });\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl bg-slate-800/70 rounded-xl shadow-2xl border border-slate-700/50\">\n      <Button \n        variant=\"outline\" \n        onClick={() => navigate('/episodes')} \n        className=\"mb-6 bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300\"\n      >\n        <ArrowLeft className=\"mr-2 h-4 w-4\" /> {getLocaleString('backToEpisodes', currentLanguage)}\n      </Button>\n      <div className=\"flex justify-between items-start mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-purple-300 mb-2\">{getLocaleString('uploadAudioFiles', currentLanguage)}</h1>\n          <p className=\"text-sm text-slate-400\">{getLocaleString('uploadAudioDescription', currentLanguage)}</p>\n        </div>\n        <Button\n          onClick={handleTestOpenAI}\n          disabled={isTestingOpenAI}\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"bg-slate-700 hover:bg-slate-600 border-slate-600 text-slate-300\"\n        >\n          {isTestingOpenAI ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <TestTube className=\"mr-2 h-4 w-4\" />\n          )}\n          Тест OpenAI\n        </Button>\n      </div>\n\n      <div {...getRootProps({ className: `p-6 border-2 border-dashed rounded-lg text-center cursor-pointer mb-6 ${isDragActive ? 'border-purple-500 bg-purple-500/10' : 'border-slate-600 hover:border-slate-500'}` })}>\n        <input {...getInputProps()} style={{ display: 'none' }} />\n        <UploadCloud className=\"mx-auto h-12 w-12 text-slate-400 mb-2\" />\n        {isDragActive ? (\n          <p className=\"text-purple-300 text-md\">{getLocaleString('dropFilesHere', currentLanguage)}</p>\n        ) : (\n          <p className=\"text-slate-300 text-md\">{getLocaleString('dragOrClickUpload', currentLanguage)}</p>\n        )}\n         <Button type=\"button\" onClick={open} variant=\"ghost\" className=\"mt-2 text-purple-300 hover:text-purple-200\">\n            {getLocaleString('selectFiles', currentLanguage)}\n        </Button>\n        <p className=\"text-xs text-slate-500 mt-1\">{getLocaleString('supportedFormats', currentLanguage)}</p>\n      </div>\n\n      {filesToProcess.length > 0 && (\n        <div className=\"space-y-4 mb-6\">\n          {filesToProcess.map((itemData) => (\n            <FileUploadItem \n              key={itemData.id}\n              itemData={itemData}\n              onTimingsChange={handleTimingsChange}\n              onTitleChange={handleTitleChange}\n              onRemove={handleRemoveItem}\n              onTranslateTimings={handleTranslateTimings}\n              currentLanguage={currentLanguage}\n              canTranslate={filesToProcess.some(item => item.originalFileId === itemData.originalFileId && item.lang === 'en' && itemData.lang === 'es')}\n            />\n          ))}\n        </div>\n      )}\n      \n      <div className=\"flex items-center justify-between mt-8\">\n        <Button \n            onClick={open} \n            variant=\"outline\"\n            className=\"border-purple-500 text-purple-300 hover:bg-purple-500/10 hover:text-purple-200 focus-visible:ring-purple-500\"\n            disabled={isProcessingAll}\n        >\n            <PlusCircle className=\"mr-2 h-5 w-5\" />\n            {getLocaleString('addAnotherFile', currentLanguage)}\n        </Button>\n        <Button \n          onClick={handleProcessAllFiles} \n          disabled={isProcessingAll || filesToProcess.length === 0 || filesToProcess.every(fd => fd.isUploading || fd.uploadComplete || fd.uploadError)} \n          className=\"bg-green-600 hover:bg-green-700 text-lg px-8 py-3 text-white\"\n        >\n          {isProcessingAll ? (\n            <>\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              {getLocaleString('processing', currentLanguage)}...\n            </>\n          ) : (\n            <>{getLocaleString('startAllUploads', currentLanguage)}</>\n          )}\n        </Button>\n      </div>\n\n      <OverwriteDialog \n        isOpen={showOverwriteDialog}\n        onOpenChange={cancelOverwrite} \n        onConfirm={confirmOverwrite}\n        onCancel={cancelOverwrite}\n        slug={currentItemForOverwrite?.episodeSlug || ''}\n        currentLanguage={currentLanguage}\n      />\n    </div>\n  );\n};\n\nexport default UploadPage;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/services/uploader/fileDetailsExtractor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/services/uploader/fileProcessor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/services/uploader/transcriptPoller.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/src/services/uploader/unifiedFileProcessor.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'sourceLangForEn' is assigned a value but never used. Allowed unused vars must match /^React$/u.","line":104,"column":75,"nodeType":"Identifier","messageId":"unusedVar","endLine":104,"endColumn":90}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '@/lib/supabaseClient';\nimport { getLocaleString } from '@/lib/locales';\nimport { getFileNameWithoutExtension, formatShortDate } from '@/lib/utils';\nimport r2Service from '@/lib/r2Service';\nimport assemblyAIService from '@/lib/assemblyAIService';\nimport { parseQuestionsFromDescriptionString } from '@/lib/podcastService';\nimport { translateTextOpenAI } from '@/lib/openAIService';\nimport { startPollingForItem } from './transcriptPoller';\n\n// File details extraction functions\nexport const generateInitialItemData = async (file, targetLang, currentLanguage, toast, sourceLangForEnTimings = null, esTimingsForEn = null) => {\n  const nameWithoutExt = getFileNameWithoutExtension(file.name);\n  let dateFromFile = null;\n  let titleBase = nameWithoutExt;\n  let fileHasLangSuffix = false;\n\n  const langSuffixMatch = nameWithoutExt.match(/_([RUruESesENen]{2})$/i);\n  if (langSuffixMatch) {\n    titleBase = nameWithoutExt.substring(0, nameWithoutExt.lastIndexOf(langSuffixMatch[0])).trim();\n    fileHasLangSuffix = true;\n  }\n  \n  const dateMatch = titleBase.match(/(\\d{4})\\.(\\d{2})\\.(\\d{2})/); \n  if (dateMatch) {\n    dateFromFile = `${dateMatch[1]}-${dateMatch[2]}-${dateMatch[3]}`;\n    titleBase = titleBase.replace(dateMatch[0], '').trim().replace(/^[-_]+|[-_]+$/g, '');\n  } else {\n    const strictDateMatch = titleBase.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/); \n    if (strictDateMatch) {\n      dateFromFile = `${strictDateMatch[1]}-${strictDateMatch[2]}-${strictDateMatch[3]}`;\n      titleBase = ''; \n    }\n  }\n  \n  const meditationPrefix = getLocaleString('meditationTitlePrefix', targetLang);\n  const episodeTitle = `${meditationPrefix} ${dateFromFile ? formatShortDate(dateFromFile, targetLang) : titleBase || getFileNameWithoutExtension(file.name)}`;\n  const episodeSlug = dateFromFile ? `${dateFromFile}_${targetLang}` : `${getFileNameWithoutExtension(file.name)}_${targetLang}`;\n\n  let timingsText = '';\n  if (targetLang === 'en' && sourceLangForEnTimings === 'es' && esTimingsForEn) {\n      timingsText = esTimingsForEn;\n  } else if (dateFromFile) {\n    try {\n      const columnToFetch = targetLang === 'ru' ? 'timings_ru' : targetLang === 'es' ? 'timings_es' : null;\n      if (columnToFetch) {\n        const { data, error } = await supabase\n          .from('timeOld')\n          .select(columnToFetch)\n          .eq('date', dateFromFile)\n          .maybeSingle();\n        if (error) throw error; \n        if (data) {\n          timingsText = data[columnToFetch] || '';\n        }\n      }\n    } catch (err) {\n      console.error(`Error fetching timings for ${file.name} (${targetLang}):`, err);\n      toast({ title: getLocaleString('errorGeneric', currentLanguage), description: `Не удалось загрузить тайминги для ${file.name} (${targetLang}): ${err.message}`, variant: 'destructive' });\n    }\n  }\n\n  return {\n    file,\n    originalFileId: file.name + file.lastModified,\n    id: `${file.name}-${targetLang}-${Date.now()}`, \n    parsedDate: dateFromFile,\n    lang: targetLang,\n    episodeTitle,\n    episodeSlug,\n    timingsText,\n    uploadProgress: 0,\n    isUploading: false,\n    uploadError: null,\n    uploadComplete: false,\n    transcriptionStatus: null,\n    transcriptionError: null,\n    fileHasLangSuffix,\n    sourceLangForEn: sourceLangForEnTimings,\n    isTranslatingTimings: false,\n    translationTriggered: false,\n  };\n};\n\n// File processing functions\nexport const processSingleItem = async ({\n  itemData,\n  forceOverwrite = false,\n  updateItemState,\n  currentLanguage,\n  toast,\n  openOverwriteDialog, \n  pollingIntervalsRef,\n  getAllItems \n}) => {\n  updateItemState(itemData.id, { \n    isUploading: true, \n    uploadProgress: 0, \n    uploadError: null, \n    uploadComplete: false,\n    transcriptionStatus: null,\n    transcriptionError: null,\n  });\n  \n  const { file, episodeSlug, episodeTitle, lang, parsedDate, timingsText, sourceLangForEn, originalFileId } = itemData;\n\n  if (!episodeSlug) {\n    updateItemState(itemData.id, { isUploading: false, uploadError: \"Не удалось определить SLUG.\" });\n    return { success: false, requiresDialog: false };\n  }\n\n  let workerFileUrl;\n  let r2FileKey;\n  let bucketNameUsed;\n  let userConfirmedOverwriteGlobal = forceOverwrite;\n\n  try {\n    if (!forceOverwrite) {\n      const { data: existingEpisode, error: checkError } = await supabase\n        .from('episodes')\n        .select('slug, audio_url, r2_object_key, r2_bucket_name')\n        .eq('slug', episodeSlug)\n        .maybeSingle();\n\n      if (checkError) {\n         console.error(\"Supabase check episode error:\", checkError);\n         throw new Error(getLocaleString('errorCheckingEpisodeDB', currentLanguage, {errorMessage: checkError.message}));\n      }\n\n      if (existingEpisode) {\n        const userConfirmedDialog = await openOverwriteDialog(itemData);\n        if (!userConfirmedDialog) {\n          updateItemState(itemData.id, { isUploading: false, uploadError: getLocaleString('uploadCancelledEpisodeExists', currentLanguage) });\n          return { success: false, requiresDialog: true };\n        }\n        userConfirmedOverwriteGlobal = true; \n        \n        workerFileUrl = existingEpisode.audio_url;\n        r2FileKey = existingEpisode.r2_object_key;\n        bucketNameUsed = existingEpisode.r2_bucket_name;\n      }\n    }\n    \n    if (!userConfirmedOverwriteGlobal || !workerFileUrl) {\n      const fileExistsInR2 = await r2Service.checkFileExists(file.name);\n      if (fileExistsInR2.exists && !userConfirmedOverwriteGlobal) {\n        workerFileUrl = fileExistsInR2.fileUrl;\n        r2FileKey = file.name.replace(/\\s+/g, '_'); \n        bucketNameUsed = fileExistsInR2.bucketName;\n        updateItemState(itemData.id, { uploadProgress: 100 }); \n        toast({ title: getLocaleString('fileAlreadyInR2Title', currentLanguage), description: getLocaleString('fileAlreadyInR2Desc', currentLanguage, { fileName: file.name }), variant: \"info\" });\n      } else {\n        const { fileUrl: uploadedUrl, fileKey: uploadedKey, bucketName: uploadedBucket } = await r2Service.uploadFile(\n          file,\n          (progress) => updateItemState(itemData.id, { uploadProgress: progress }),\n          currentLanguage,\n          file.name \n        );\n        workerFileUrl = uploadedUrl;\n        r2FileKey = uploadedKey;\n        bucketNameUsed = uploadedBucket;\n      }\n    } else if (userConfirmedOverwriteGlobal && workerFileUrl) {\n       updateItemState(itemData.id, { uploadProgress: 100 });\n       toast({ title: getLocaleString('usingExistingR2FileTitle', currentLanguage), description: getLocaleString('usingExistingR2FileDesc', currentLanguage, { fileName: r2FileKey }), variant: \"info\" });\n    }\n    \n    if (userConfirmedOverwriteGlobal) {\n       updateItemState(itemData.id, { uploadError: null, transcriptionStatus: getLocaleString('overwritingDbData', currentLanguage) });\n       \n       const { error: qDelError } = await supabase.from('questions').delete().eq('episode_slug', episodeSlug).eq('lang', lang);\n       if (qDelError) console.warn(`Error deleting old questions for ${episodeSlug} (${lang}): ${qDelError.message}`);\n       \n       const { error: tDelError } = await supabase.from('transcripts').delete().eq('episode_slug', episodeSlug).eq('lang', lang);\n       if (tDelError) console.warn(`Error deleting old transcripts for ${episodeSlug} (${lang}): ${tDelError.message}`);\n       \n       toast({title: getLocaleString('overwritingEpisodeTitle', currentLanguage), description: getLocaleString('overwritingEpisodeDesc', currentLanguage, {slug: episodeSlug})});\n    }\n    \n    const audioForDuration = new Audio();\n    audioForDuration.src = URL.createObjectURL(file);\n    let duration = 0;\n    try {\n      duration = await new Promise((resolve, reject) => {\n        audioForDuration.onloadedmetadata = () => resolve(audioForDuration.duration);\n        audioForDuration.onerror = (e) => {\n          console.error(\"Audio metadata load error:\", e);\n          reject(new Error(getLocaleString('audioMetadataError', currentLanguage)));\n        };\n        setTimeout(() => reject(new Error('Timeout getting audio duration')), 7000);\n      });\n    } catch (e) { \n      console.error(\"Error getting duration\", e); \n      duration = 0; \n      toast({ title: getLocaleString('warning', currentLanguage), description: getLocaleString('audioMetadataError', currentLanguage) + \" \" + e.message, variant: \"destructive\" });\n    } finally {\n      URL.revokeObjectURL(audioForDuration.src);\n    }\n\n    const episodePayload = {\n      slug: episodeSlug,\n      title: episodeTitle,\n      lang: lang,\n      date: parsedDate,\n      audio_url: workerFileUrl,\n      r2_object_key: r2FileKey,\n      r2_bucket_name: bucketNameUsed,\n      duration: Math.round(duration || 0),\n      file_has_lang_suffix: itemData.fileHasLangSuffix,\n    };\n    \n    const { data: upsertedEpisode, error: episodeDbError } = await supabase\n      .from('episodes')\n      .upsert(episodePayload, { onConflict: 'slug' })\n      .select('slug')\n      .maybeSingle();\n\n    if (episodeDbError) throw new Error(getLocaleString('supabaseEpisodeError', currentLanguage, {errorMessage: episodeDbError.message}));\n    \n    if (timingsText.trim() && upsertedEpisode.slug) {\n      let questionsToInsert = parseQuestionsFromDescriptionString(timingsText, lang, upsertedEpisode.slug);\n      \n      const logTranslatedQuestions = async (questions, currentSlug, enSlug) => {\n        try {\n          const translatedTimingsText = await translateTextOpenAI(timingsText, 'en');\n          const translatedQuestionsForEn = parseQuestionsFromDescriptionString(translatedTimingsText, 'en', enSlug);\n\n          if (translatedQuestionsForEn.length > 0) {\n            const { error: enQDelError } = await supabase.from('questions').delete().eq('episode_slug', enSlug).eq('lang', 'en');\n            if (enQDelError) console.warn(`Error deleting old EN questions for ${enSlug}: ${enQDelError.message}`);\n            \n            const { error: enQError } = await supabase.from('questions').insert(translatedQuestionsForEn).select();\n            if (enQError) console.warn(`Error saving translated EN questions for ${enSlug}: ${enQError.message}`);\n            else {\n              toast({title: \"English Questions Translated\", description: `Questions for ${enSlug} translated to English.`, variant: \"default\"});\n            }\n          }\n        } catch (translationError) {\n          console.error(\"Error translating questions to English:\", translationError);\n          toast({title: \"English Question Translation Error\", description: translationError.message, variant: \"destructive\"});\n        }\n      };\n\n      if (lang === 'es' && getAllItems) {\n        const allCurrentItems = getAllItems();\n        const correspondingEnItem = allCurrentItems.find(item => item.originalFileId === originalFileId && item.lang === 'en' && item.sourceLangForEn === 'es');\n        if (correspondingEnItem) {\n          await logTranslatedQuestions(questionsToInsert, episodeSlug, correspondingEnItem.episodeSlug);\n        }\n      }\n\n      if (questionsToInsert.length > 0) {\n        const { error: questionsError } = await supabase.from('questions').insert(questionsToInsert).select();\n        if (questionsError) console.warn(`Error saving questions for ${episodeSlug} (${lang}): ${questionsError.message}`);\n      }\n    }\n\n    let finalTranscriptStatus = itemData.transcriptionStatus;\n    if (upsertedEpisode.slug) {\n      updateItemState(itemData.id, { transcriptionStatus: getLocaleString('startingTranscription', currentLanguage) });\n      \n      const { data: existingTranscript, error: transcriptCheckError } = await supabase\n        .from('transcripts')\n        .select('status, assemblyai_transcript_id')\n        .eq('episode_slug', upsertedEpisode.slug)\n        .eq('lang', lang)\n        .maybeSingle();\n\n      if (transcriptCheckError && transcriptCheckError.code !== 'PGRST116') {\n        throw new Error(getLocaleString('supabaseTranscriptError', currentLanguage, { errorMessage: transcriptCheckError.message }));\n      }\n\n      let shouldSubmitTranscription = true;\n      if (existingTranscript && !userConfirmedOverwriteGlobal) {\n        if (existingTranscript.status === 'completed') {\n          shouldSubmitTranscription = false;\n          finalTranscriptStatus = 'completed';\n        } else if (existingTranscript.status === 'processing' && existingTranscript.assemblyai_transcript_id) {\n          shouldSubmitTranscription = false;\n          startPollingForItem(itemData, updateItemState, currentLanguage, toast, pollingIntervalsRef);\n        }\n      }\n\n      if (shouldSubmitTranscription) {\n        try {\n          const { transcriptId, error: assemblyError } = await assemblyAIService.submitTranscription(workerFileUrl, lang);\n          if (assemblyError) throw assemblyError;\n\n          const transcriptPayload = {\n            episode_slug: upsertedEpisode.slug,\n            lang: lang,\n            assemblyai_transcript_id: transcriptId,\n            status: 'processing'\n          };\n\n          const { error: transcriptDbError } = await supabase\n            .from('transcripts')\n            .upsert(transcriptPayload, { onConflict: 'episode_slug,lang' });\n\n          if (transcriptDbError) throw new Error(getLocaleString('supabaseTranscriptError', currentLanguage, { errorMessage: transcriptDbError.message }));\n\n          startPollingForItem(itemData, updateItemState, currentLanguage, toast, pollingIntervalsRef);\n        } catch (transcriptionError) {\n          console.error(\"Transcription submission error:\", transcriptionError);\n          updateItemState(itemData.id, { transcriptionError: transcriptionError.message });\n          toast({ title: getLocaleString('transcriptionErrorTitle', currentLanguage), description: getLocaleString('transcriptionErrorDesc', currentLanguage, { errorMessage: transcriptionError.message }), variant: \"destructive\" });\n        }\n      }\n    }\n\n    updateItemState(itemData.id, { \n      isUploading: false, \n      uploadComplete: true, \n      uploadError: null,\n      transcriptionStatus: finalTranscriptStatus\n    });\n\n    return { success: true, requiresDialog: false };\n\n  } catch (error) {\n    console.error(\"Error processing item:\", error);\n    updateItemState(itemData.id, { \n      isUploading: false, \n      uploadError: error.message,\n      transcriptionError: error.message\n    });\n    toast({ title: getLocaleString('errorGeneric', currentLanguage), description: error.message, variant: \"destructive\" });\n    return { success: false, requiresDialog: false };\n  }\n}; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/workspace/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
