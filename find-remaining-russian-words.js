#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const localesDir = path.join(__dirname, 'src/lib/locales');

console.log('üîç –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª–∞—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const enContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'en.json'), 'utf8'));

const languagesToCheck = ['es', 'de', 'fr', 'pl'];

languagesToCheck.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  console.log(`\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º ${lang.toUpperCase()}.json...`);

  const issues = [];

  Object.keys(content).forEach(key => {
    const value = content[key];
    if (typeof value === 'string' && /[\u0400-\u04FF]/.test(value) && value !== '–†—É—Å—Å–∫–∏–π') {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–ª—É—á–∞–∏
      if (!key.includes('russian') && !key.includes('language') && !key.includes('polish') && !key.includes('german') && !key.includes('french') && !key.includes('spanish') && !key.includes('english')) {
        issues.push({
          key,
          value,
          enValue: enContent[key] || '–ù–ï–¢ –ü–ï–†–ï–í–û–î–ê'
        });
      }
    }
  });

  if (issues.length === 0) {
    console.log(`‚úÖ ${lang.toUpperCase()}: –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤`);
  } else {
    console.log(`‚ö†Ô∏è ${lang.toUpperCase()}: –Ω–∞–π–¥–µ–Ω–æ ${issues.length} —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤:`);
    issues.slice(0, 5).forEach(issue => {
      console.log(`   ‚Ä¢ ${issue.key}: "${issue.value}"`);
      if (issue.enValue !== '–ù–ï–¢ –ü–ï–†–ï–í–û–î–ê') {
        console.log(`     –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: "${issue.enValue}"`);
      }
    });

    if (issues.length > 5) {
      console.log(`   ... –∏ –µ—â–µ ${issues.length - 5} –ø—Ä–æ–±–ª–µ–º`);
    }
  }
});

// –ü–æ–∫–∞–∂–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ–±–ª–µ–º–∞–º
console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:');
let totalIssues = 0;

languagesToCheck.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  const issues = Object.values(content).filter(value =>
    typeof value === 'string' && /[\u0400-\u04FF]/.test(value) && value !== '–†—É—Å—Å–∫–∏–π'
  ).length;

  totalIssues += issues;
  console.log(`${lang.toUpperCase()}: ${issues} –ø—Ä–æ–±–ª–µ–º`);
});

console.log(`\nüìà –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
