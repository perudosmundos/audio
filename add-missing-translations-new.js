#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const localesDir = path.join(__dirname, 'src/lib/locales');

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤—É
const ruContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'ru.json'), 'utf8'));

// –ù–æ–≤—ã–µ –∫–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
const newTranslations = {
  // CleanManagePage
  'uploadAudioAndManageVersions': {
    ru: '–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏',
    en: 'Upload audio and manage language versions',
    es: 'Subir audio y gestionar versiones de idiomas',
    de: 'Audio hochladen und Sprachversionen verwalten',
    fr: 'T√©l√©charger l\'audio et g√©rer les versions linguistiques',
    pl: 'Prze≈õlij audio i zarzƒÖdzaj wersjami jƒôzykowymi'
  },
  'supportedAudioFormatsDescription': {
    ru: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã: MP3, WAV, M4A, AAC, OGG, FLAC',
    en: 'Supported audio files: MP3, WAV, M4A, AAC, OGG, FLAC',
    es: 'Archivos de audio admitidos: MP3, WAV, M4A, AAC, OGG, FLAC',
    de: 'Unterst√ºtzte Audio-Dateien: MP3, WAV, M4A, AAC, OGG, FLAC',
    fr: 'Fichiers audio pris en charge : MP3, WAV, M4A, AAC, OGG, FLAC',
    pl: 'Obs≈Çugiwane pliki audio: MP3, WAV, M4A, AAC, OGG, FLAC'
  },
  'waitForCompletion': {
    ru: '–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
    en: 'Please wait for the current process to complete',
    es: 'Espere a que se complete el proceso actual',
    de: 'Bitte warten Sie, bis der aktuelle Prozess abgeschlossen ist',
    fr: 'Veuillez attendre la fin du processus en cours',
    pl: 'Poczekaj na zako≈Ñczenie bie≈ºƒÖcego procesu'
  },
  'errorLoadingEpisodes': {
    ru: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ø–∏–∑–æ–¥–æ–≤',
    en: 'Error loading episodes',
    es: 'Error al cargar episodios',
    de: 'Fehler beim Laden der Episoden',
    fr: 'Erreur lors du chargement des √©pisodes',
    pl: 'B≈ÇƒÖd ≈Çadowania odcink√≥w'
  }
};

console.log('üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const languages = ['en', 'es', 'de', 'fr', 'pl'];
languages.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const currentContent = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  let addedCount = 0;

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  Object.keys(newTranslations).forEach(key => {
    if (!currentContent[key]) {
      currentContent[key] = newTranslations[key][lang] || newTranslations[key].en;
      addedCount++;
    }
  });

  if (addedCount > 0) {
    fs.writeFileSync(filePath, JSON.stringify(currentContent, null, 2) + '\n');
    console.log(`‚úÖ ${lang.toUpperCase()}: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
  }
});

console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
Object.keys(newTranslations).forEach(key => {
  let foundCount = 0;
  const langs = ['ru', 'en', 'es', 'de', 'fr', 'pl'];

  langs.forEach(lang => {
    const filePath = path.join(localesDir, `${lang}.json`);
    const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    if (content[key]) {
      foundCount++;
    }
  });

  console.log(`${key}: ${foundCount}/6 —è–∑—ã–∫–æ–≤`);
});

console.log('\nüéâ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏!');
