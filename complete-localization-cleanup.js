#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const localesDir = path.join(__dirname, 'src/lib/locales');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
const ruContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'ru.json'), 'utf8'));
const enContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'en.json'), 'utf8'));
const esContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'es.json'), 'utf8'));
const deContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'de.json'), 'utf8'));
const frContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'fr.json'), 'utf8'));
const plContent = JSON.parse(fs.readFileSync(path.join(localesDir, 'pl.json'), 'utf8'));

const allLocales = { ru: ruContent, en: enContent, es: esContent, de: deContent, fr: frContent, pl: plContent };

console.log('üîß –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫...\n');

// –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–æ–≥–æ
['en', 'es', 'de', 'fr', 'pl'].forEach(lang => {
  const content = allLocales[lang];
  let changesCount = 0;

  Object.keys(content).forEach(key => {
    const value = content[key];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    if (typeof value === 'string' && /[–ê-–Ø–∞-—è–Å—ë]/.test(value)) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á "russian" - —ç—Ç–æ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ "Russian" –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      if (key === 'russian') return;

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö
      let newValue = null;

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
      if (enContent[key] && !/[–ê-–Ø–∞-—è–Å—ë]/.test(enContent[key])) {
        newValue = enContent[key];
      }
      // –ó–∞—Ç–µ–º —Ä—É—Å—Å–∫–∏–π (–∫–∞–∫ fallback)
      else if (ruContent[key] && !/[–ê-–Ø–∞-—è–Å—ë]/.test(ruContent[key])) {
        newValue = ruContent[key];
      }

      if (newValue && newValue !== value) {
        content[key] = newValue;
        changesCount++;
      }
    }
  });

  if (changesCount > 0) {
    fs.writeFileSync(path.join(localesDir, `${lang}.json`), JSON.stringify(content, null, 2) + '\n');
    console.log(`‚úÖ ${lang.toUpperCase()}: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${changesCount} —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫`);
  } else {
    console.log(`‚úÖ ${lang.toUpperCase()}: —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
  }
});

console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫
['en', 'es', 'de', 'fr', 'pl'].forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  const russianStrings = Object.values(content).filter(value =>
    typeof value === 'string' && /[–ê-–Ø–∞-—è–Å—ë]/.test(value) && value !== '–†—É—Å—Å–∫–∏–π'
  );

  if (russianStrings.length === 0) {
    console.log(`‚úÖ ${lang.toUpperCase()}: –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫`);
  } else {
    console.log(`‚ö†Ô∏è ${lang.toUpperCase()}: –Ω–∞–π–¥–µ–Ω–æ ${russianStrings.length} —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫`);
  }
});

console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
