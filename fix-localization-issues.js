#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const localesDir = path.join(__dirname, 'src/lib/locales');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const enPath = path.join(localesDir, 'en.json');
const enContent = JSON.parse(fs.readFileSync(enPath, 'utf8'));

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Ñ–∞–π–ª
const ruPath = path.join(localesDir, 'ru.json');
const ruContent = JSON.parse(fs.readFileSync(ruPath, 'utf8'));

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
function fixLocaleFile(lang, content) {
  let fixed = 0;
  let total = 0;

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
  Object.keys(enContent).forEach(key => {
    total++;
    const enValue = enContent[key];
    const currentValue = content[key];

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ä—É—Å—Å–∫–æ–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É), –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ
    if (currentValue && /[\u0400-\u04FF]/.test(currentValue)) {
      content[key] = enValue;
      fixed++;
      console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${key}`);
    }
  });

  return { fixed, total };
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —è–∑—ã–∫–∏ –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
const languagesToFix = ['es', 'de', 'fr', 'pl'];

languagesToFix.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);

  try {
    const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${lang}.json...`);

    const { fixed, total } = fixLocaleFile(lang, content);

    if (fixed > 0) {
      fs.writeFileSync(filePath, JSON.stringify(content, null, 2) + '\n');
      console.log(`‚úÖ ${lang}.json: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} –∏–∑ ${total} —Å—Ç—Ä–æ–∫`);
    } else {
      console.log(`‚úÖ ${lang}.json: –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã`);
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${lang}.json: ${err.message}`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
let totalIssues = 0;

languagesToFix.forEach(lang => {
  const filePath = path.join(localesDir, `${lang}.json`);
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));

  const issues = Object.values(content).filter(value =>
    typeof value === 'string' && /[\u0400-\u04FF]/.test(value)
  ).length;

  totalIssues += issues;

  if (issues === 0) {
    console.log(`‚úÖ ${lang}.json: –Ω–µ—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤`);
  } else {
    console.log(`‚ö†Ô∏è ${lang}.json: –Ω–∞–π–¥–µ–Ω–æ ${issues} —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤`);
  }
});

console.log(`\nüìà –ò—Ç–æ–≥–æ: ${totalIssues === 0 ? '‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!' : `‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${totalIssues} –ø—Ä–æ–±–ª–µ–º`}`);
