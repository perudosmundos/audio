#!/usr/bin/env node
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ fallback —Ç–µ–∫—Å—Ç–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fallback —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
function fixFallbackTexts(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let changes = 0;

    // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ fallback —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    const fallbackPatterns = [
      // getLocaleString('key', currentLanguage) || '–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
      /getLocaleString\(['"`]([^'"`]+)['"`],\s*currentLanguage\)\s*\|\|\s*['"`]([^'"`]*[–ê-–Ø–∞-—è–Å—ë][^'"`]*)['"`]/g,
      // getLocaleString('key', currentLanguage) || "–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç"
      /getLocaleString\(['"`]([^'"`]+)['"`],\s*currentLanguage\)\s*\|\|\s*["`]([^"`]*[–ê-–Ø–∞-—è–Å—ë][^"`]*)["`]/g,
    ];

    fallbackPatterns.forEach(pattern => {
      content = content.replace(pattern, (match, key, fallbackText) => {
        if (fallbackText && /[–ê-–Ø–∞-—è–Å—ë]/.test(fallbackText)) {
          changes++;
          console.log(`  ‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω fallback: ${key} -> "${fallbackText}"`);
          return `getLocaleString('${key}', currentLanguage)`;
        }
        return match;
      });
    });

    if (changes > 0) {
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${changes} fallback —Ç–µ–∫—Å—Ç–æ–≤ –≤ ${path.basename(filePath)}`);
      return changes;
    } else {
      console.log(`‚úÖ –ù–µ—Ç fallback —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ ${path.basename(filePath)}`);
      return 0;
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`);
    return 0;
  }
}

// –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function findComponentFiles(dir) {
  const files = [];

  function scanDirectory(currentDir) {
    const items = fs.readdirSync(currentDir);

    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        scanDirectory(fullPath);
      } else if (stat.isFile() && (item.endsWith('.jsx') || item.endsWith('.js'))) {
        files.push(fullPath);
      }
    }
  }

  scanDirectory(dir);
  return files;
}

const srcDir = path.join(__dirname, 'src');
const componentFiles = findComponentFiles(srcDir);

console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${componentFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...\n`);

let totalChanges = 0;

componentFiles.forEach(file => {
  const changes = fixFallbackTexts(file);
  totalChanges += changes;
});

console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${totalChanges} fallback —Ç–µ–∫—Å—Ç–æ–≤ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö`);
console.log(`üéØ –¢–µ–ø–µ—Ä—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –±–µ–∑ fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π!`);
